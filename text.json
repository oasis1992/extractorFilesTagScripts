{
  "data": "<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="es" xmlns:fb="http://ogp.me/ns/fb#"><head id="head">
    <link rel="canonical" href="https://www.fincaraiz.com.co/apartamentos/arriendo/bogota"> 
    <title>Apartamentos en Arriendo en Bogotá, Vivienda Nueva y Usada | Finca Raíz</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <meta name="description" content="Apartamentos en Arriendo en Bogotá: Buscas apartamento para arrendar en Bogotá al mejor precio? Compara número de habitaciones, ubicación sector o barrio.">
    <meta name="language" content="es-CO">
    <meta http-equiv="content-language" content="es-co">
    <meta name="distribution" content="global">
    <meta name="resource-type" content="document">
    <meta name="Audience" content="All">
    <meta name="robots" content="index,follow">
    <!--OnOff_Trackuity-->
    <script async="true" type="text/javascript" src="https://sslwidget.criteo.com/event?a=%5B35366%2C48693%5D&amp;v=5.6.2&amp;p0=e%3Dexd%26site_type%3Dd&amp;p1=p%3D%255B6237104%252C5330804%252C6250131%255D%26e%3Dvl&amp;p2=e%3Ddis&amp;adce=1&amp;tld=fincaraiz.com.co&amp;dtycbr=46819" data-owner="criteo-tag"></script><script type="text/javascript" async="" src="https://www.google-analytics.com/gtm/js?id=GTM-M59GSFH&amp;t=tealium_0&amp;cid=450253576.1618263090"></script><script src="https://www.googletagservices.com/activeview/js/current/osd.js?cb=%2Fr20100101"></script><script type="text/javascript" async="" charset="utf-8" src="//static.criteo.net/js/ld/ld.js" id="utag_51"></script><script type="text/javascript" async="" charset="utf-8" src="//static.hotjar.com/c/hotjar-825301.js?sv=5" id="utag_47"></script><script type="text/javascript" async="" id="tealium-tag-3005" src="https://sb.scorecardresearch.com/c2/10424679/cs.js"></script><script src="https://connect.facebook.net/signals/config/855921464443427?v=2.9.33&amp;r=stable" async=""></script><script async="" src="//connect.facebook.net/en_US/fbevents.js"></script><script type="text/javascript" async="" charset="utf-8" src="//www.fincaraiz.com.co/App_Theme/scripts/xtcore.js" id="utag_25"></script><script type="text/javascript" async="" charset="utf-8" src="https://www.google-analytics.com/analytics.js" id="tealium-tag-7110"></script><script type="text/javascript" async="" charset="utf-8" src="//www.googleadservices.com/pagead/conversion_async.js" id="utag_7"></script><script type="text/javascript" async="" charset="utf-8" src="//sdk.mpianalytics.com/pulse.min.js" id="utag_45"></script><script src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.js" type="text/javascript" async=""></script><script type="text/javascript" async="" src="https://www.gstatic.com/recaptcha/releases/539Evs44yecoSf-lkJBQzKKj/recaptcha__en.js" crossorigin="anonymous" integrity="sha384-zjc7xTV/N/5xk7fBfl7Yk+Q37duEHBt4X3RleHe4j+AH4qq5QE4gTkWU4vCAoECz"></script><script async="" src="//static.trackuity.com/js/snippet.min.js"></script><script type="text/javascript">
        var trackuityEnable = 'true';
    </script>
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    
    <link rel="next" href="https://www.fincaraiz.com.co/apartamentos/arriendo/bogota/?ad=30|2||||2||8|||67|3630001|||||||||||||||||||1||griddate desc||||||||">
    
    <link rel="alternate" media="only screen and (max-width: 640px)" href="https://m.fincaraiz.com.co/apartamentos/arriendo/bogota">
    

    
    <meta property="fb:admins" content="100000283157257">
    <meta property="og:site_name" content="www.fincaraiz.com.co">
    <meta property="og:type" content="website">
    <meta property="og:locale" content="es_LA">
    <meta property="og:title" content="Apartamentos en Arriendo en Bogotá, Vivienda Nueva y Usada | Finca Raíz">
    <meta property="og:description" content="Apartamentos en Arriendo en Bogotá: Buscas apartamento para arrendar en Bogotá al mejor precio? Compara número de habitaciones, ubicación sector o barrio.">
    <meta property="og:url" content="http://www.fincaraiz.com.co/apartamentos/arriendo/bogota">
    <meta property="og:image" content="https://www.fincaraiz.com.co/App_Theme/images/landig_page/landing_apps/Logo_app.png">
     
    <meta name="twitter:card" content="summary_large_image"> 
    <meta name="twitter:site" content="@fincaraizfr"> 
    <meta name="twitter:creator" content="@fincaraizfr"> 
    <meta name="twitter:title" content="Apartamentos en Arriendo en Bogotá, Vivienda Nueva y Usada | Finca Raíz">
    <meta name="twitter:description" content="Apartamentos en Arriendo en Bogotá: Buscas apartamento para arrendar en Bogotá al mejor precio? Compara número de habitaciones, ubicación sector o barrio."> 
    <meta name="twitter:image" content="https://www.fincaraiz.com.co/App_Theme/images/landig_page/landing_apps/Logo_app.png"> 
    
    <meta name="google-signin-scope" content="profile email">
    <meta name="google-signin-client_id" content="751564689013-5mmokt7kti1qneh99thbrpk9lqo9hmd8.apps.googleusercontent.com">
    
    
    
    <link href="/CSSScript.ashx?Version=132622992228524589&amp;type=CSS&amp;fileSet=header,popups,normalize,mainNew,helper,font-awesomeNew,referserver,footer,parrilla,scroll,breadcrumbFilter,filters,font-fontello,font-awesomeNew,font-google-lato,popups,LoginRegister,detalle,MappingCarousel,slick,slick-theme,AlertNew,PoliticaCookies" rel="stylesheet" type="text/css">
    <script src="/CSSScript.ashx?type=JS&amp;fileSet=jquery&amp;min=0" type="text/javascript"></script>
    <script src="/CSSScript.ashx?Version=132622992269041611&amp;type=JS&amp;fileSet=AlertNew,util,input,tabs,cookie,usorigin,browserstorage,adssticky,adserverjs,ajax,PoliticaCookies" type="text/javascript"></script>
    <script src="/CSSScript.ashx?Version=132622992269041611&amp;type=JS&amp;fileSet=,knockout.min,advertresults,grid-knockOut,cookie,scroll,ajax,breadcrumbFilterV2,lazyload,contact,trackuity,loginregistercustomizer,ajax,util,validation,AlertNew,LoginRegister,FacebookManager,advertNew,validation,FavoriteAdverts,slick.min,MappingCarousel" type="text/javascript"></script>
    <script type="text/javascript">
        var AjaxEnabled = toBoolean("True")
        var sPhotosUrl = 'https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/';
        var sLogosUrl = 'https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/Logos/';
        var Origin = 40;
        var DateTimeMin = '1/1/0001 12:00:00 AM';
        var utag_data = '';
        var OLAPContactType={AdvertViewPhone:3001,AdvertContact:3002,ClientVisits:3003,ClientViewPhone:3004,ClientContact:3005,AdvertContact_DetailMain:3006,AdvertContact_DetailGridON:3007,AdvertContact_DetailPriceAlert:3008,AdvertContact_DetailCallback:3009,AdvertContact_DetailButtonZoneInfo:3010,AdvertContact_DetailMap:3011,AdvertContact_Results:3012,AdvertContact_ResultsMicrosite:3013,AdvertContact_Compare:3014,AdvertContact_SuperOffer:3015,AdvertContact_DetailButtonMain:3016,AdvertContact_Whatsapp:3017,AdvertContact_ViewPhone:3018,AdvertContact_LandingMail:3019,AdvertContact_LandingOfertas:3020,AdvertContact_LandingGSI:3021,AdvertContact_DetailMain_Ofertas:3022,AdvertContact_DetailGridON_Ofertas:3023,AdvertContact_DetailPriceAlert_Ofertas:3024,AdvertContact_DetailCallback_Ofertas:3025,AdvertContact_DetailButtonMain_Ofertas:3026,AdvertContact_Whatsapp_Ofertas:3027,AdvertContact_ViewPhone_Ofertas:3028,AdvertContact_Compare_Ofertas:3029,AdvertContact_Facebook:3030,AdvertContact_Facebook_GSI:3031,AdvertContact_Facebook_Ofertas:3032,AdvertContact_Facebook_Sabana:3033};
    </script>
<script type="text/javascript" async="" src="https://www.googletagservices.com/tag/js/gpt.js"></script><script type="text/javascript" class="AdvertisingScript">var googletag = googletag || {};googletag.cmd = googletag.cmd || []; 
</script><script type="text/javascript" class="AdvertisingScript">googletag.cmd.push(function() {
	googletag.pubads().enableAsyncRendering();
	googletag.pubads().enableSingleRequest();
	googletag.pubads().setCentering(true);
	
	googletag.enableServices();
	googletag.pubads().collapseEmptyDivs();
	googletag.pubads().addEventListener('slotRenderEnded', function(event) { AdsBuildInProcess(event.isEmpty, event.slot.getSlotElementId());  }); 
});</script><meta http-equiv="origin-trial" content="A+b/H0b8RPXNaJgaNFpO0YOFuGK6myDQXlwnJB3SwzvNMfcndat4DZYMrP4ClJIzYWo3/yP2S+8FTZ/lpqbPAAEAAABueyJvcmlnaW4iOiJodHRwczovL2ltYXNkay5nb29nbGVhcGlzLmNvbTo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzVGhpcmRQYXJ0eSI6dHJ1ZX0="><meta http-equiv="origin-trial" content="A9ZgbRtm4pU3oZiuNzOsKcC8ppFSZdcjP2qYcdQrFKVzkmiWH1kdYY1Mi9x7G8+PS8HV9Ha9Cz0gaMdKsiVZIgMAAAB7eyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9"><meta http-equiv="origin-trial" content="AxL6oBxcpn5rQDPKSAs+d0oxNyJYq2/4esBUh3Yx5z8QfcLu+AU8iFCXYRcr/CEEfDnkxxLTsvXPJFQBxHfvkgMAAACBeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXRhZ3NlcnZpY2VzLmNvbTo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9"><meta http-equiv="origin-trial" content="A9KPtG5kl3oLTk21xqynDPGQ5t18bSOpwt0w6kGa6dEWbuwjpffmdUpR3W+faZDubGT+KIk2do0BX2ca16x8qAcAAACBeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9"><meta http-equiv="origin-trial" content="A3HucHUo1oW9s+9kIKz8mLkbcmdaj5lxt3eiIMp1Nh49dkkBlg1Fhg4Fd/r0vL69mRRA36YutI9P/lJUfL8csQoAAACFeyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A0OysezhLoCRYomumeYlubLurZTCmsjTb087OvtCy95jNM65cfEsbajrJnhaGwiTxhz38ZZbm+UhUwQuXfVPTg0AAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="AxoOxdZQmIoA1WeAPDixRAeWDdgs7ZtVFfH2y19ziTgD1iaHE5ZGz2UdSjubkWvob9C5PrjUfkWi4ZSLgWk3Xg8AAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXRhZ3NlcnZpY2VzLmNvbTo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A7+rMYR5onPnACrz+niKSeFdH3xw1IyHo2AZSHmxrofRk9w4HcQPMYcpBUKu6OQ6zsdxf4m/vqa6tG6Na4OLpAQAAAB4eyJvcmlnaW4iOiJodHRwczovL2ltYXNkay5nb29nbGVhcGlzLmNvbTo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1RoaXJkUGFydHkiOnRydWV9"><script src="https://securepubads.g.doubleclick.net/gpt/pubads_impl_2021040804.js" async=""></script><script type="text/javascript" src="https://hcdn.trackuity.supplies/fincaraiz/glide-30fa291eaeb1bb48b262637b5d96dd5e.min.js"></script><link rel="preload" href="https://adservice.google.com.co/adsid/integrator.js?domain=www.fincaraiz.com.co" as="script"><script type="text/javascript" src="https://adservice.google.com.co/adsid/integrator.js?domain=www.fincaraiz.com.co"></script><link rel="preload" href="https://adservice.google.com/adsid/integrator.js?domain=www.fincaraiz.com.co" as="script"><script type="text/javascript" src="https://adservice.google.com/adsid/integrator.js?domain=www.fincaraiz.com.co"></script><link rel="prefetch" href="https://307fe2c1a57a3d32aac0120229d15f3a.safeframe.googlesyndication.com/safeframe/1-0-38/html/container.html"><link rel="prefetch" href="https://tpc.googlesyndication.com/safeframe/1-0-38/html/container.html"><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/tiqapp/utag.v.js?a=schibsted/fincaraiz/202009011416&amp;cb=1618263089808" id="tiqapp"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.89.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_89"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.25.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_25"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.26.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_26"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.42.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_42"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.7.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_7"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.18.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_18"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.70.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_70"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.47.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_47"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.51.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_51"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.55.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_55"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.79.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_79"></script><script src="https://googleads.g.doubleclick.net/pagead/viewthroughconversion/1012702328/?random=1618263090305&amp;cv=9&amp;fst=1618263090305&amp;num=1&amp;guid=ON&amp;resp=GooglemKTybQhCsO&amp;eid=2505059650&amp;u_h=600&amp;u_w=800&amp;u_ah=600&amp;u_aw=800&amp;u_cd=24&amp;u_his=2&amp;u_tz=-300&amp;u_java=false&amp;u_nplug=0&amp;u_nmime=0&amp;sendb=1&amp;ig=1&amp;frm=0&amp;url=https%3A%2F%2Fwww.fincaraiz.com.co%2Fapartamentos%2Farriendo%2Fbogota&amp;tiba=Apartamentos%20en%20Arriendo%20en%20Bogot%C3%A1%2C%20Vivienda%20Nueva%20y%20Usada%20%7C%20Finca%20Ra%C3%ADz&amp;hn=www.googleadservices.com&amp;async=1&amp;rfmt=3&amp;fmt=4"></script></head>
<body id="body" class="generic_section">
    
<script type="text/javascript">
    utag_data = JSON.parse('{"environment":"Prod","page_type":"List","page_type_id":"2","event_name":"List","Info_HTTP_X_FORWARDED_FOR":"186.82.222.74","Info_REMOTE_ADDR":"172.21.1.137","Info_LOCAL_ADDR":"172.21.2.22","Info_X_FORWARDED_FOR":"186.82.222.74","ad_type_id":"2","ad_type":"Arriendo","ad_id":"0","ad_source_id":"0","region_level1":"Cundinamarca","region_level2":"Bogotá","region_level1_id":"67","region_level2_id":"3630001","category_level1":"Apartamento","category_level1_id":"8","action_type":"Navigation","num_bathrooms":"0","results_page":"1","rooms":"0","visit_origin":"Direct","Continent_Code":"SA","Continent_Name":"South America","Country_IsoCode":"CO","Country_Name":"Colombia","Traits_IPAddress":"186.82.222.74","items":[{"id":"6237104","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Chicó Navarra","category":"Apartamento"},{"id":"5330804","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Chapinero Alto","category":"Apartamento"},{"id":"6250131","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Los Rosales","category":"Apartamento"},{"id":"6027884","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Teusaquillo","category":"Apartamento"},{"id":"6248195","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Gran América","category":"Apartamento"},{"id":"6230621","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Florida Blanca","category":"Apartamento"},{"id":"6251107","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Hayuelos","category":"Apartamento"},{"id":"5872681","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Cedritos","category":"Apartamento"},{"id":"6248317","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Parque Central Bavaria","category":"Apartamento"},{"id":"6077178","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá LOS REYES III APTO 203","category":"Apartamento"},{"id":"6251073","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá GARCES NAVAS","category":"Apartamento"},{"id":"6069822","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Cedritos Usaquén","category":"Apartamento"},{"id":"5792716","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá SUBA","category":"Apartamento"},{"id":"6025420","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Los Rosales","category":"Apartamento"},{"id":"6054219","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Santa Lucía","category":"Apartamento"},{"id":"6138902","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá CAMINOS DE IBIZA APTOINT 4","category":"Apartamento"},{"id":"6121533","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Santa Bárbara","category":"Apartamento"},{"id":"6246127","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá PORTAL 181 INT 8 APTO 302","category":"Apartamento"},{"id":"6193352","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Gran Britalia","category":"Apartamento"},{"id":"6251025","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Villas del Dorado","category":"Apartamento"},{"id":"5940710","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá LAS DELICIAS DEL CARMEN","category":"Apartamento"},{"id":"6214662","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Kennedy Central","category":"Apartamento"},{"id":"6224884","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Niza","category":"Apartamento"},{"id":"6245396","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Cedro Golf","category":"Apartamento"},{"id":"6240103","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Las Margaritas","category":"Apartamento"},{"id":"6241322","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Pasadena","category":"Apartamento"},{"id":"6169113","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Bella Suiza","category":"Apartamento"},{"id":"6250991","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Nueva Autopista","category":"Apartamento"},{"id":"6246153","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá LOCAL BARRIO VENECIA DIAGONAL 51 SUR 53 B 38","category":"Apartamento"},{"id":"6250936","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Santa Bárbara Oriental","category":"Apartamento"},{"id":"6250932","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Bosa","category":"Apartamento"},{"id":"6250919","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá La Española","category":"Apartamento"},{"id":"6250929","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Cedritos","category":"Apartamento"},{"id":"6250922","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá San Luis  Patios","category":"Apartamento"}],"num_results":"22187","num_items":"34","sorting":"Other","facility":"Sin Especificar","pagetype":"listing"}');
    var tealiumEnvironment = utag_data.environment.toLowerCase();
    var opengraphObj = [];
    var metaObj = [];
    $('head meta').each(function () {
        var prop = $(this).attr('property');
        var name = $(this).attr('name');
        var httpe = $(this).attr('httpequiv');
        var _http = $(this).attr('http-equiv');
        var content = $(this).attr('content');
        
        if (prop && $(this).attr('property').indexOf('og:') != -1 && name == undefined && httpe == undefined && _http == undefined)
            opengraphObj.push({ property: prop, content: content });
        else if (prop != undefined)
            metaObj.push({ property: prop, content: content });

        if (name && prop == undefined && httpe == undefined && _http == undefined)
            metaObj.push({ property: name, content: content });

        if (httpe && name == undefined && prop == undefined && _http == undefined)
            metaObj.push({ property: httpe, content: content });

        if (_http && name == undefined && prop == undefined && httpe == undefined)
            metaObj.push({ property: _http, content: content });
    });

    if (opengraphObj.length > 0) utag_data.opengraph = opengraphObj;
    if (metaObj.length > 0) utag_data.meta = metaObj;
</script>

<!-- Loading script asynchronously -->
<script type="text/javascript">
    var clientIp;
    $.ajax({
        async: true, type: 'GET', contentType: 'application/json',
        url: 'https://api.ipify.org/?format=json',        
        success: function (data) {
            if (data && data.ip)
                clientIp = data.ip;
        },
        complete: function () { getGeoipInfo(clientIp) }
    });

    function getGeoipInfo(clientIp) {
        var obj_geo;
        if (typeof (Storage) !== "undefined")
            obj_geo = sessionStorage.getItem("ss_geoip_info");

        if (obj_geo)
            setGeoipInfo(JSON.parse(obj_geo));
        else {
            $.ajax({
                async: false, type: 'GET', dataType: 'xml', contentType: "application/x-www-form-urlencoded",
                url: '/WebServices/Utils.asmx/GetGeoipInfo?clientIp=' + clientIp,
                success: function (data) {
                    if (data && data.hasChildNodes()) {
                        var obj = JSON.parse(data.children[0].textContent);
                        setGeoipInfo(obj);
                        if (typeof (Storage) !== "undefined")
                            sessionStorage.setItem("ss_geoip_info", JSON.stringify(obj));
                    }
                }
            });
        }
        loadTealium();
    }
    function setGeoipInfo(obj) {
        if (obj.Continent_Code) utag_data.Continent_Code = obj.Continent_Code;
        if (obj.Continent_Name) utag_data.Continent_Name = obj.Continent_Name;
        if (obj.Country_IsoCode) utag_data.Country_IsoCode = obj.Country_IsoCode;
        if (obj.Country_Name) utag_data.Country_Name = obj.Country_Name;
        if (obj.Traits_Domain) utag_data.Traits_Domain = obj.Traits_Domain;
        if (obj.Traits_IPAddress) utag_data.Traits_IPAddress = obj.Traits_IPAddress;
    }
    function loadTealium() {
        (function (a, b, c, d) {
            a = '//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.js';
            b = document; c = 'script'; d = b.createElement(c); d.src = a; d.type = 'text/java' + c; d.async = true;
            a = b.getElementsByTagName(c)[0]; a.parentNode.insertBefore(d, a);
        })();
    }

    var TealiumEventHandler = function (event, data) {
        var dataTealium = data;
        try 
        {
            if (event.toLowerCase() == "view") {
                utag.view(dataTealium);
                $.each(dataTealium, function (index, value) { utag_data[index] = value; });
            }
            if (event.toLowerCase() == "click") {
                utag.link(dataTealium);
                $.each(dataTealium, function (index, value) { utag_data[index] = value; });
            }
            if (event.toLowerCase() == "hit") {
                utag.track({ event: 'hit', data: dataTealium });
            }
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function trackingView(page, _eventHandler) {
        try {
            var dataTealium = { event_name: page, EventHandler: _eventHandler };

            TealiumEventHandler("view", dataTealium);
        }
        catch (ex) {
        }
        return true;
    }

    function trackingClick(page, _eventHandler) {
        try {
            var dataTealium = {event_name: page, EventHandler: _eventHandler};
            
            TealiumEventHandler("click", dataTealium);
        }
        catch (ex) {
        }
        return true;
    }

    function trackingHit(page, _eventHandler) {
        try {
            if (typeof (page) == 'undefined' || page == null) {
                page = utag_data.event_name;
            }

            var dataTealium = { event_name: page, EventHandler: _eventHandler, environment: utag_data.environment };

            TealiumEventHandler("hit", dataTealium);
        }
        catch (ex) {
        }
        return true;
    }

    function TealiumMessage(message) {
        var dataTealium;
        try {
            dataTealium = {
                EventHandler: 'SpecificTracking',
                event_name: utag_data.page_type,
                error_msg: (utag_data.page_type.sanitize() + "-" + message.removeAccents().replace(/\s/g, '_')), 
                environment: utag_data.environment
            };

            TealiumEventHandler("hit", dataTealium);
        }
        catch (cvex) {
        }
    }

    function TealiumGroupPacks(content) {
        var dataTealium;
        try {
            dataTealium = {
                EventHandler: 'SpecificTracking',
                event_name: utag_data.page_type,
                group_packs: (utag_data.page_type.sanitize() + "-GroupPacks_" + content.removeAccents().replace(/\s/g, '_')),
                environment: utag_data.environment
            };

            TealiumEventHandler("hit", dataTealium);
        }
        catch (cvex) {
        }
    }

    function TealiumClick(nameAttribute, valueAttribute, message) {
        var obj = searchElementTealium(nameAttribute, valueAttribute, message);

        for (var key in obj) {
            if (obj[key] !== null) {
                addClickTealium(obj[key], function () { trackingClick(message, 'SpecificTracking'); });
            }
        }
    }

    var addClickTealium = function (objElement, objFunction) {
        if (objElement.addEventListener) {  // all browsers except IE before version 9
            objElement.addEventListener("click", objFunction, false);
        } else {
            if (objElement.attachEvent) {   // IE before version 9
                objElement.attachEvent("click", objFunction);
            }
        }
    }

    var searchElementTealium = function (nameAttribute, valueAttribute, message) {
        var obj = {};

        switch (nameAttribute.toLowerCase().trim()) {
            case "id":
                var elementCollection = new Array();
                var allElements = document.getElementsByTagName("*");
                for (i = 0; i < allElements.length; i++) {
                    if (allElements[i].id == valueAttribute)
                        obj[valueAttribute + i.toString()] = allElements[i];
                }
                break;
            case "name":
                if (document.getElementsByName(valueAttribute) !== null) {
                    obj[valueAttribute] = document.getElementsByName(valueAttribute);
                }
                break;
            case "class":
                if (document.getElementsByClassName(valueAttribute) !== null) {
                    var allElements = document.getElementsByClassName(valueAttribute);
                    for (i = 0; i < allElements.length; i++) {
                        obj[valueAttribute + i.toString()] = allElements[i];
                    }
                }
                break;
            default:
                var All = document.getElementsByTagName('*');
                var cont = 0;

                for (var i = 0; i < All.length; i++) {
                    if (All[i].getAttribute(nameAttribute) == valueAttribute) {
                        obj[cont] = All[i];
                        cont++;
                    }
                }
                break;
        }

        return obj;
    }

    var TealiumSetConversion = function (tag, idConversion, emailConversion, content_type, content_ids, value, content_name, content_category) {
        //Tags personalizados
        if (typeof (TealiumConversion) !== 'undefined') {
            TealiumConversion(tag, idConversion, emailConversion, content_type, content_ids, value, content_name, content_category);
        }
    }

    var FacebookPixel = function () {
        var content_ids = []
        var id = $("#ctl00_phMasterPage_GroupPacks_hddGroupPack").val();
        if (typeof (id) !== 'undefined' && id !== '') {
            var title = $("#GroupPacks" + id).attr("text");
            var price = $("#Group_" + id + " .price_content h4").html().replace(/\t/g, '').replace(/(\r\n|\n|\r)/g, "").replace("$", '').trim();

            content_ids.push(id)
            TealiumSetConversion('FacebookPixel', null, null, title, content_ids, price);
        }
    }

    var FacebookPixelLead = function (content_name) {
        var content_category = utag_data.ad_type_id + " : " + utag_data.ad_type + " > " + utag_data.category_level1_id + " : " + utag_data.category_level1

        TealiumSetConversion('FacebookPixelLead', null, null, null, null, 1, content_name, content_category);
    }

    var RegisterViewBasket = function ()
    {
        var Product_arrayPrice = []
        var Product_arrayPack = []
        var Product_arrayQuan = []
        $.each($(".checked"), function (key, value) {
            var code = $(value).attr("id").replace('price_', '');
            Product_arrayPrice.push($("#priceValue_" + code).val().replace("$ ",""));
            var pack = $("#packValue_" + code).val();
            Product_arrayPack.push(pack);
            var quan = $("[pack-value*='" + pack + "|']:first").text();
            Product_arrayQuan.push(quan.substring(0, quan.indexOf(" ")));
        });

        utag_data.lst_products_id = Product_arrayPack;
        utag_data.lst_products_price = Product_arrayPrice;
        utag_data.lst_products_quan = Product_arrayQuan;
    }

    var RegisterViewBasket = function () {
        var Product_arrayPrice = []
        var Product_arrayPack = []
        var Product_arrayQuan = []
        $.each($(".checked"), function (key, value) {
            var code = $(value).attr("id").replace('price_', '');
            Product_arrayPrice.push($("#priceValue_" + code).val().replace("$ ", ""));
            var pack = $("#packValue_" + code).val();
            Product_arrayPack.push(pack);
            var quan = $("[pack-value*='" + pack + "|']:first").text();
            Product_arrayQuan.push(quan.substring(0, quan.indexOf(" ")));
        });

        utag_data.lst_products_id = Product_arrayPack;
        utag_data.lst_products_price = Product_arrayPrice;
        utag_data.lst_products_quan = Product_arrayQuan;

        //trackingHit(null, 'SpecificTracking');
    }

    var RegisterViewItem = function (product) {
        var code = product.replace("Check_","");
        utag_data.product_id = $("#packValue_" + code).val();
        trackingHit(null, 'SpecificTracking');
    }
</script>

    <div id="Master_728x90"></div>
    
    <div class="page">
        <!-- TOP PUBLICITY-->
        
    <div id="div-ad-parent" style="overflow: hidden; transition: height 0.25s ease-in 0s; min-width: 100%; height: 90px;" class="parentAdsContainer">
        <div id="div-gpt-ad-1561580143967-0" provider="AdManager" platform="FR_Desktop_Lista_resultados" name="Expandible_Push_Resultados" size="[[970,415], [970,90], [970,70], [728,90]]" isapplysegmentation="true" class="AdvertisingContainer AdsPushdown" data-google-query-id="CI7S-OTT-e8CFXaBWgUdz5AGMw"><div id="google_ads_iframe_/21801155815/FR_Desktop_Lista_resultados/Expandible_Push_Resultados_0__container__" style="border: 0pt none; margin: auto; text-align: center;"><iframe id="google_ads_iframe_/21801155815/FR_Desktop_Lista_resultados/Expandible_Push_Resultados_0" title="3rd party ad content" name="google_ads_iframe_/21801155815/FR_Desktop_Lista_resultados/Expandible_Push_Resultados_0" width="970" height="415" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" srcdoc="" data-google-container-id="1" style="border: 0px; vertical-align: bottom;" data-load-complete="true"></iframe></div></div>
    </div>

        
            <!-- Area de Gestión - Botón publicar inmueble -->
            

<script type="text/javascript">
    var RegisteredClientId = 0;

    function GetValueJson(response, i, length) {
        var responseTmp = response.substring(i + length);
        var lengthVar = responseTmp.indexOf(";");
        var value = responseTmp.substring(0, lengthVar);
        if (value.indexOf("[]") == -1)
            return $.parseJSON(value);
        else
            return [];
    }

    //Inicialiaza los items de favoritos.
    function StartFavoritesAdverts(response) {
        setTimeout(function () {
            if (typeof LaunchFavorites !== "undefined") {
                i = response.indexOf("_favoriteAdverts=[]");
                if (i == -1) {
                    i = response.indexOf("_favoriteAdverts=[");
                    _favoriteAdverts = GetValueJson(response, i, 17);
                }

                if (typeof LoadGridFavorites !== "undefined")
                    LoadGridFavorites(1);
                else
                    LaunchFavorites();
            }
        }, 300);
    }

    function LoadHeaderASync() {
        jQuery.ajax({
            cache: false,
            type: "GET",
            url: "/HeaderV2.ashx?ButtonPublish=True&Management=True&LogoSize=1&SocialMedia=False&ClientId=",
            dataType: "html",
            success: function (response) {
                $("#THV2").empty();
                var node = document.getElementById('HeaderV2');
                if (node != null) {
                    node.parentNode.removeChild(node);
                }
                StartFavoritesAdverts(response);
                $("#THV2").replaceWith(response);
            }
        });
    }

    LoadHeaderASync();
    
</script>



<div id="THV2" class="HeaderContent">
    <div id="HeaderV2" class="Header-PublishButton">
        
        <div class="header header1" itemscope="" itemtype="http://schema.org/WPHeader">
            <div class="fincaraiz-branding">
                <a class="sm-fincaraiz-logo left img_print" href="/">
                    <div class="compound-logo"></div>
                </a>
                <div class="clear">
                </div>
            </div>
        </div>
        
        <div class="header">
            <!-- Area de Gestión - Botón publicar inmueble -->
            <div class="nav no_print">
                <div class="user-area">
                    

<ul class="left link-user">
    <li class="li-user" style="display:none">
        
    </li>
    
            <li class="li-user">
                
                <a href="/client/Client.aspx" class="vinculo" title="Gestión personal">Regístrate <i style="display:none" class="fa fa-sort-down"></i></a>
                
            </li>
        
            <li class="li-user">
                <img src="/App_Theme/images/user-shape.png" style="margin: -1pt;" width="auto" height="auto">
                <a href="/client/Client.aspx" class="vinculo" title="Gestión personal">Ingresa <i style="display:none" class="fa fa-sort-down"></i></a>
                
            </li>
        
</ul>



                </div>
            </div>
        </div>
        
        <div class="PublishButton">
            <a id="btnPriceAlert" class="button_resaltadoProm" onclick="return trackingClick(utag_data.event_name + ' - Boton Publicar','SpecificTracking')" href="/anuncios-clasificados-gratis-publicar-inmueble.aspx" title="Publique su inmueble">Publica GRATIS* en 1 paso
            </a>
        </div>
        
    </div>
</div>


        
        <!--MASTER CONTENT-->
        <div class="MasterPageContent">
            
    <form name="aspnetForm" method="post" action="./bogota" id="aspnetForm" autocomplete="off">
<div>
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUKMTAwNDAxMTEwN2RkemO2eixE72pg1wwX/ol9ge+Phi0=">
</div>

<div>

	<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="63301E89">
</div>
        
<script src="https://www.google.com/recaptcha/api.js" async="" defer=""></script>
<script type="text/javascript">
    var recaptchasitekey = "6Lc9_RUTAAAAAEk2cOguGou6KkxtddYpK4qeKuTr";
</script>
<div id="LoginRegisterPanel" class="RegisterControlContent">
    <div style="display: none">
        

<script type="text/javascript">
    var OpenWindowFacebook = function (_url, name, w, h) {
        var left = parseInt((screen.width / 2) - (w / 2));
        var top = parseInt((screen.height / 2) - (h / 2) - 100);
        var _params = "toolbar=no, location=no, modal=yes, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=" + w + ", height=" + h + ', top=' + top + ', left=' + left;
        window.open(_url, name, _params);
    }
    var functionClickFacebook = function () {
        OnClientClickFacebook();

        window.location.href = 'https://www.facebook.com/dialog/oauth?client_id=278151412365412&redirect_uri=https://www.fincaraiz.com.co/apartamentos/arriendo/bogota?nw=fb&display=popup&scope=email'; 

    }

    var OnClientClickFacebook = function(){
        
    }
</script>

<div id="btnFacebookLogin" class="login_fb">

    <a class="btn-social btn-facebook" onclick="functionClickFacebook();" id="lnkLoginFacebook">
        <div class="btn-social-content">
            <div class="facebook-icon btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="18" height="18.001" viewBox="0 0 18 18.001"><defs><clipPath id="a"><rect width="18" height="18" transform="translate(0.4)" fill="none"></rect></clipPath></defs><g transform="translate(-0.4)"><g clip-path="url(#a)"><path d="M2338.094,1331.04a9,9,0,1,0-10.407,8.892v-6.29H2325.4v-2.6h2.286v-1.983a3.176,3.176,0,0,1,3.4-3.5,13.834,13.834,0,0,1,2.015.176v2.215h-1.135a1.3,1.3,0,0,0-1.467,1.406v1.688h2.5l-.4,2.6h-2.1v6.29a9,9,0,0,0,7.595-8.892Z" transform="translate(-2319.632 -1322.04)" fill="#1877f2"></path></g><path d="M2332.6,1333.642l.4-2.6h-2.5v-1.688a1.3,1.3,0,0,1,1.467-1.406h1.135v-2.215a13.834,13.834,0,0,0-2.015-.176,3.176,3.176,0,0,0-3.4,3.5v1.983H2325.4v2.6h2.286v6.29a9.122,9.122,0,0,0,2.812,0v-6.29Z" transform="translate(-2319.632 -1322.04)" fill="#fff"></path></g></svg>
            </div>
            <div id="textoBtnFacebook" class="btn-label">
                Acceder con Facebook
            </div>
        </div>
    </a>
    <div id="ctl00_phMasterPage_LoginRegister_facebookLogin_statusFB" class="errorFB"></div>
    <input type="hidden" name="ctl00$phMasterPage$LoginRegister$facebookLogin$hddTokenFB" id="ctl00_phMasterPage_LoginRegister_facebookLogin_hddTokenFB">
</div>
        
<script type="text/javascript">
    var OpenWindowGmail = function (_url, name, w, h) {
        var left = parseInt((screen.width / 2) - (w / 2));
        var top = parseInt((screen.height / 2) - (h / 2) - 100);
        var _params = "toolbar=no, location=no, modal=yes, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=" + w + ", height=" + h + ', top=' + top + ', left=' + left;
        window.open(_url, name, _params);
    }

    var functionClickGmail = function () {
        
                window.location.href = 'https://accounts.google.com/o/oauth2/v2/auth?scope=openid%20profile%20email&include_granted_scopes=true&redirect_uri=https://www.fincaraiz.com.co/apartamentos/arriendo/bogota?nw=gm&response_type=code&client_id=751564689013-5mmokt7kti1qneh99thbrpk9lqo9hmd8.apps.googleusercontent.com';                
        
    }

</script>

<div id="btnGmailLogin" class="login_fb">

    <a class="btn-social btn-google" onclick="functionClickGmail();" id="lnkLoginGmail">
        <div class="btn-social-content">
            <div class="google-icon btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"><path d="M17.64,9.2a10.347,10.347,0,0,0-.164-1.841H9v3.481h4.844a4.14,4.14,0,0,1-1.8,2.716v2.258h2.909A8.777,8.777,0,0,0,17.64,9.2Z" fill="#4285f4" fill-rule="evenodd"></path><path d="M9,18a8.592,8.592,0,0,0,5.956-2.181l-2.909-2.258A5.43,5.43,0,0,1,3.964,10.71H.957v2.332A9,9,0,0,0,9,18Z" fill="#34a853" fill-rule="evenodd"></path><path d="M3.964,10.71a5.321,5.321,0,0,1,0-3.42V4.958H.957a9.011,9.011,0,0,0,0,8.084L3.964,10.71Z" fill="#fbbc05" fill-rule="evenodd"></path><path d="M9,3.58a4.862,4.862,0,0,1,3.441,1.346l2.581-2.581A8.649,8.649,0,0,0,9,0,9,9,0,0,0,.957,4.958L3.964,7.29A5.364,5.364,0,0,1,9,3.58Z" fill="#ea4335" fill-rule="evenodd"></path><path d="M0,0H18V18H0Z" fill="rgba(0,0,0,0)" fill-rule="evenodd"></path></svg>
            </div>
            <div id="textoBtnGmail" class="btn-label">
                Acceder con Google
            </div>
        </div>
    </a>
    <div id="ctl00_phMasterPage_LoginRegister_gmailLogin_statusFB" class="errorFB"></div>
    <input type="hidden" name="ctl00$phMasterPage$LoginRegister$gmailLogin$hddTokenFB" id="ctl00_phMasterPage_LoginRegister_gmailLogin_hddTokenFB">
</div>
        
<script type="text/javascript">
    var OpenWindowApple = function (_url, name, w, h) {
        var left = parseInt((screen.width / 2) - (w / 2));
        var top = parseInt((screen.height / 2) - (h / 2) - 100);
        var _params = "toolbar=no, location=no, modal=yes, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=" + w + ", height=" + h + ', top=' + top + ', left=' + left;
        window.open(_url, name, _params);
    }

    var functionClickApple = function () {
        
                window.location.href = 'https://appleid.apple.com/auth/authorize?scope=name%20email&client_id=web.co.com.fincaProd&redirect_uri=https://www.fincaraiz.com.co/apartamentos/arriendo/bogota&state=1uaXZYzIFkSyg7TedeIg&response_type=code&response_mode=form_post&approval_prompt=auto';                
        
    }

</script>

<div id="btnAppleLogin" class="login_fb">

    <a class="btn-social btn-apple" onclick="functionClickApple();" id="lnkLoginApple">
        <div class="btn-social-content">
            <div class="apple-icon btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 7.39 9.09"><defs><style>.cls-1{fill:#707070;}</style></defs><g id="Capa_2" data-name="Capa 2"><g id="Capa_1-2" data-name="Capa 1"><path class="cls-1" d="M7.15,3.1a2.05,2.05,0,0,0-1,1.73A2,2,0,0,0,7.39,6.67,5.12,5.12,0,0,1,6.77,8c-.39.55-.8,1.12-1.41,1.12s-.78-.37-1.49-.37-1,.38-1.51.38S1.4,8.57,1,7.93a5.54,5.54,0,0,1-.95-3,2.43,2.43,0,0,1,2.28-2.7c.6,0,1.1.39,1.48.39s.91-.41,1.6-.41A2.12,2.12,0,0,1,7.15,3.1ZM3.8,2.1H3.68a.65.65,0,0,1,0-.17A2,2,0,0,1,4.16.69,2,2,0,0,1,5.5,0a1,1,0,0,1,0,.18A2.05,2.05,0,0,1,5,1.45,1.77,1.77,0,0,1,3.8,2.1Z"></path></g></g></svg>
            </div>
            <div id="textoBtnApple" class="btn-label">
                Acceder con Apple
            </div>

        </div>
    </a>
    <div id="ctl00_phMasterPage_LoginRegister_appleLogin_statusFB" class="errorFB"></div>
    <input type="hidden" name="ctl00$phMasterPage$LoginRegister$appleLogin$hddTokenFB" id="ctl00_phMasterPage_LoginRegister_appleLogin_hddTokenFB">
</div>
    </div>
</div>

<script type="text/javascript">
    //Variables del proceso
    var advertId = '';
    var vurl = '';
    var contractType = 'Particular_Comprador';
    var registerUserToken = "AF215EBA85EFBC37F03DEDA672D6DA11B05E1FD9F0889B101BCD8B2210307B488EBD8871A942E40E";
    var rclWidgetId = "";
    var dataUserRegister;

    function LoginFB(resp) {
        var data = ReadCookieNotEncrip("LoginFacebookFlag");
        if (data.length > 0) {
            var obj = $.parseJSON(data)
            _favoriteAdverts = [];
            var advertId = obj.AdvertId;
            var isAdd = obj.isAdd;
            FavoriteAdvert_Event(isAdd, advertId, function () {
                LoadHeaderASync();
                HideLoginRegisterPopup();
                CreateCookie("LoginFacebookFlag", "", 1, false);
            });
        }
    }

    function LoginGM(resp) {
        var data = ReadCookieNotEncrip("LoginGmailFlag");
        if (data.length > 0) {
            var obj = $.parseJSON(data)
            _favoriteAdverts = [];
            var advertId = obj.AdvertId;
            var isAdd = obj.isAdd;
            FavoriteAdvert_Event(isAdd, advertId, function () {
                LoadHeaderASync();
                HideLoginRegisterPopup();
                CreateCookie("LoginGmailFlag", "", 1, false);
            });
        }
    }

    function userNotRegister(message, resp, isFavorite = false) {
        alert(message);

        if (isFavorite)
            $('#btnCambio').click()
               
        dataUserRegister = jQuery.parseJSON(resp);
    } 


    function llenarCamposRegistro() {
        $("#txtEmailRegister").val(dataUserRegister.email);
        $("#txtNameRegister").val(dataUserRegister.first_name);
        $("#txtSurNameRegister").val(dataUserRegister.last_name);
        $("#txtPhoneRegister").val(dataUserRegister.phone);
        $("#txtRegistrationOriginID").val(dataUserRegister.idorigin);
        $("#txtPwsRegister").val(dataUserRegister.password);

        //$("#txtEmailRegister").attr("disabled", true);
       // $("#txtNameRegister").attr("disabled", true);
       // $("#txtSurNameRegister").attr("disabled", true);
        $("#divEmailConfirmRegister").hide();
        $("#divPasswordRegister").hide();
    }

 function LoginAP(resp) {
        var data = ReadCookieNotEncrip("LoginAppleFlag");
        if (data.length > 0) {
            var obj = $.parseJSON(data)
            _favoriteAdverts = [];
            var advertId = obj.AdvertId;
            var isAdd = obj.isAdd;
            FavoriteAdvert_Event(isAdd, advertId, function () {
                LoadHeaderASync();
                HideLoginRegisterPopup();
                CreateCookie("LoginAppleFlag", "", 1, false);
            });
        }
    }
    function CancelFB(message) {       
        alert(message);
    }

    function CancelGM(message) {
        alert(message);
    }

    function CancelAP(message) {
        alert(message);
    }

    function LoadLoginRegisterByMode(mode, configuration) {
        if (configuration != null) {
            var urlBase = "/App_Modules/Client/LoginRegisterV2.ashx?mode=" + mode;
            if (mode != "6" || mode != "7")
                urlBase = urlBase + "&Redirect=" + window.location.protocol + '//' + window.location.host + window.location.pathname;

            //Consulta la estructura html dependiendo del modo.
            jQuery.ajax({
                cache: false,
                type: "GET",
                url: urlBase,
                dataType: "html",
                success: function (response) {
                    if (mode != "6" && mode != "7" && mode != "8" && mode != "9") {
                        //Asigna la configuracion especifica al llamado actual
                        CustomerConfiguration = configuration;

                        //Limpia si existe una renderizacion previa.
                        ClearLoginRegisterRender();

                        //Obtiene el html que se visualizara
                        var html = LoginRegisterRender(configuration, response);

                        //Asigna el popup de ser necesario
                        if (configuration.Popup) {
                            LaunchLoginRegisterPopup(configuration, html);
                        }
                        else {
                            //Coloca el html en el panel por defecto
                            $("#LoginRegisterPanel").append(html);
                        }

                        //Cosas por defecto que se deban realizar
                        Initialsteps();

                        //Si tiene un evento para personalizar antes de iniciar.
                        if (typeof configuration.InitEvent == "function") {
                            configuration.InitEvent();
                        }

                        //Asigna los eventos y validaciones a las etiquetas generadas.
                        SetLoginRegisterEvent(mode);

                        if (typeof (window.PromoterManager) != "undefined" && typeof (window.PromoterManager.ShowModal) != "undefined") {                 
                            $(".overlay, #popup_ok, #skipRegister").bind("click", function () {                
                                window.PromoterManager.ShowModal();
                            });
                        }
                        //usuario logueado con exito pero no registrado
                        if (dataUserRegister)
                            llenarCamposRegistro();
                    }
                    else {
                        if (mode == "6")
                            window.location.href = response;
                        else if (mode == "7") {
                            OpenWindowFacebook(response, 'LoginFacebook', 500, 250)
                        }
                        else if (mode == "8") {
                            OpenWindowGmail(response, 'LoginGmail', 500, 560)
                        }
                        else if (mode == "9") {
                            OpenWindowApple(response, 'LoginApple', 648, 663)
                        }
                    }
                }
            });
        }
        else {
            alert("debe asignar una configuración el control");
        }
    }

</script>


        <div class="page-content" itemscope="" itemtype="http://schema.org/SearchResultsPage">
            <div class="Filter-Container">
                <div id="grid_results" class="grid_results">
                    <script type="text/javascript">
                        //si es por ajax, ocultamos la parrilla
                        var semantic = window.location.hash.replace("#", "");
                        if (semantic.indexOf("ad=") == 0) {
                            $("#grid_results").hide();
                        }
                        $(document).ready(
                            function () {
                                var textNoResults = '';

                                if (textNoResults != '') {
                                    if ('22187' == 0) {
                                        $("#AjaxNoAdverts").html("Hoy no tenemos inmuebles que coincidan con su búsqueda de: <b>" + textNoResults + "</b>. Consulte nuestro listado para encontrar más inmuebles: <a href='/todos/venta/colombia/index.aspx?ad=30|1||||1||||||||||||||||||||||||||||||'>Anuncios de Finca Raíz en Colombia</a>");
                                        $("#AjaxNoAdverts").show();
                                    }
                                    else
                                    {
                                        $("#AjaxNoAdverts").html(htmlNoAdverts.replace("{fulltitle}", textNoResults));
                                        $("#AjaxNoAdverts").show();
                                    }
                                }
                            }
                        );
                        var pulseObjectTypeText = 'ClassifiedAd';
                    </script>
                    <!--este div lo utilizamos cuando las consultas se hacen por ajax -->
                    <div id="AjaxNoAdverts" class="noAdverts" style="display: none"></div>
                </div>
                <div class="ResultsTitle">
                    <h5>INMUEBLES COMERCIALES</h5>
                </div>
                <div class="box_top_Galery" style="display: none !important;">
                    <!-- fotogalería -->
                    <div id="divPhotoGallery" class="GalleryContent"></div>
                </div>
                <div id="divBreadcrumbResults" class="breadcrumb">
                    
<div>
    <ul class="fa-ul">
         
                <li>
                    <a href="/">Inicio</a>
                   
                </li>          
                 <i class="fa fa-angle-right" style="margin:0px 0px; font-size: 12px;"></i>      
             
                <li>
                    <a href="/apartamentos/arriendo/cundinamarca/">Cundinamarca</a>
                   
                </li>          
                 <i class="fa fa-angle-right" style="margin:0px 0px; font-size: 12px;"></i>      
                
        <li>
            <a>Bogotá</a>
        </li>
    </ul>
</div>

                </div>
                <!-- título y botón publicar-->
                <h1 class="result_title" itemprop="headline">
                    <span id="lblNumInm">22,187&nbsp;</span><span id="lblResultTop">Apartamentos  en Arriendo en Bogotá</span>
                </h1>
                <!--Links de Barrios-->
                <div id="divLinkNeighborhoodsCtrl" class="neighbords">
                    
 

  <div id="divNeighborhoodLinks">
  <div id="ctl00_phMasterPage_NeighborhoodLinks1_divNeighborhoodBox">
   <div class="box-content" style="padding:6px">   
   
   <div style="color:Gray;font-size:10px" itemprop="significantLinks"> Barrios Sugeridos:    
  
     
       
      
        <a href="/apartamentos/arriendo/ciudad-montes/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Ciudad Montes - Bogotá">Ciudad Montes </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/la-riviera/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en La Riviera - Bogotá">La Riviera </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/carimagua/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Carimagua - Bogotá">Carimagua </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/chico-norte-iii/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Chico Norte Iii - Bogotá">Chico Norte Iii </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/colina-campestre-i-y-ii-etapa/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Colina Campestre I Y Ii Etapa - Bogotá">Colina Campestre I Y Ii Etapa </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/los-cerezos/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Los Cerezos - Bogotá">Los Cerezos </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/garces-navas/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Garces Navas - Bogotá">Garces Navas </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/los-sauces/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Los Sauces - Bogotá">Los Sauces </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/nueva-marsella/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Nueva Marsella - Bogotá">Nueva Marsella </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/suba-las-mercedes/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Suba Las Mercedes - Bogotá">Suba Las Mercedes </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/suba-centro/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Suba Centro - Bogotá">Suba Centro </a>&nbsp;
    
        
   
     <div class="clear"></div>
   </div>
   </div>
  </div>
</div>


                </div>
                <!-- breadcrumb localizaciones-->
                <div class="box_top">
                    <div id="gridLocations" class="LocationsContent">
                        
<div id="LocationsBreadcrumbFilters" autocomplete="off">
    <div class="navbar-form" id="olBCFilters" style="position: relative; float: left;">
        
                
                <div class="form-group" style="float: left; width: 219px; margin-left: -1px;">
                    <div class="form-control">
                        <div class="dropdown-check-list">
                            <div class="anchor" onclick="OpenItemOptionsLocations(this);">
                                <a href="/apartamentos/arriendo/cundinamarca/" onclick="return false;">Cundinamarca</a>
                            </div>
                            <div class="ContentCollapse">
                                <div class="drop">
                                    <ul class="items">
                                        <div class="scrollable">
                                            
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cundinamarca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" checked="" binding="Location1Id" value="67" parentlevel="0" locationname="Cundinamarca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cundinamarca/">Cundinamarca</a>
                                                        <span class="gray">(23553)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Antioquia" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="55" parentlevel="0" locationname="Antioquia" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/antioquia/">Antioquia</a>
                                                        <span class="gray">(19891)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Atlántico" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="57" parentlevel="0" locationname="Atlántico" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/atlantico/">Atlántico</a>
                                                        <span class="gray">(5489)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Santander" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="75" parentlevel="0" locationname="Santander" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/santander/">Santander</a>
                                                        <span class="gray">(4395)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Valle del Cauca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="82" parentlevel="0" locationname="Valle del Cauca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/alquiler/valle-del-cauca/">Valle del Cauca</a>
                                                        <span class="gray">(3666)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Bolívar" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="58" parentlevel="0" locationname="Bolívar" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/bolivar/">Bolívar</a>
                                                        <span class="gray">(2505)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Caldas" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="60" parentlevel="0" locationname="Caldas" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/caldas/">Caldas</a>
                                                        <span class="gray">(1551)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Risaralda" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="78" parentlevel="0" locationname="Risaralda" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/risaralda/">Risaralda</a>
                                                        <span class="gray">(1068)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Córdoba" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="66" parentlevel="0" locationname="Córdoba" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cordoba/">Córdoba</a>
                                                        <span class="gray">(853)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Magdalena" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="72" parentlevel="0" locationname="Magdalena" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/magdalena/">Magdalena</a>
                                                        <span class="gray">(464)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Tolima" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="81" parentlevel="0" locationname="Tolima" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/tolima/">Tolima</a>
                                                        <span class="gray">(353)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Norte Santander" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="85" parentlevel="0" locationname="Norte Santander" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/norte-santander/">Norte Santander</a>
                                                        <span class="gray">(324)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Quindío" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="77" parentlevel="0" locationname="Quindío" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/quindio/">Quindío</a>
                                                        <span class="gray">(288)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Nariño" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="74" parentlevel="0" locationname="Nariño" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/nariño/">Nariño</a>
                                                        <span class="gray">(237)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Boyacá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="59" parentlevel="0" locationname="Boyacá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/boyaca/">Boyacá</a>
                                                        <span class="gray">(202)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Meta" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="73" parentlevel="0" locationname="Meta" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/meta/">Meta</a>
                                                        <span class="gray">(162)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cesar" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="64" parentlevel="0" locationname="Cesar" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cesar/">Cesar</a>
                                                        <span class="gray">(96)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Huila" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="70" parentlevel="0" locationname="Huila" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/huila/">Huila</a>
                                                        <span class="gray">(85)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cauca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="63" parentlevel="0" locationname="Cauca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cauca/">Cauca</a>
                                                        <span class="gray">(51)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en San Andres y Providencia" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="79" parentlevel="0" locationname="San Andres y Providencia" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/san-andres-y-providencia/">San Andres y Providencia</a>
                                                        <span class="gray">(9)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Sucre" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="80" parentlevel="0" locationname="Sucre" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sucre/">Sucre</a>
                                                        <span class="gray">(8)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Casanare" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="62" parentlevel="0" locationname="Casanare" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/casanare/">Casanare</a>
                                                        <span class="gray">(5)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Chocó" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="65" parentlevel="0" locationname="Chocó" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/choco/">Chocó</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La guajira" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="71" parentlevel="0" locationname="La guajira" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-guajira/">La guajira</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Caquetá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="61" parentlevel="0" locationname="Caquetá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/caqueta/">Caquetá</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Putumayo" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="76" parentlevel="0" locationname="Putumayo" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/putumayo/">Putumayo</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                        </div>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
                
                <div class="form-group" style="float: left; width: 219px; margin-left: -1px;">
                    <div class="form-control">
                        <div class="dropdown-check-list">
                            <div class="anchor" onclick="OpenItemOptionsLocations(this);">
                                <a href="/apartamentos/arriendo/bogota/" onclick="return false;">Bogotá</a>
                            </div>
                            <div class="ContentCollapse">
                                <div class="drop">
                                    <ul class="items">
                                        <div class="scrollable">
                                            
                                                    
                                                    <li title="Apartamentos  en Arriendo en Bogotá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" checked="" binding="Location2Id" value="3630001" parentlevel="67" locationname="Bogotá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/bogota/">Bogotá</a>
                                                        <span class="gray">(22187)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Chía" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700003" parentlevel="67" locationname="Chía" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/chia/">Chía</a>
                                                        <span class="gray">(219)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Soacha" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700004" parentlevel="67" locationname="Soacha" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/soacha/">Soacha</a>
                                                        <span class="gray">(217)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Madrid" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700012" parentlevel="67" locationname="Madrid" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/madrid/">Madrid</a>
                                                        <span class="gray">(178)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Mosquera" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700002" parentlevel="67" locationname="Mosquera" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/mosquera/">Mosquera</a>
                                                        <span class="gray">(145)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cajicá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700009" parentlevel="67" locationname="Cajicá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cajica/">Cajicá</a>
                                                        <span class="gray">(118)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zipaquirá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700021" parentlevel="67" locationname="Zipaquirá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/zipaquira/">Zipaquirá</a>
                                                        <span class="gray">(108)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Ricaurte" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700029" parentlevel="67" locationname="Ricaurte" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/ricaurte/">Ricaurte</a>
                                                        <span class="gray">(84)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Tocancipá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700025" parentlevel="67" locationname="Tocancipá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/tocancipa/">Tocancipá</a>
                                                        <span class="gray">(48)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Girardot" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700001" parentlevel="67" locationname="Girardot" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/girardot/">Girardot</a>
                                                        <span class="gray">(40)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Fusagasugá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700016" parentlevel="67" locationname="Fusagasugá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/fusagasuga/">Fusagasugá</a>
                                                        <span class="gray">(35)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Facatativa" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700006" parentlevel="67" locationname="Facatativa" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/facatativa/">Facatativa</a>
                                                        <span class="gray">(31)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Funza" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700008" parentlevel="67" locationname="Funza" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/funza/">Funza</a>
                                                        <span class="gray">(31)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Otros Municipios" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700011" parentlevel="67" locationname="Otros Municipios" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/otros-municipios/cundinamarca/">Otros Municipios</a>
                                                        <span class="gray">(26)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Sopó" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700022" parentlevel="67" locationname="Sopó" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sopo/">Sopó</a>
                                                        <span class="gray">(21)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La Calera" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700017" parentlevel="67" locationname="La Calera" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-calera/">La Calera</a>
                                                        <span class="gray">(16)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Anapoima" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700014" parentlevel="67" locationname="Anapoima" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/anapoima/">Anapoima</a>
                                                        <span class="gray">(13)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cota" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700015" parentlevel="67" locationname="Cota" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cota/">Cota</a>
                                                        <span class="gray">(7)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La Mesa" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700018" parentlevel="67" locationname="La Mesa" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-mesa/">La Mesa</a>
                                                        <span class="gray">(4)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en El Rosal" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700042" parentlevel="67" locationname="El Rosal" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/el-rosal/">El Rosal</a>
                                                        <span class="gray">(4)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Villeta" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700020" parentlevel="67" locationname="Villeta" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/villeta/">Villeta</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La Vega" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700024" parentlevel="67" locationname="La Vega" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-vega/">La Vega</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Gachancipá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700026" parentlevel="67" locationname="Gachancipá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/gachancipa/">Gachancipá</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Tenjo" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700027" parentlevel="67" locationname="Tenjo" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/tenjo/">Tenjo</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Silvania" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700038" parentlevel="67" locationname="Silvania" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/silvania/">Silvania</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Bojacá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700013" parentlevel="67" locationname="Bojacá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/bojaca/">Bojacá</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Ubate" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700019" parentlevel="67" locationname="Ubate" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/ubate/">Ubate</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Tocaima" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700023" parentlevel="67" locationname="Tocaima" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/tocaima/">Tocaima</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en El Colegio" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700028" parentlevel="67" locationname="El Colegio" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/el-colegio/">El Colegio</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Guasca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700030" parentlevel="67" locationname="Guasca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/guasca/">Guasca</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Chocontá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700032" parentlevel="67" locationname="Chocontá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/choconta/">Chocontá</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Sesquilé" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700035" parentlevel="67" locationname="Sesquilé" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sesquile/">Sesquilé</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Puerto Salgar" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700040" parentlevel="67" locationname="Puerto Salgar" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/puerto-salgar/">Puerto Salgar</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Agua de Dios" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="8500104" parentlevel="67" locationname="Agua de Dios" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/agua-de-dios/">Agua de Dios</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                        </div>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
                
                <div class="form-group" style="float: left; width: 219px; margin-left: -1px;">
                    <div class="form-control">
                        <div class="dropdown-check-list">
                            <div class="anchor" onclick="OpenItemOptionsLocations(this);">
                                <a href="/apartamentos/arriendo/bogota/" onclick="return false;">Seleccione Zona</a>
                            </div>
                            <div class="ContentCollapse">
                                <div class="drop">
                                    <ul class="items">
                                        <div class="scrollable">
                                            
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Norte" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630101" parentlevel="3630001" locationname="Zona Norte" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/norte/bogota/">Zona Norte</a>
                                                        <span class="gray">(8500)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Noroccidente" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630102" parentlevel="3630001" locationname="Zona Noroccidente" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/noroccidente/bogota/">Zona Noroccidente</a>
                                                        <span class="gray">(3559)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Occidente" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630104" parentlevel="3630001" locationname="Zona Occidente" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/occidente/bogota/">Zona Occidente</a>
                                                        <span class="gray">(3317)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Chapinero" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630103" parentlevel="3630001" locationname="Zona Chapinero" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/chapinero/bogota/">Zona Chapinero</a>
                                                        <span class="gray">(3286)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Centro" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630105" parentlevel="3630001" locationname="Zona Centro" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/centro/bogota/">Zona Centro</a>
                                                        <span class="gray">(1338)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Sur" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630106" parentlevel="3630001" locationname="Zona Sur" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sur/bogota/">Zona Sur</a>
                                                        <span class="gray">(1335)</span>
                                                    </li>
                                                
                                        </div>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
        <div id="ctl00_phMasterPage_LocationsBreadcrumb_NbhoodSearch" class="form-group" style="float: left; width: 219px; margin-left: -1px; position: relative;">
            <input id="txtNbhood" list="list_donde" type="text" placeholder="Digita un barrio" class="form-control" value="" binding="Neighborhood" autocomplete="off" onclick="if ($(this).val() == '') { $(this).css('color', '#000'); } else { this.select(); };" onblur="if($(this).val()==''){;$(this).css('color','rgb(21, 36, 93)');};">
            <span id="btnClearNbhood" style="float: left; margin-left: -1px; position: absolute; top: 3px; right: -4px; display: none;"><i class="fa close" onclick="CleanNbhood(true)"></i></span>
        </div>
        <div id="BtnSearchBreadcrumb" onclick="SearchByButtom()" class="btn-search" style="cursor: pointer;"><i class="fa fa-search"></i>Buscar</div>
    </div>
</div>
<script type="text/javascript">
    LoadBreadcrumbFilterEvents();
    $(document).ready(function () {
        if (!(typeof AjaxEnabled !== "undefined" && AjaxEnabled)) {
            var ctrl = $("#olBCFilters");
            ctrl.addClass("NoAjax");
            ctrl.removeClass("Ajax");
        }

        //evento keyUp sobre txtNbhood
        //al presionar Enter, lanza la busqueda
        $("#txtNbhood").keyup(function (event) {
            var Value = $(this).val();
            //si presiona la tecla enter
            BtnClearWard(Value);

            if (event.keyCode == 13) {
                FindAdvertNbhood();
            }
        });

        BtnClearWard($("#txtNbhood").val());
    });
    //function SetNbhoodDefault() {
    //    var ctrl = $("#txtNbhood");
    //    ctrl.val(ctrl.attr("default")).css('color', 'rgb(21, 36, 93)');
    //}
    function ToggleCheckFromAnchor(item, event) {
        trackingAlreadyCalled = false;
        if (typeof AjaxEnabled !== "undefined" && AjaxEnabled) {
            var chks = (($(item).is('a') == true) ? $(item).parent().find("input[type='checkbox']") : $(item).find("input[type='checkbox']"));
            if (chks.length > 0) {
                var chk = $(chks[0]);
                if ($(event.target).is('input') == false) {
                    chk.attr('checked', !chk.attr('checked'));
                }
                chk.attr("changed", "true");
            }
            CleanNbhood(false);
            var CtrlParent = $(item).closest('.dropdown-check-list');
            if ($(CtrlParent).length > 0 && $(CtrlParent).find('input[type="checkbox"][binding="Location3Id"]').length > 0) {
                ChangeTextSelection(CtrlParent, 'input[type="checkbox"][binding="Location3Id"]:checked');
            }
            var ReturnValue = ($(event.target).is('a') == true) ? false : true;
            if (QuebeFindCall != undefined) { QuebeFindBreadCrumbCall(item, 1000); }
            return ReturnValue;
        }
        else {
            return true;
        }
    }

    function ChangeTextSelection(item, SelectorChilds) {
        var SelectedItems = $(item).find(SelectorChilds);
        var Textanchor = (($(SelectedItems).length == 1) ? $(SelectedItems[0]).attr('locationname') : (($(SelectedItems).length > 1) ? $(SelectedItems[0]).attr('locationname') + ", " + $(SelectedItems[1]).attr('locationname') : "Seleccione Zona"));
        $(item).find('.anchor').find('a').text(Textanchor);
    }

    function CleanNbhood(ExecuteSearch) {
        $("#txtNbhood").val('');
        $("#btnClearNbhood").css("display", "none");
        if (ExecuteSearch == true) { FindAdvertNbhood(); }
    }

    function FindAdvertNbhood() {
        var txtNbh = $("#txtNbhood");
        if (txtNbh.val() != "") {
            sfFind.Neighborhood = ValidIlegalCharacters(txtNbh.val());
            trackingClick("Results - Buscar por Barrio", "SpecificTracking");
        }
        else {
            sfFind.Neighborhood = "";
        }
        trackingAlreadyCalled = false;
        window.vmResults.FindAdvertsFacet('');
    }

    function BtnClearWard(MyValue) {
        if (MyValue == undefined || MyValue == "" || MyValue.length <= 0) {
            $("#btnClearNbhood").css("display", "none");
        }
        else {
            if ($("#btnClearNbhood").css("display") == "none") { $("#btnClearNbhood").css("display", "block"); }
        }
    }
</script>

                    </div>
                </div>
                <!-- paginador -->
                
            </div>
            <!--content-->
            <!--div mail tipos parrilla y paginado-->
            <div class="Grid" data-sticky-container="">
                
                <!--div filtros y pestañas -->
                <div>
                    <!--filtros-->
                    
<script type="text/javascript">
    var listTransactionTypes = [{ "optionValue": 1, "optionDisplay": "Venta" },{ "optionValue": 1, "optionDisplay": "Proyectos Nuevos" },{ "optionValue": 2, "optionDisplay": "Arriendo" },{ "optionValue": 3, "optionDisplay": "Alquiler Vacacional" }];
    var listTransactionSaleMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 20000000, "optionDisplay": "20 Millones" },{ "optionValue": 40000000, "optionDisplay": "40 Millones" },{ "optionValue": 60000000, "optionDisplay": "60 Millones" },{ "optionValue": 80000000, "optionDisplay": "80 Millones" },{ "optionValue": 100000000, "optionDisplay": "100 Millones" },{ "optionValue": 140000000, "optionDisplay": "140 Millones" },{ "optionValue": 200000000, "optionDisplay": "200 Millones" },{ "optionValue": 260000000, "optionDisplay": "260 Millones" },{ "optionValue": 300000000, "optionDisplay": "300 Millones" },{ "optionValue": 500000000, "optionDisplay": "500 Millones" }];
    var listTransactionSaleMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 20000000, "optionDisplay": "20 Millones" },{ "optionValue": 40000000, "optionDisplay": "40 Millones" },{ "optionValue": 60000000, "optionDisplay": "60 Millones" },{ "optionValue": 80000000, "optionDisplay": "80 Millones" },{ "optionValue": 100000000, "optionDisplay": "100 Millones" },{ "optionValue": 140000000, "optionDisplay": "140 Millones" },{ "optionValue": 200000000, "optionDisplay": "200 Millones" },{ "optionValue": 260000000, "optionDisplay": "260 Millones" },{ "optionValue": 300000000, "optionDisplay": "300 Millones" },{ "optionValue": 500000000, "optionDisplay": "500 Millones" },{ "optionValue": -1, "optionDisplay": "+500 Millones" }];
    var listTransactionRentMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var listTransactionRentMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 1500000, "optionDisplay": "1.5 Millones" },{ "optionValue": 2000000, "optionDisplay": "2 Millones" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 3000000, "optionDisplay": "3 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" },{ "optionValue": -1, "optionDisplay": "+4 Millones" }];
    var listTransactionVacationMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var listTransactionVacationMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 1500000, "optionDisplay": "1.5 Millones" },{ "optionValue": 2000000, "optionDisplay": "2 Millones" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 3000000, "optionDisplay": "3 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" },{ "optionValue": -1, "optionDisplay": "+4 Millones" }];
    var listCategoryParkingMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 10000, "optionDisplay": "10 Mil" },{ "optionValue": 40000, "optionDisplay": "40 Mil" },{ "optionValue": 60000, "optionDisplay": "60 Mil" },{ "optionValue": 80000, "optionDisplay": "80 Mil" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 140000, "optionDisplay": "140 Mil" },{ "optionValue": 200000, "optionDisplay": "200 Mil" },{ "optionValue": 260000, "optionDisplay": "260 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var listCategoryParkingMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 10000, "optionDisplay": "10 Mil" },{ "optionValue": 40000, "optionDisplay": "40 Mil" },{ "optionValue": 60000, "optionDisplay": "60 Mil" },{ "optionValue": 80000, "optionDisplay": "80 Mil" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 140000, "optionDisplay": "140 Mil" },{ "optionValue": 200000, "optionDisplay": "200 Mil" },{ "optionValue": 260000, "optionDisplay": "260 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var PresentTransaction = "Arriendo";
    var PresentCategory = "";
    var listFacets = [{data:[{Id:"8",Name:"Apartamento",Dictionary:"Category1Id",Count:"22187"},{Id:"4",Name:"Oficina",Dictionary:"Category1Id",Count:"7890"},{Id:"3",Name:"Local",Dictionary:"Category1Id",Count:"5164"},{Id:"22",Name:"Apartaestudio",Dictionary:"Category1Id",Count:"3373"},{Id:"9",Name:"Casa",Dictionary:"Category1Id",Count:"2443"},{Id:"10",Name:"Habitacion",Dictionary:"Category1Id",Count:"2085"},{Id:"5",Name:"Bodega",Dictionary:"Category1Id",Count:"1840"},{Id:"19",Name:"Edificio",Dictionary:"Category1Id",Count:"554"},{Id:"18",Name:"Consultorio",Dictionary:"Category1Id",Count:"334"},{Id:"24",Name:"Parqueadero",Dictionary:"Category1Id",Count:"85"},{Id:"2",Name:"Lote",Dictionary:"Category1Id",Count:"77"},{Id:"23",Name:"Casa Lote",Dictionary:"Category1Id",Count:"15"},{Id:"21",Name:"Casa Campestre",Dictionary:"Category1Id",Count:"11"},{Id:"7",Name:"Finca",Dictionary:"Category1Id",Count:"1"}],"info":"CategoryAdvert"},{data:[{Id:"4",Name:"Mi casa ya",Dictionary:"ProductCode",Count:"0"},{Id:"5",Name:"Sabana Bogotá",Dictionary:"ProductCode",Count:"0"}],"info":"ProductCodeAdvert"},{data:[{Id:"4",Name:"16 a 30 años",Dictionary:"AgeId",Count:"5976"},{Id:"2",Name:"1 a 8 años",Dictionary:"AgeId",Count:"5181"},{Id:"3",Name:"9 a 15 años",Dictionary:"AgeId",Count:"4826"},{Id:"5",Name:"Más de 30 años",Dictionary:"AgeId",Count:"2222"},{Id:"1",Name:"Menos de 1 año",Dictionary:"AgeId",Count:"1079"}],"info":"AgeAdvert"},{data:[{Id:"141",Name:"Trans. Público cercano",Dictionary:"ExtrasId",Count:"15250"},{Id:"143",Name:"Supermercados / C.Comerciales",Dictionary:"ExtrasId",Count:"13876"},{Id:"142",Name:"Parques cercanos",Dictionary:"ExtrasId",Count:"13466"},{Id:"139",Name:"Zona Residencial",Dictionary:"ExtrasId",Count:"13056"},{Id:"130",Name:"Citófono",Dictionary:"ExtrasId",Count:"12769"},{Id:"20",Name:"Cocina Integral",Dictionary:"ExtrasId",Count:"12587"},{Id:"133",Name:"Instalación de gas",Dictionary:"ExtrasId",Count:"12240"},{Id:"134",Name:"Zona de lavandería",Dictionary:"ExtrasId",Count:"11472"},{Id:"13",Name:"Ascensor",Dictionary:"ExtrasId",Count:"11039"},{Id:"140",Name:"Colegios / Universidades",Dictionary:"ExtrasId",Count:"10847"},{Id:"115",Name:"Portería / Recepción",Dictionary:"ExtrasId",Count:"8997"},{Id:"112",Name:"Salón Comunal",Dictionary:"ExtrasId",Count:"8984"},{Id:"128",Name:"Calentador",Dictionary:"ExtrasId",Count:"8951"},{Id:"5",Name:"Parqueadero Visitantes",Dictionary:"ExtrasId",Count:"8471"},{Id:"119",Name:"Vigilancia",Dictionary:"ExtrasId",Count:"7470"},{Id:"12",Name:"En conjunto cerrado",Dictionary:"ExtrasId",Count:"7301"},{Id:"117",Name:"Circuito cerrado de TV",Dictionary:"ExtrasId",Count:"7210"},{Id:"11",Name:"Depósito / Bodega",Dictionary:"ExtrasId",Count:"6672"},{Id:"124",Name:"Hall de Alcobas",Dictionary:"ExtrasId",Count:"6614"},{Id:"121",Name:"Baño Auxiliar",Dictionary:"ExtrasId",Count:"6289"},{Id:"109",Name:"Garaje(s)",Dictionary:"ExtrasId",Count:"5855"},{Id:"107",Name:"Zonas Verdes",Dictionary:"ExtrasId",Count:"5415"},{Id:"180",Name:"Closet",Dictionary:"ExtrasId",Count:"5246"},{Id:"106",Name:"Zona Infantil",Dictionary:"ExtrasId",Count:"5242"},{Id:"122",Name:"Estudio",Dictionary:"ExtrasId",Count:"5148"},{Id:"32",Name:"Balcón",Dictionary:"ExtrasId",Count:"4970"},{Id:"129",Name:"Chimenea",Dictionary:"ExtrasId",Count:"4713"},{Id:"137",Name:"Zona Comercial",Dictionary:"ExtrasId",Count:"4532"},{Id:"4",Name:"Piso en Baldosa /  Mármol",Dictionary:"ExtrasId",Count:"4230"},{Id:"263",Name:"Cómodas vias de acceso",Dictionary:"ExtrasId",Count:"4187"},{Id:"135",Name:"Sobre vía principal",Dictionary:"ExtrasId",Count:"4098"},{Id:"131",Name:"Cocina tipo Americano",Dictionary:"ExtrasId",Count:"4082"},{Id:"245",Name:"Vigilancia privada 24*7",Dictionary:"ExtrasId",Count:"4071"},{Id:"157",Name:"Portería / Vigilancia",Dictionary:"ExtrasId",Count:"3782"},{Id:"103",Name:"Gimnasio",Dictionary:"ExtrasId",Count:"3659"},{Id:"189",Name:"Sobre vía secundaria",Dictionary:"ExtrasId",Count:"3554"},{Id:"126",Name:"Vista panorámica",Dictionary:"ExtrasId",Count:"3357"},{Id:"10",Name:"Terraza",Dictionary:"ExtrasId",Count:"3034"},{Id:"0",Name:"Sin Especificar",Dictionary:"ExtrasId",Count:"2799"},{Id:"207",Name:"Garaje Cubierto",Dictionary:"ExtrasId",Count:"2753"},{Id:"127",Name:"Barra estilo americano",Dictionary:"ExtrasId",Count:"2745"},{Id:"211",Name:"Comedor",Dictionary:"ExtrasId",Count:"2643"},{Id:"217",Name:"Piso en Madera",Dictionary:"ExtrasId",Count:"2438"},{Id:"272",Name:"Cuarto de Servicio",Dictionary:"ExtrasId",Count:"2336"},{Id:"7",Name:"Jardín",Dictionary:"ExtrasId",Count:"2227"},{Id:"164",Name:"Garaje / Parqueadero(s)",Dictionary:"ExtrasId",Count:"2099"},{Id:"147",Name:"Vigilancia 24x7",Dictionary:"ExtrasId",Count:"1893"},{Id:"105",Name:"Salón de Juegos",Dictionary:"ExtrasId",Count:"1777"},{Id:"222",Name:"Shut de basura",Dictionary:"ExtrasId",Count:"1634"},{Id:"200",Name:"Área Urbana",Dictionary:"ExtrasId",Count:"1528"},{Id:"145",Name:"Loft",Dictionary:"ExtrasId",Count:"1445"},{Id:"259",Name:"Restaurantes",Dictionary:"ExtrasId",Count:"1442"},{Id:"270",Name:"Servicios independientes",Dictionary:"ExtrasId",Count:"1381"},{Id:"214",Name:"Escalera de Emergencia",Dictionary:"ExtrasId",Count:"1375"},{Id:"114",Name:"Vivienda Multifamiliar",Dictionary:"ExtrasId",Count:"1341"},{Id:"16",Name:"Patio",Dictionary:"ExtrasId",Count:"1303"},{Id:"118",Name:"Planta Eléctrica",Dictionary:"ExtrasId",Count:"1294"},{Id:"19",Name:"Amoblado",Dictionary:"ExtrasId",Count:"1263"},{Id:"116",Name:"Caldera",Dictionary:"ExtrasId",Count:"1195"},{Id:"193",Name:"Ventilación Natural",Dictionary:"ExtrasId",Count:"1176"},{Id:"132",Name:"Comedor auxiliar",Dictionary:"ExtrasId",Count:"1164"},{Id:"17",Name:"Piscina",Dictionary:"ExtrasId",Count:"1141"},{Id:"260",Name:"Bombas de gasolina",Dictionary:"ExtrasId",Count:"1122"},{Id:"185",Name:"En Edificio",Dictionary:"ExtrasId",Count:"1081"},{Id:"264",Name:"Cerca centro comercial",Dictionary:"ExtrasId",Count:"1049"},{Id:"177",Name:"Zona de BBQ",Dictionary:"ExtrasId",Count:"1048"},{Id:"218",Name:"Puerta de seguridad",Dictionary:"ExtrasId",Count:"979"},{Id:"125",Name:"Sauna / Turco / Jacuzzi",Dictionary:"ExtrasId",Count:"936"},{Id:"120",Name:"Alarma",Dictionary:"ExtrasId",Count:"918"},{Id:"148",Name:"Bahía exterior de parqueo",Dictionary:"ExtrasId",Count:"912"},{Id:"144",Name:"Duplex",Dictionary:"ExtrasId",Count:"888"},{Id:"100",Name:"Cancha de Squash",Dictionary:"ExtrasId",Count:"886"},{Id:"174",Name:"Cocina Equipada",Dictionary:"ExtrasId",Count:"885"},{Id:"202",Name:"Cerca a sector comercial",Dictionary:"ExtrasId",Count:"845"},{Id:"186",Name:"En zona Comercial",Dictionary:"ExtrasId",Count:"702"},{Id:"187",Name:"En zona residencial",Dictionary:"ExtrasId",Count:"701"},{Id:"262",Name:"Seguridad",Dictionary:"ExtrasId",Count:"666"},{Id:"150",Name:"Tanques de Agua",Dictionary:"ExtrasId",Count:"524"},{Id:"159",Name:"Cerca de Zona Urbana",Dictionary:"ExtrasId",Count:"520"},{Id:"181",Name:"Baño Independiente",Dictionary:"ExtrasId",Count:"510"},{Id:"108",Name:"Cuarto de Escoltas",Dictionary:"ExtrasId",Count:"504"},{Id:"175",Name:"Servicios Públicos",Dictionary:"ExtrasId",Count:"494"},{Id:"267",Name:"Alcantarillado",Dictionary:"ExtrasId",Count:"488"},{Id:"102",Name:"Canchas Deportivas",Dictionary:"ExtrasId",Count:"481"},{Id:"123",Name:"Cuarto de servicio",Dictionary:"ExtrasId",Count:"464"},{Id:"162",Name:"Cancha de Baloncesto",Dictionary:"ExtrasId",Count:"436"},{Id:"192",Name:"Todos los Servicios",Dictionary:"ExtrasId",Count:"433"},{Id:"163",Name:"Cancha de Futbol",Dictionary:"ExtrasId",Count:"409"},{Id:"138",Name:"Zona Industrial",Dictionary:"ExtrasId",Count:"395"},{Id:"156",Name:"Acceso Pavimentado",Dictionary:"ExtrasId",Count:"373"},{Id:"171",Name:"Cochera",Dictionary:"ExtrasId",Count:"370"},{Id:"113",Name:"Vivienda Bifamiliar",Dictionary:"ExtrasId",Count:"336"},{Id:"325",Name:"Sauna / Turco / Jacuzzi",Dictionary:"ExtrasId",Count:"332"},{Id:"146",Name:"PentHouse",Dictionary:"ExtrasId",Count:"328"},{Id:"216",Name:"Piso en Alfombra",Dictionary:"ExtrasId",Count:"284"},{Id:"101",Name:"Cancha de Tennis",Dictionary:"ExtrasId",Count:"280"},{Id:"249",Name:"Senderos ecológicos",Dictionary:"ExtrasId",Count:"274"},{Id:"273",Name:"Baño de Servicio",Dictionary:"ExtrasId",Count:"274"},{Id:"155",Name:"Despensa",Dictionary:"ExtrasId",Count:"261"},{Id:"250",Name:"Asador",Dictionary:"ExtrasId",Count:"239"}],"info":"ExtrasAdvert"},{data:[{Id:"4/5/2021 12:00:00 AM",Name:"Últimos 7 días",Dictionary:"GridDate",Count:"3084"},{Id:"4/9/2021 12:00:00 AM",Name:"Últimos 3 días",Dictionary:"GridDate",Count:"1256"},{Id:"4/12/2021 12:00:00 AM",Name:"Hoy",Dictionary:"GridDate",Count:"458"}],"info":"GridDateAdvert"},{data:[{Id:"3",Name:"Inmuebles con foto",Dictionary:"NumPhotos",Count:"23135"}],"info":"OtherFiltersAdvert"},{data:[{Id:"",Name:"",Dictionary:"GroupName",Count:"19240"},{Id:"AFYDI",Name:"AFYDI",Dictionary:"GroupName",Count:"1730"},{Id:"Lonja de Bogotá",Name:"Lonja de Bogotá",Dictionary:"GroupName",Count:"608"},{Id:"REMAX",Name:"REMAX",Dictionary:"GroupName",Count:"107"},{Id:"Century 21",Name:"Century 21",Dictionary:"GroupName",Count:"32"},{Id:"Lonja de Santander",Name:"Lonja de Santander",Dictionary:"GroupName",Count:"1"}],"info":"GroupNameAdvert"},{data:[{Id:"3",Name:"3",Dictionary:"StratumId",Count:"6085"},{Id:"4",Name:"4",Dictionary:"StratumId",Count:"5976"},{Id:"6",Name:"6",Dictionary:"StratumId",Count:"5395"},{Id:"5",Name:"5",Dictionary:"StratumId",Count:"3177"},{Id:"2",Name:"2",Dictionary:"StratumId",Count:"1031"},{Id:"",Name:"",Dictionary:"StratumId",Count:"462"},{Id:"1",Name:"1",Dictionary:"StratumId",Count:"58"},{Id:"Campestre",Name:"Campestre",Dictionary:"StratumId",Count:"3"}],"info":"StratumAdvert"}];
    var listPriceTypes = [{ "optionValue": 1, "optionDisplay": "Costo mensual" },{ "optionValue": 2, "optionDisplay": "Costo diario" }];
    var listEnvironments = [{ "optionValue": 1, "optionDisplay": "1" },{ "optionValue": 2, "optionDisplay": "2" },{ "optionValue": 3, "optionDisplay": "3" },{ "optionValue": 4, "optionDisplay": "4+" }];
    var listRomms = [{ "optionValue": 1, "optionDisplay": "1" },{ "optionValue": 2, "optionDisplay": "2" },{ "optionValue": 3, "optionDisplay": "3" },{ "optionValue": 4, "optionDisplay": "4+" }];
    var listBathRomms = [{ "optionValue": 1, "optionDisplay": "1" },{ "optionValue": 2, "optionDisplay": "2" },{ "optionValue": 3, "optionDisplay": "3" },{ "optionValue": 4, "optionDisplay": "4+" }];
    var listSurfaceFrom = [{ "optionValue": 0, "optionDisplay": "Seleccione" },{ "optionValue": 20, "optionDisplay": "20 m2" },{ "optionValue": 60, "optionDisplay": "60 m2" },{ "optionValue": 100, "optionDisplay": "100 m2" },{ "optionValue": 200, "optionDisplay": "200 m2" },{ "optionValue": 260, "optionDisplay": "260 m2" },{ "optionValue": 500, "optionDisplay": "500 m2" },{ "optionValue": 560, "optionDisplay": "560 m2" },{ "optionValue": 1000, "optionDisplay": "1000 m2" }];
    var listSurfaceTo = [{ "optionValue": 0, "optionDisplay": "Seleccione" },{ "optionValue": 20, "optionDisplay": "20 m2" },{ "optionValue": 60, "optionDisplay": "60 m2" },{ "optionValue": 100, "optionDisplay": "100 m2" },{ "optionValue": 200, "optionDisplay": "200 m2" },{ "optionValue": 260, "optionDisplay": "260 m2" },{ "optionValue": 500, "optionDisplay": "500 m2" },{ "optionValue": 560, "optionDisplay": "560 m2" },{ "optionValue": 1000, "optionDisplay": "1000 m2" },{ "optionValue": -1, "optionDisplay": "+1000 m2" }];
    var listParkingSize = [{ "optionValue": 278, "optionDisplay": "Pequeño" },{ "optionValue": 279, "optionDisplay": "Mediano" },{ "optionValue": 280, "optionDisplay": "Grande" }];
    var listParkingAvailability = [{ "optionValue": 281, "optionDisplay": "Lunes" },{ "optionValue": 282, "optionDisplay": "Martes" },{ "optionValue": 283, "optionDisplay": "Miercoles" },{ "optionValue": 284, "optionDisplay": "Jueves" },{ "optionValue": 285, "optionDisplay": "Viernes" },{ "optionValue": 286, "optionDisplay": "Sabado" },{ "optionValue": 287, "optionDisplay": "Domingo" }];
    var ParentCategory = 1;

    function InitializeViewModelFilters() {
        ko.options.useOnlyNativeEvents = true;
        if (typeof (window.vmResults) == "undefined") { window.vmResults = new AdvertResultsViewModel(); };
        UpdateCountersTransactionTypes();
        if (PresentTransaction == "Venta") {
            window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionSaleMinPrice, listTransactionSaleMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
        }
        else if (PresentTransaction == "Arriendo") {
            if (PresentCategory == "24") {
                window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listCategoryParkingMinPrice, listCategoryParkingMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
            }
            else {
                window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionRentMinPrice, listTransactionRentMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
            }
        }
        else if (PresentTransaction == "Alquiler_Vacacional") {
            window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionVacationMinPrice, listTransactionVacationMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
        }
        else {
            window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionVacationMinPrice, listTransactionVacationMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
        }
        if (!!ko.dataFor(document.getElementById("FiltersKnockOut")) == false) { ko.applyBindings(window.vmResults); }
    }

    function UpdateCountersTransactionTypes() {
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Venta"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Venta"; })[0].optionCount = "38927"; }
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Proyectos Nuevos"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Proyectos Nuevos"; })[0].optionCount = "465"; }
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Arriendo"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Arriendo"; })[0].optionCount = "22187"; }
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Alquiler Vacacional"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Alquiler Vacacional"; })[0].optionCount = "109"; }
    }

</script>
<div id="FiltersKnockOut" class="Filter-Container" style="width: 182px; margin: 10px 2px 0 0; clear: both; float: left; position: relative;">
    <div class="filters">
        <div class="filter_items" style="padding: 0px 0px 0px 0px;">
            <div class="alert-box">
                <span>Te ayudamos a <strong>
                    <br>
                    buscar</strong> tu inmueble</span>
                <div class="center">
                    
                    <a id="btnPriceAlert" class="button" href="javascript:Alert24x7(0,true)" title="">Registrate</a>
                    
                </div>
            </div>
        </div>
        <div class="filter_items">
            <div style="display: none;" class="title_filters">¡Filtrar aqui!</div>
            <!--summary-->
            <div class="tags" style="display: none;">
                <div class="content" data-bind="foreach: Filters().ChosenFilters()">
                    <span data-bind="text: Text, title: Text,event: { click: callBackFill }, css: Custom">Arriendo</span>
                
                    <span data-bind="text: Text, title: Text,event: { click: callBackFill }, css: Custom">Apartamento</span>
                </div>
            </div>
        </div>
        <!--Busqueda por Palabra-->
        <div class="filter_items">
            <div class="input-group">
                <input id="txtSearch" type="text" onclick="this.select()" placeholder="Buscar por palabra" data-bind="    textInput: Filters().Word" style="text-align: left;">
                <div data-bind="click: FindAdvertByWord" class="searchBtnText">
                    <span><i class="fa fa-search ico_word"></i></span>
                </div>
            </div>
        </div>
        <!--Tipo de Oferta-->
        <div id="divOfertType" class="filter_items offer collapse">
            <div class="TitleContent">
                <span class="title_box">Tipo de oferta</span><i class="btn_collapse fa fa-minus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: block;" data-bind="visible: Filters().OfertType().filter(function (obj, inx, arr) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType != '2' &amp;&amp; obj.GroupType != '0' })">
                <ul class="items" data-bind="foreach: Filters().OfertType().filter(function (obj, inx, arr) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType != '2' &amp;&amp; obj.GroupType != '0'})">                    
                    <li class="other_check">
                        <div data-bind="event: { click: $root.Filters().changeOfertType }">
                            <input type="radio" data-bind="attr: { value: Valor, alt: Name, checked: Selected(),  group: 'OfertType'}" value="1" alt="Venta" group="OfertType">
                            <label>
                                <span data-bind="text: (Name + ' ' + Alias), title: Name">Venta (nuevo y usado)</span>
                                <span class="gray" data-bind="text: CountToShow"> (38927)</span>
                            </label>
                        </div>
                    </li>
                                    
                    <li class="other_check">
                        <div data-bind="event: { click: $root.Filters().changeOfertType }">
                            <input type="radio" data-bind="attr: { value: Valor, alt: Name, checked: Selected(),  group: 'OfertType'}" value="2" alt="Arriendo" checked="true" group="OfertType">
                            <label>
                                <span data-bind="text: (Name + ' ' + Alias), title: Name">Arriendo </span>
                                <span class="gray" data-bind="text: CountToShow"> (22187)</span>
                            </label>
                        </div>
                    </li>
                                    
                    <li class="other_check">
                        <div data-bind="event: { click: $root.Filters().changeOfertType }">
                            <input type="radio" data-bind="attr: { value: Valor, alt: Name, checked: Selected(),  group: 'OfertType'}" value="3" alt="Alquiler Vacacional" group="OfertType">
                            <label>
                                <span data-bind="text: (Name + ' ' + Alias), title: Name">Alquiler Vacacional </span>
                                <span class="gray" data-bind="text: CountToShow"> (109)</span>
                            </label>
                        </div>
                    </li>
                </ul>
            </div>
            <div data-bind="visible:Filters().OfertType().filter(function (obj) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType =='2'; }).length > 0">
                <ul id="facet_ProyectosNuevos" class="items" facet="ProyectosNuevos" data-bind="foreach: Filters().OfertType().filter(function (obj) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType =='2'; })">
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenOnlyNewProyect }">
                        <div class="proyectos_nuevos" style="cursor: pointer;">
                            <input id="chkProyectosNuevos" type="checkbox" data-bind="attr: { value: Valor, alt: Name, checked: $root.Filters().OnlyNewProyects() }, css: { checkbox_complete: $root.Filters().OnlyNewProyects() }" style="cursor: inherit;" value="1" alt="Proyectos Nuevos">
                            <label data-bind="text: 'Ver Proyectos nuevos', title: Name" style="cursor: inherit; font-size: 12px !important; margin-bottom: 2px;">Ver Proyectos nuevos</label>
                            <i data-bind="visible: GroupType =='2'" style="float: right; margin: 6px -2px 2px 2px; color: #06C;" class="ico icon-conjunto"></i>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <!--Products Code-->
        <div class="filter_items  collapse" data-bind="visible: Filters().ProductCodeAdvert().length > 0" style="display: none;">

            <div class="ContentCollapse" style="display: block;">
                <ul id="facet_ProductCodeAdvert" class="items" facet="ProductCodeAdvert" data-bind="foreach: Filters().ProductCodeAdvert();"></ul>
            </div>
        </div>
        <!--Caracteristicas Precio, Dispinibilidad, Tamaño-->
        <div id="ctl00_phMasterPage_Filters2_contentFeatures">
            <div class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Precio</span><i class="btn_collapse fa fa-minus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: block;">
                    <div id="divPriceType" class="filter_items" data-bind="visible: Filters().PriceType().length > 0 &amp;&amp; Filters().ShowParkingFilters() == true" style="display: none;">
                        <ul id="facet_PriceType" class="items" style="position: relative;" data-bind="foreach: Filters().PriceType()">
                            <li class="other_check" data-bind="event: { click: $root.Filters().chosenPriceType }, attr: { title: Name }" title="Costo mensual">
                                <div data-bind="attr: { title: Name }" title="Costo mensual">
                                    <input type="checkbox" data-bind="attr: { value: Valor, alt: Name, checked: Selected() }" style="cursor: inherit;" autocomplete="off" value="1" alt="Costo mensual">
                                    <label data-bind="text: Name, title: Name" style="cursor: inherit;">Costo mensual</label>
                                </div>
                            </li>
                        
                            <li class="other_check" data-bind="event: { click: $root.Filters().chosenPriceType }, attr: { title: Name }" title="Costo diario">
                                <div data-bind="attr: { title: Name }" title="Costo diario">
                                    <input type="checkbox" data-bind="attr: { value: Valor, alt: Name, checked: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="Costo diario">
                                    <label data-bind="text: Name, title: Name" style="cursor: inherit;">Costo diario</label>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="input-group">
                        <input id="priceFromFilter" type="text" placeholder="Desde $" data-bind="textInput: Filters().chosenPriceFrom" maxlength="16" autocomplete="off">
                        <span><i class="fa close" data-bind="visible: Filters().chosenPriceFrom() != undefined &amp;&amp; Filters().chosenPriceFrom() != '', event: { click: function () { $root.Filters().chosenPriceFrom(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                    <div class="input-group">
                        <input id="priceToFilter" type="text" placeholder="Hasta $" data-bind="textInput: Filters().chosenPriceTo, style: { 'border-color': Filters().chosenPriceRangeGuard() == true ? '#CCCCCC' : '#CE2323' } " maxlength="16" autocomplete="off" style="border-color: rgb(204, 204, 204);">
                        <span><i class="fa close" data-bind="visible: Filters().chosenPriceTo() != undefined &amp;&amp; Filters().chosenPriceTo() != '', event: { click: function () { $root.Filters().chosenPriceTo(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                </div>
            </div>
            <!--Categorias-->
            <div data-bind="visible: Filters().CategoryAdvert().length > 0" class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Tipo de Inmueble</span><i class="btn_collapse fa fa-minus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: block;">
                    <ul id="facet_CategoryAdvert" facet="CategoryAdvert" class="items" data-bind="foreach: Filters().CategoryAdvert()">
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="8" alt="Apartamento" checked="true" class="checkbox_complete">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Apartamento</label>
                                <span class="gray" data-bind="text: CountToShow">(22187)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="Oficina">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Oficina</label>
                                <span class="gray" data-bind="text: CountToShow">(7890)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="3" alt="Local">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Local</label>
                                <span class="gray" data-bind="text: CountToShow">(5164)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="22" alt="Apartaestudio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Apartaestudio</label>
                                <span class="gray" data-bind="text: CountToShow">(3373)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="9" alt="Casa">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Casa</label>
                                <span class="gray" data-bind="text: CountToShow">(2443)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="10" alt="Habitacion">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Habitacion</label>
                                <span class="gray" data-bind="text: CountToShow">(2085)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Bodega">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Bodega</label>
                                <span class="gray" data-bind="text: CountToShow">(1840)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="19" alt="Edificio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Edificio</label>
                                <span class="gray" data-bind="text: CountToShow">(554)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="18" alt="Consultorio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Consultorio</label>
                                <span class="gray" data-bind="text: CountToShow">(334)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="24" alt="Parqueadero">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Parqueadero</label>
                                <span class="gray" data-bind="text: CountToShow">(85)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="Lote">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Lote</label>
                                <span class="gray" data-bind="text: CountToShow">(77)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="23" alt="Casa Lote">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Casa Lote</label>
                                <span class="gray" data-bind="text: CountToShow">(15)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="21" alt="Casa Campestre">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Casa Campestre</label>
                                <span class="gray" data-bind="text: CountToShow">(11)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="7" alt="Finca">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Finca</label>
                                <span class="gray" data-bind="text: CountToShow">(1)</span>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>

            <div id="divGroupAvailability" class="filter_items collapse" data-bind="visible: Filters().ExtrasParkingAvailability().length > 0 &amp;&amp; Filters().ShowParkingFilters() == true" style="display: none;">
                <div class="TitleContent">
                    <span class="title_box">Disponiblidad</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <ul class="items" data-bind="foreach: Filters().ExtrasParkingAvailability()">
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Lunes">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="281" alt="Lunes" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Lunes</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Martes">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="282" alt="Martes" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Martes</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Miercoles">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="283" alt="Miercoles" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Miercoles</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Jueves">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="284" alt="Jueves" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Jueves</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Viernes">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="285" alt="Viernes" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Viernes</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Sabado">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="286" alt="Sabado" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Sabado</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Domingo">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="287" alt="Domingo" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Domingo</label>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
            <div id="divGroupSize" class="filter_items collapse" data-bind="visible: Filters().ExtrasParkingSize().length > 0 &amp;&amp; Filters().ShowParkingFilters() == true" style="display: none;">
                <div class="TitleContent">
                    <span class="title_box">Tamaño</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <ul class="items" data-bind="foreach: Filters().ExtrasParkingSize()">
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Pequeño">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Parking', checked: Selected()}, css: { checkbox_complete: Selected()}" value="278" alt="Pequeño" group="Parking">
                                <label data-bind="text: Name" style="cursor: inherit;">Pequeño</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Mediano">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Parking', checked: Selected()}, css: { checkbox_complete: Selected()}" value="279" alt="Mediano" group="Parking">
                                <label data-bind="text: Name" style="cursor: inherit;">Mediano</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Grande">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Parking', checked: Selected()}, css: { checkbox_complete: Selected()}" value="280" alt="Grande" group="Parking">
                                <label data-bind="text: Name" style="cursor: inherit;">Grande</label>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <!--Estato-->
        <div id="divStratum" data-bind="visible: Filters().StratumAdvert().length > 0" class="filter_items collapse">
            <div class="TitleContent">
                <span class="title_box">Estrato</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_stratumAdvert" class="items" facet="StratumAdvert" data-bind="foreach: Filters().StratumAdvert()">
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="Campestre" alt="Campestre">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Campestre</label>
                            <span class="gray" data-bind="text: CountToShow">(3)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="1" alt="Estrato 1">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 1</label>
                            <span class="gray" data-bind="text: CountToShow">(58)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="Estrato 2">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 2</label>
                            <span class="gray" data-bind="text: CountToShow">(1031)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="3" alt="Estrato 3">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 3</label>
                            <span class="gray" data-bind="text: CountToShow">(6085)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="Estrato 4">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 4</label>
                            <span class="gray" data-bind="text: CountToShow">(5976)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Estrato 5">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 5</label>
                            <span class="gray" data-bind="text: CountToShow">(3177)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="6" alt="Estrato 6">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 6</label>
                            <span class="gray" data-bind="text: CountToShow">(5395)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div id="divGroupFeaturesRooms" data-bind="visible: Filters().ShowParkingFilters() != true">
            <!--Ambientes-->
            <div class="filter_items collapse" data-bind="visible: Filters().ParentCategory() == 2" style="display: none;">
                <div class="TitleContent">
                    <span class="title_box">Ambientes</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="btn-group" data-bind="foreach: Filters().Environments()">
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="1" alt="Ambientes: 1" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="2" alt="Ambientes: 2" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="3" alt="Ambientes: 3" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="4+" alt="Ambientes: 4+" class="btn-select">
                    </div>
                </div>
            </div>
            <!--Habitaciones-->
            <div class="filter_items collapse" data-bind="visible: Filters().ParentCategory() != 2">
                <div class="TitleContent">
                    <span class="title_box">Habitaciones</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="btn-group" data-bind="foreach: Filters().Rooms()">
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="1" alt="Habitaciones: 1" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="2" alt="Habitaciones: 2" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="3" alt="Habitaciones: 3" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="4+" alt="Habitaciones: 4+" class="btn-select">
                    </div>
                </div>
            </div>
        </div>
        <div id="divGroupFeatures" data-bind="visible: Filters().ShowParkingFilters() != true">
            <!--Area-->
            <div class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Area M2</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="input-group medium">
                        <input id="areaFromFilter" type="text" placeholder="Desde" data-bind="textInput: Filters().chosenSurfaceFrom" maxlength="8" autocomplete="off">
                        <span><i class="fa close" data-bind="visible: Filters().chosenSurfaceFrom() != undefined &amp;&amp; Filters().chosenSurfaceFrom() != '', event: { click: function () { $root.Filters().chosenSurfaceFrom(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                    <div class="separate"></div>
                    <div class="input-group medium">
                        <input id="areaToFilter" type="text" placeholder="Hasta" data-bind="textInput: Filters().chosenSurfaceTo, style: { 'border-color': Filters().chosenSurfaceRangeGuard() == true ? '#CCCCCC' : '#CE2323' }" maxlength="8" autocomplete="off" style="border-color: rgb(204, 204, 204);">
                        <span><i class="fa close" data-bind="visible: Filters().chosenSurfaceTo() != undefined &amp;&amp; Filters().chosenSurfaceTo() != '', event: { click: function () { $root.Filters().chosenSurfaceTo(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                </div>
            </div>
        </div>
        <!--Otros Filtros-->
        <div class="filter_items others collapse" data-bind="visible: Filters().OtherFiltersAdvert().length > 0">
            <div class="TitleContent">
                <span class="title_box">Otros Filtros</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_OtherFiltersAdvert" class="items" facet="OtherFiltersAdvert" data-bind="foreach: Filters().OtherFiltersAdvert()">
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Con foto">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="3" alt="Con foto">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Con foto</label>
                            <span class="gray" data-bind="text: CountToShow">(23135)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <!--Extras-->
        <div class="filter_items others collapse" data-bind="visible: Filters().ExtrasAdvert().length > 0">
            <div class="TitleContent">
                <span class="title_box">Lo quiero con</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div id="facet_ExtrasAdvert" facet="ExtrasAdvert" class="ContentCollapse" style="display: none; top: 0px;">
                <div class="main_characteristics" data-bind="visible: Filters().ExtrasAdvert().filter(function (obj) { return obj.ShowInLst() == true &amp;&amp; obj.IconClass() != ''; }).length > 0">
                    <ul class="items" data-bind="foreach: Filters().ExtrasAdvert().filter(function (obj) { return obj.ShowInLst() == true &amp;&amp; obj.IconClass() != ''; })">
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Trans. Público cercano (15250)" class="extraicon publictrans">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="141" alt="Trans. Público cercano">
                                <label data-bind="text: ShortName, title: Name">Trans. Público </label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Sobre vía principal (4098)" class="extraicon main_road">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="135" alt="Sobre vía principal">
                                <label data-bind="text: ShortName, title: Name">Sobre vía princ</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Zona de lavandería (11472)" class="extraicon LaundryZone">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="134" alt="Zona de lavandería">
                                <label data-bind="text: ShortName, title: Name">Zona de lavande</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Cocina Integral (12587)" class="extraicon kitchenInt">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="20" alt="Cocina Integral">
                                <label data-bind="text: ShortName, title: Name">Cocina Integral</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Instalación de gas (12240)" class="extraicon gas">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="133" alt="Instalación de gas">
                                <label data-bind="text: ShortName, title: Name">Instalación de </label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Garaje(s) (5855)" class="extraicon garage">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="109" alt="Garaje(s)">
                                <label data-bind="text: ShortName, title: Name">Garaje(s)</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Portería / Recepción (8997)" class="extraicon door_reception">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="115" alt="Portería / Recepción">
                                <label data-bind="text: ShortName, title: Name">Portería / Rece</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Closet (5246)" class="extraicon closet">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="180" alt="Closet">
                                <label data-bind="text: ShortName, title: Name">Closet</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Baño Independiente (510)" class="extraicon bathroom_ind">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="181" alt="Baño Independiente">
                                <label data-bind="text: ShortName, title: Name">Baño Independie</label>
                            </div>
                        </li>
                    </ul>
                </div>
                <div scroll="yes" class="parent_scroll" style="max-height: 240px; position: relative; overflow: hidden;">
                    <ul class="items scroll_content" style="position: relative;" data-bind="foreach: Filters().ExtrasAdvert().filter(function (obj) { return obj.ShowInLst() == true &amp;&amp; obj.IconClass() == ''; })">
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Supermercados / C.Comerciales (13876)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="143" alt="Supermercados / C.Comerciales">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Supermercados /</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Parques cercanos (13466)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="142" alt="Parques cercanos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Parques cercano</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Residencial (13056)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="139" alt="Zona Residencial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Residencia</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Citófono (12769)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="130" alt="Citófono">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Citófono</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Ascensor (11039)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="13" alt="Ascensor">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Ascensor</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Colegios / Universidades (10847)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="140" alt="Colegios / Universidades">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Colegios / Univ</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Salón Comunal (8984)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="112" alt="Salón Comunal">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Salón Comunal</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Calentador (8951)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="128" alt="Calentador">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Calentador</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Parqueadero Visitantes (8471)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Parqueadero Visitantes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Parqueadero Vis</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vigilancia (7470)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="119" alt="Vigilancia">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vigilancia</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En conjunto cerrado (7301)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="12" alt="En conjunto cerrado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En conjunto cer</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Circuito cerrado de TV (7210)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="117" alt="Circuito cerrado de TV">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Circuito cerrad</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Depósito / Bodega (6672)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="11" alt="Depósito / Bodega">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Depósito / Bode</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Hall de Alcobas (6614)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="124" alt="Hall de Alcobas">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Hall de Alcobas</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Baño Auxiliar (6289)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="121" alt="Baño Auxiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Baño Auxiliar</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zonas Verdes (5415)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="107" alt="Zonas Verdes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zonas Verdes</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Infantil (5242)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="106" alt="Zona Infantil">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Infantil</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Estudio (5148)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="122" alt="Estudio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estudio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Balcón (4970)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="32" alt="Balcón">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Balcón</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Chimenea (4713)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="129" alt="Chimenea">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Chimenea</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Comercial (4532)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="137" alt="Zona Comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Comercial</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piso en Baldosa /  Mármol (4230)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="Piso en Baldosa /  Mármol">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piso en Baldosa</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cómodas vias de acceso (4187)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="263" alt="Cómodas vias de acceso">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cómodas vias de</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cocina tipo Americano (4082)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="131" alt="Cocina tipo Americano">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cocina tipo Ame</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vigilancia privada 24*7 (4071)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="245" alt="Vigilancia privada 24*7">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vigilancia priv</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Portería / Vigilancia (3782)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="157" alt="Portería / Vigilancia">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Portería / Vigi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Gimnasio (3659)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="103" alt="Gimnasio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Gimnasio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Sobre vía secundaria (3554)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="189" alt="Sobre vía secundaria">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Sobre vía secun</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vista panorámica (3357)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="126" alt="Vista panorámica">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vista panorámic</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Terraza (3034)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="10" alt="Terraza">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Terraza</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Garaje Cubierto (2753)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="207" alt="Garaje Cubierto">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Garaje Cubierto</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Barra estilo americano (2745)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="127" alt="Barra estilo americano">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Barra estilo am</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Comedor (2643)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="211" alt="Comedor">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Comedor</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piso en Madera (2438)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="217" alt="Piso en Madera">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piso en Madera</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cuarto de Servicio (2336)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="272" alt="Cuarto de Servicio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cuarto de Servi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Jardín (2227)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="7" alt="Jardín">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Jardín</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vigilancia 24x7 (1893)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="147" alt="Vigilancia 24x7">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vigilancia 24x7</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Salón de Juegos (1777)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="105" alt="Salón de Juegos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Salón de Juegos</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Shut de basura (1634)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="222" alt="Shut de basura">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Shut de basura</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Área Urbana (1528)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="200" alt="Área Urbana">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Área Urbana</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Loft (1445)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="145" alt="Loft">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Loft</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Restaurantes (1442)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="259" alt="Restaurantes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Restaurantes</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Servicios independientes (1381)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="270" alt="Servicios independientes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Servicios indep</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Escalera de Emergencia (1375)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="214" alt="Escalera de Emergencia">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Escalera de Eme</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vivienda Multifamiliar (1341)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="114" alt="Vivienda Multifamiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vivienda Multif</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Patio (1303)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="16" alt="Patio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Patio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Planta Eléctrica (1294)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="118" alt="Planta Eléctrica">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Planta Eléctric</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Amoblado (1263)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="19" alt="Amoblado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Amoblado</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Caldera (1195)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="116" alt="Caldera">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Caldera</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Ventilación Natural (1176)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="193" alt="Ventilación Natural">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Ventilación Nat</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Comedor auxiliar (1164)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="132" alt="Comedor auxiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Comedor auxilia</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piscina (1141)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="17" alt="Piscina">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piscina</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Bombas de gasolina (1122)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="260" alt="Bombas de gasolina">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Bombas de gasol</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En Edificio (1081)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="185" alt="En Edificio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En Edificio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cerca centro comercial (1049)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="264" alt="Cerca centro comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cerca centro co</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona de BBQ (1048)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="177" alt="Zona de BBQ">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona de BBQ</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Puerta de seguridad (979)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="218" alt="Puerta de seguridad">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Puerta de segur</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Sauna / Turco / Jacuzzi (936)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="125" alt="Sauna / Turco / Jacuzzi">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Sauna / Turco /</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Alarma (918)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="120" alt="Alarma">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Alarma</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Bahía exterior de parqueo (912)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="148" alt="Bahía exterior de parqueo">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Bahía exterior </label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Duplex (888)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="144" alt="Duplex">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Duplex</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Squash (886)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="100" alt="Cancha de Squash">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Squas</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cocina Equipada (885)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="174" alt="Cocina Equipada">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cocina Equipada</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cerca a sector comercial (845)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="202" alt="Cerca a sector comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cerca a sector </label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En zona Comercial (702)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="186" alt="En zona Comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En zona Comerci</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En zona residencial (701)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="187" alt="En zona residencial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En zona residen</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Seguridad (666)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="262" alt="Seguridad">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Seguridad</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Tanques de Agua (524)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="150" alt="Tanques de Agua">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Tanques de Agua</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cerca de Zona Urbana (520)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="159" alt="Cerca de Zona Urbana">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cerca de Zona U</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cuarto de Escoltas (504)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="108" alt="Cuarto de Escoltas">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cuarto de Escol</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Servicios Públicos (494)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="175" alt="Servicios Públicos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Servicios Públi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Alcantarillado (488)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="267" alt="Alcantarillado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Alcantarillado</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Canchas Deportivas (481)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="102" alt="Canchas Deportivas">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Canchas Deporti</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cuarto de servicio (464)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="123" alt="Cuarto de servicio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cuarto de servi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Baloncesto (436)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="162" alt="Cancha de Baloncesto">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Balon</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Todos los Servicios (433)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="192" alt="Todos los Servicios">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Todos los Servi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Futbol (409)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="163" alt="Cancha de Futbol">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Futbo</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Industrial (395)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="138" alt="Zona Industrial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Industrial</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Acceso Pavimentado (373)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="156" alt="Acceso Pavimentado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Acceso Paviment</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cochera (370)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="171" alt="Cochera">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cochera</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vivienda Bifamiliar (336)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="113" alt="Vivienda Bifamiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vivienda Bifami</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Sauna / Turco / Jacuzzi (332)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="325" alt="Sauna / Turco / Jacuzzi">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Sauna / Turco /</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="PentHouse (328)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="146" alt="PentHouse">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">PentHouse</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piso en Alfombra (284)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="216" alt="Piso en Alfombra">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piso en Alfombr</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Tennis (280)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="101" alt="Cancha de Tennis">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Tenni</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Senderos ecológicos (274)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="249" alt="Senderos ecológicos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Senderos ecológ</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Baño de Servicio (274)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="273" alt="Baño de Servicio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Baño de Servici</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Despensa (261)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="155" alt="Despensa">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Despensa</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Asador (239)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="250" alt="Asador">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Asador</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    </ul>
                <div class="scroll ui-draggable" style="height: 23px; opacity: 0.5; top: 0px;"></div></div>
            </div>
        </div>
        <!--Fechas-->
        <div class="filter_items collapse" data-bind="visible: Filters().GridDateAdvert().filter(function (obj) { return obj.ShowInLst() == true; }).length > 0 &amp;&amp; Filters().ShowAllFilters() == true">
            <div class="TitleContent">
                <span class="title_box">Fecha de Publicado</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_GridDateAdvert" facet="GridDateAdvert" class="items" data-bind="foreach: Filters().GridDateAdvert().filter(function (obj) { return obj.ShowInLst() == true; })">
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Últimos 7 días">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected }, css: { checkbox_complete: Selected }" style="cursor: inherit;" autocomplete="off" value="4/5/2021 12:00:00 AM" alt="Últimos 7 días">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Últimos 7 días</label>
                            <span class="gray" data-bind="text: CountToShow">(3084)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Últimos 3 días">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected }, css: { checkbox_complete: Selected }" style="cursor: inherit;" autocomplete="off" value="4/9/2021 12:00:00 AM" alt="Últimos 3 días">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Últimos 3 días</label>
                            <span class="gray" data-bind="text: CountToShow">(1256)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Hoy">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected }, css: { checkbox_complete: Selected }" style="cursor: inherit;" autocomplete="off" value="4/12/2021 12:00:00 AM" alt="Hoy">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Hoy</label>
                            <span class="gray" data-bind="text: CountToShow">(458)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div id="divGroupFeaturesBathRooms" data-bind="visible: Filters().ShowParkingFilters() != true">
            <!--Baños-->
            <div class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Baños</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="btn-group" data-bind="foreach: Filters().BathRooms()">
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="1" alt="Baños: 1" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="2" alt="Baños: 2" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="3" alt="Baños: 3" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="4+" alt="Baños: 4+" class="btn-select">
                    </div>
                </div>
            </div>
        </div>
        <!--Estado del inmueble-->
        <div class="filter_items collapse" data-bind="visible: Filters().AgeAdvert().length > 0 &amp;&amp; Filters().ShowAllFilters() == true">
            <div class="TitleContent">
                <span class="title_box">Antigüedad</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_AgeAdvert" facet="AgeAdvert" class="items" style="position: relative;" data-bind="foreach: Filters().AgeAdvert()">
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="16 a 30 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="16 a 30 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">16 a 30 años</label>
                            <span class="gray" data-bind="text: CountToShow">(5976)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="1 a 8 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="1 a 8 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">1 a 8 años</label>
                            <span class="gray" data-bind="text: CountToShow">(5181)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="9 a 15 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="3" alt="9 a 15 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">9 a 15 años</label>
                            <span class="gray" data-bind="text: CountToShow">(4826)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="Más de 30 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Más de 30 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Más de 30 años</label>
                            <span class="gray" data-bind="text: CountToShow">(2222)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="Menos de 1 año">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="1" alt="Menos de 1 año">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Menos de 1 año</label>
                            <span class="gray" data-bind="text: CountToShow">(1079)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <!--Por Codigo-->
        <!--Remover Comentario a DIV si se desea habilitar-->
        <!--<div class="filter_items">   
            <div class="input-group">
                <input id="txtCode" type="text" onclick="this.select()" placeholder="Buscar por código" data-bind="textInput:Filters().AdvertId" style="max-width:132px;" />
                <div data-bind="click: FindAdvertByCode" style="float:right; margin:0px 0px 0px 3px; cursor:pointer; padding:5px 3px;">
                    <span><i class="fa fa-search"></i></span>   
                </div> 
            </div>
        </div> -->
        <!--Grupo Inmobililaria-->
        <!--Remover Comentario a DIV si se desea habilitar-->
        <!-- <div class="filter_items" data-bind="visible:Filters().GroupNameAdvert().length > 0">
            <div class="TitleContent">
                <span class="title_box">Grupo Inmobiliario</span><i class="btn_collapse fa fa-minus-square"></i>
            </div>
            <div class="ContentCollapse">  
                <div scroll="yes" class="parent_scroll" style="max-height:295px;">            
                    <ul id="facet_GroupNameAdvert" Facet="GroupNameAdvert" class="items scroll_content" style="position:relative;" data-bind="foreach: Filters().GroupNameAdvert()">
                        <li>
                            <div data-bind="event:{click:SelectItem}">
                                <input type="checkbox" data-bind="attr: {value: Id, alt: Name, checked: Selected }, css: {checkbox_complete: Selected }">
                                <label data-bind="text:ShortName, title:Name"></label>      
                                <span class="gray" data-bind="text: CountToShow"></span>   
                            </div>
                        </li>
                    </ul>            
                </div>
            </div>
        </div> -->
        <!--<div class="filter_items" style="padding: 7px 8px 7px 8px">
            <input class="btn_mas" type="button" data-bind="event: { click: Filters().ToogleExtras }, value: Filters().ShowAllFiltersLabel" />
        </div>-->
        <div id="fl_search" style="text-transform: uppercase; margin: 10px 0px 0px; position: fixed; bottom: 0px; top: auto;" onclick="trackingAlreadyCalled=false; window.vmResults.FindAdverts()">Aplicar Filtros</div>
    </div>

    <div class="publicity_Grid" style="top: 1192px;">
        <section class="contentBlock " data-sticky="" data-margin-top="10"> 
            <span></span>
             <div id="div-gpt-ad-1552918916085-0" name="Solapa_Bottom_Resultados" provider="AdManager" size="[160, 600]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 160px; height: 602px;"></div>
        </section>
        
        
    </div>
</div>

<script type="text/javascript">
    SetAsIntegerInput("#areaFromFilter,#areaToFilter,#txtCode");
    setInputAsCurrencyFormat("#priceFromFilter,#priceToFilter");
    var CurrentFacetsCategory;
</script>

                    <!--pestañas y avisos resultado-->
                    <div class="content-grid" style="margin-top: 10px;">
                        <!--menu-->
                        <!--nuevo filtro-->
                        <!--Grilla-->
                        
<style>
    .Grid .content-grid .contentGrid ul {
        height: 135px !important;
        border-top: #FFF 1px solid !important;
        border-right: #F0EDEF 1px solid !important;
        border-left: #F0EDEF 1px solid !important;
        border-bottom: #F0EDEF 1px solid !important;
        height: 135px !important !important;
        position: relative !important;
    }

    /* NUEVOS */


    /* NUEVOS */

    .heart-favorito, .heart-favoritoc {
        cursor: pointer;
        position: absolute;
        margin: 0pt;
        padding: 0pt;
        border: 0pt none;
        outline: 0pt none;
        font-size: 100%;
        vertical-align: baseline;
        top: 84%;
        right: 1%;
        z-index: 99;
        background: rgba(0,0,0,0);
        width: 16px;
        height: 16px;
        font-family: 'Lato', Gotham, "Helvetica Neue", Helvetica, Arial, "sans-serif" !important;
    }

    .Corazo {
        font-family: 'Lato', Gotham, "Helvetica Neue", Helvetica, Arial, "sans-serif" !important;
    }

    .heart-favorito .fa-heart-o {
        font-size: 16px !important;
        color: #888888;
        display: block;
    }

    .heart-favorito .fa-heart {
        color: #0066cc;
        display: none;
    }

    /* NUEVOS HOVER*/
    /*.heart-favorito:hover .fa-heart-o {
        display: none !important;
    }

    .heart-favorito:hover .fa-heart {
        display: block !important;
    }*/

    .heart-favoritoc .fa-heart-o {
        font-size: 16px !important;
        color: #888888;
        display: none;
    }

    .heart-favoritoc .fa-heart {
        color: #0066cc;
        display: block;
    }

    /* NUEVOS HOVER*/
    /*.heart-favoritoc:hover .fa-heart-o {
        display: block !important;
    }

    .heart-favoritoc:hover .fa-heart {
        display: none !important;
    }*/

    .carouselContent{
        width:100%;
        margin-bottom: 30px;
    }
</style>

<div id="ctl00_phMasterPage_Grid1_GridAdverts" class="grid">
    <div class="gridHeader" style="height: 32px; padding: 0px 0px 5px 5px;">
        <div class="result" style="width: 100%;">
            <div class="order" style="position: relative; padding: 2px 5px;">
                <select onchange="Grid_OrderBy(this.value)" class="options" id="lst_Order">
                    <option value="">Ordenar por</option>
                    <option value="Price asc">Precio - de menor a mayor</option>
                    <option value="Price desc">Precio - de mayor a menor</option>
                    <option value="Area asc">Área - de menor a mayor</option>
                    <option value="Area desc">Área - de mayor a menor</option>
                    <option value="Rooms asc">Hab. - de menor a mayor</option>
                    <option value="Rooms desc">Hab. - de mayor a menor</option>
                </select>
                <div id="ctl00_phMasterPage_Grid1_contenedor_linksMapList" style="position: relative;">
                    <ul>
                        <li>
                            <div id="boton_icon_listado" style="margin: 3px 2px;">
                                <i class="fa fa-list-ul" style="color: #b5b5b5 !important;"></i><a style="color: #b5b5b5 !important;" href="javascript:void(0);">listado</a>
                            </div>
                        </li>
                        <li>
                            <div id="ctl00_phMasterPage_Grid1_boton_icon_map" style="margin: 3px 2px;" onclick="javascript: goToMap(); trackingClick('results_resultados_mapa', 'SpecificTracking');">
                                <i class="fa fa-map-marker"></i><a href="javascript:void(0);">Mapa</a>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
     <!-- carrusel prodcto alta Visibilidad -->
     <div class="box_CarouselAv" style="display: none !important;">
          <div id="divCarouselAv" class="carouselContent" "=""></div>
     </div>

    <div class="contentGrid clear">
        <meta itemprop="mainContentOfPage" content="true">
        <div id="divAdverts">
            
                    
                    
                        <ul id="rowIndex_0" class="advert  Product_Code_DOV AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6237104.aspx'">
                                <div>
                                    <span class="text-photo">
                                        13
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6237104/apartamento-arriendo-cundinamarca-bogota-350183794_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6237104/apartamento-arriendo-cundinamarca-bogota-350183794_m.jpg" alt="Apartamento en Arriendo - Bogotá Chicó Navarra" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6237104/apartamento-arriendo-cundinamarca-bogota-350183794_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6237104.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/chico_navarra-det-6237104.aspx" title="Apartamento en Arriendo - Bogotá Chicó Navarra">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Chicó Navarra</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6237104.aspx'">
                                62,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6237104.aspx'">

                                <div>
                                    <meta itemprop="price" content="3750000.0">
                                    $ 3.750.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6237104" class="compare_div" value="6237104" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6237104,'#compare_div_6237104','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6237104" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_1" class="advert  Product_Code_BUMP Product_Code_BUMP Product_Code_ADD Product_Code_LBL AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero_alto-det-5330804.aspx'">
                                <div>
                                    <span class="text-photo">
                                        9
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta">Oportunidad</span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/02/21/5330804/apartamento-arriendo-cundinamarca-bogota-345248733_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/02/21/5330804/apartamento-arriendo-cundinamarca-bogota-345248733_m.jpg" alt="Apartamento en Arriendo - Bogotá Chapinero Alto" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/02/21/5330804/apartamento-arriendo-cundinamarca-bogota-345248733_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero_alto-det-5330804.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/chapinero_alto-det-5330804.aspx" title="Apartamento en Arriendo - Bogotá Chapinero Alto">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Chapinero Alto</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Chapinero - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero_alto-det-5330804.aspx'">
                                45,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero_alto-det-5330804.aspx'">

                                <div>
                                    <meta itemprop="price" content="1600000.0">
                                    $ 1.600.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5330804" class="compare_div" value="5330804" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5330804,'#compare_div_5330804','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5330804" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_2" class="advert  Product_Code_DOV AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6250131.aspx'">
                                <div>
                                    <span class="text-photo">
                                        16
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250131/apartamento-arriendo-cundinamarca-bogota-351356553_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250131/apartamento-arriendo-cundinamarca-bogota-351356553_m.jpg" alt="Apartamento en Arriendo - Bogotá Los Rosales" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250131/apartamento-arriendo-cundinamarca-bogota-351356553_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6250131.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/los_rosales-det-6250131.aspx" title="Apartamento en Arriendo - Bogotá Los Rosales">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Los Rosales</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6250131.aspx'">
                                92,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6250131.aspx'">

                                <div>
                                    <meta itemprop="price" content="2850000.0">
                                    $ 2.850.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6250131" class="compare_div" value="6250131" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6250131,'#compare_div_6250131','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6250131" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_3" class="advert  Product_Code_ADD Product_Code_LBL AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/teusaquillo-det-6027884.aspx'">
                                <div>
                                    <span class="text-photo">
                                        9
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta">Oportunidad</span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/22/6027884/apartamento-arriendo-cundinamarca-bogota-330517855_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/22/6027884/apartamento-arriendo-cundinamarca-bogota-330517855_m.jpg" alt="Apartamento en Arriendo - Bogotá Teusaquillo" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/22/6027884/apartamento-arriendo-cundinamarca-bogota-330517855_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/teusaquillo-det-6027884.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/teusaquillo-det-6027884.aspx" title="Apartamento en Arriendo - Bogotá Teusaquillo">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Teusaquillo</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Chapinero - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/teusaquillo-det-6027884.aspx'">
                                144,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/teusaquillo-det-6027884.aspx'">

                                <div>
                                    <meta itemprop="price" content="2200000.0">
                                    $ 2.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6027884" class="compare_div" value="6027884" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6027884,'#compare_div_6027884','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6027884" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                        <ul style="height: auto;" class="parentAdsContainer">
                            <li style="width: 645px; margin: auto; border-bottom: 1px solid #E3DEE2" itemscope="" itemtype="http://schema.org/WPAdBlock">
                                <label style="margin-left: 2px" class="pub"></label>
                                <div id="div-gpt-ad-1555966766600-3" name="Patrocinio_Banner_Top" platform="FR_Desktop_Lista_resultados" provider="AdManager" size="[640,90]" isapplysegmentation="true" class="AdvertisingContainer" style="width: 640px; height: 92px;"></div>
                            </li>
                        </ul>
                    
                
                    
                    
                        <ul id="rowIndex_4" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_america-det-6248195.aspx'">
                                <div>
                                    <span class="text-photo">
                                        11
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/11/6248195/apartamento-arriendo-cundinamarca-bogota-351483661_m.jpg" alt="Apartamento en Arriendo - Bogotá Gran América" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/11/6248195/apartamento-arriendo-cundinamarca-bogota-351483661_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_america-det-6248195.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/gran_america-det-6248195.aspx" title="Apartamento en Arriendo - Bogotá Gran América">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Gran América</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Centro - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_america-det-6248195.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_america-det-6248195.aspx'">

                                <div>
                                    <meta itemprop="price" content="1850000.0">
                                    $ 1.850.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6248195" class="compare_div" value="6248195" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6248195,'#compare_div_6248195','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6248195" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_5" class="advert  Product_Code_ADD Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/florida_blanca-det-6230621.aspx'">
                                <div>
                                    <span class="text-photo">
                                        6
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/05/6230621/apartamento-arriendo-cundinamarca-bogota-349606716_m.jpg" alt="Apartamento en Arriendo - Bogotá Florida Blanca" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/05/6230621/apartamento-arriendo-cundinamarca-bogota-349606716_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/florida_blanca-det-6230621.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/florida_blanca-det-6230621.aspx" title="Apartamento en Arriendo - Bogotá Florida Blanca">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Florida Blanca</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Occidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/florida_blanca-det-6230621.aspx'">
                                48,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/florida_blanca-det-6230621.aspx'">

                                <div>
                                    <meta itemprop="price" content="900000.0">
                                    $ 900.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6230621" class="compare_div" value="6230621" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6230621,'#compare_div_6230621','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6230621" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_6" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/hayuelos-det-6251107.aspx'">
                                <div>
                                    <span class="text-photo">
                                        20
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6251107/apartamento-arriendo-cundinamarca-bogota-351483158_m.jpg" alt="Apartamento en Arriendo - Bogotá Hayuelos" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6251107/apartamento-arriendo-cundinamarca-bogota-351483158_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/hayuelos-det-6251107.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/hayuelos-det-6251107.aspx" title="Apartamento en Arriendo - Bogotá Hayuelos">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Hayuelos</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Occidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/hayuelos-det-6251107.aspx'">
                                57,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/hayuelos-det-6251107.aspx'">

                                <div>
                                    <meta itemprop="price" content="974000.0">
                                    $ 974.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6251107" class="compare_div" value="6251107" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6251107,'#compare_div_6251107','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6251107" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_7" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-5872681.aspx'">
                                <div>
                                    <span class="text-photo">
                                        22
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/11/10/5872681/apartamento-arriendo-cundinamarca-bogota-351483136_m.jpg" alt="Apartamento en Arriendo - Bogotá Cedritos" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/11/10/5872681/apartamento-arriendo-cundinamarca-bogota-351483136_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-5872681.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/cedritos-det-5872681.aspx" title="Apartamento en Arriendo - Bogotá Cedritos">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Cedritos</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-5872681.aspx'">
                                105,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-5872681.aspx'">

                                <div>
                                    <meta itemprop="price" content="2900000.0">
                                    $ 2.900.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5872681" class="compare_div" value="5872681" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5872681,'#compare_div_5872681','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5872681" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_8" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/parque_central_bavaria-det-6248317.aspx'">
                                <div>
                                    <span class="text-photo">
                                        20
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/11/6248317/apartamento-arriendo-cundinamarca-bogota-351483116_m.jpg" alt="Apartamento en Arriendo - Bogotá Parque Central Bavaria" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/11/6248317/apartamento-arriendo-cundinamarca-bogota-351483116_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/parque_central_bavaria-det-6248317.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/parque_central_bavaria-det-6248317.aspx" title="Apartamento en Arriendo - Bogotá Parque Central Bavaria">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Parque Central Bavaria</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Centro - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/parque_central_bavaria-det-6248317.aspx'">
                                105,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/parque_central_bavaria-det-6248317.aspx'">

                                <div>
                                    <meta itemprop="price" content="3200000.0">
                                    $ 3.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6248317" class="compare_div" value="6248317" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6248317,'#compare_div_6248317','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6248317" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_9" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_reyes_iii_apto_203-det-6077178.aspx'">
                                <div>
                                    <span class="text-photo">
                                        19
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/08/6077178/apartamento-arriendo-cundinamarca-bogota-351482901_m.jpg" alt="Apartamento en Arriendo - Bogotá LOS REYES III APTO 203" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/08/6077178/apartamento-arriendo-cundinamarca-bogota-351482901_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_reyes_iii_apto_203-det-6077178.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/los_reyes_iii_apto_203-det-6077178.aspx" title="Apartamento en Arriendo - Bogotá LOS REYES III APTO 203">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Los Reyes Iii Apto 203</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_reyes_iii_apto_203-det-6077178.aspx'">
                                65,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_reyes_iii_apto_203-det-6077178.aspx'">

                                <div>
                                    <meta itemprop="price" content="1200000.0">
                                    $ 1.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6077178" class="compare_div" value="6077178" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6077178,'#compare_div_6077178','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6077178" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_10" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/garces_navas-det-6251073.aspx'">
                                <div>
                                    <span class="text-photo">
                                        11
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6251073/apartamento-arriendo-cundinamarca-bogota-351482357_m.jpg" alt="Apartamento en Arriendo - Bogotá GARCES NAVAS" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6251073/apartamento-arriendo-cundinamarca-bogota-351482357_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/garces_navas-det-6251073.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/garces_navas-det-6251073.aspx" title="Apartamento en Arriendo - Bogotá GARCES NAVAS">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Garces Navas</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Occidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/garces_navas-det-6251073.aspx'">
                                28,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/garces_navas-det-6251073.aspx'">

                                <div>
                                    <meta itemprop="price" content="615000.0">
                                    $ 615.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6251073" class="compare_div" value="6251073" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6251073,'#compare_div_6251073','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6251073" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                        <ul style="height: auto;" class="parentAdsContainer">
                            <li style="width: 645px; margin: auto; border-bottom: 1px solid #E3DEE2" itemscope="" itemtype="http://schema.org/WPAdBlock">
                                <label style="margin-left: 2px" class="pub"></label>
                                <div id="div-gpt-ad-1555966766600-10" name="Patrocinio_Banner_Bottom" platform="FR_Desktop_Lista_resultados" provider="AdManager" size="[640,90]" isapplysegmentation="true" class="AdvertisingContainer" style="width: 640px; height: 92px;"></div>
                            </li>
                        </ul>
                    
                
                    
                    
                        <ul id="rowIndex_11" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos_usaquen-det-6069822.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/05/6069822/apartamento-arriendo-cundinamarca-bogota-351482189_m.jpg" alt="Apartamento en Arriendo - Bogotá Cedritos Usaquén" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/05/6069822/apartamento-arriendo-cundinamarca-bogota-351482189_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos_usaquen-det-6069822.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/cedritos_usaquen-det-6069822.aspx" title="Apartamento en Arriendo - Bogotá Cedritos Usaquén">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Cedritos Usaquén</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos_usaquen-det-6069822.aspx'">
                                108,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos_usaquen-det-6069822.aspx'">

                                <div>
                                    <meta itemprop="price" content="2540000.0">
                                    $ 2.540.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6069822" class="compare_div" value="6069822" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6069822,'#compare_div_6069822','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6069822" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_12" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba-det-5792716.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/10/5792716/apartamento-arriendo-cundinamarca-bogota-351481275_m.jpg" alt="Apartamento en Arriendo - Bogotá SUBA" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/10/5792716/apartamento-arriendo-cundinamarca-bogota-351481275_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba-det-5792716.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/suba-det-5792716.aspx" title="Apartamento en Arriendo - Bogotá SUBA">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Suba</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba-det-5792716.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba-det-5792716.aspx'">

                                <div>
                                    <meta itemprop="price" content="900000.0">
                                    $ 900.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5792716" class="compare_div" value="5792716" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5792716,'#compare_div_5792716','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5792716" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_13" class="advert  Product_Code_DOV AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6025420.aspx'">
                                <div>
                                    <span class="text-photo">
                                        15
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/21/6025420/apartamento-arriendo-cundinamarca-bogota-351481099_m.jpg" alt="Apartamento en Arriendo - Bogotá Los Rosales" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/21/6025420/apartamento-arriendo-cundinamarca-bogota-351481099_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6025420.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/los_rosales-det-6025420.aspx" title="Apartamento en Arriendo - Bogotá Los Rosales">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Los Rosales</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6025420.aspx'">
                                308,80 m2
                                <br>
                                <div style="margin-top: 12px">5 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/los_rosales-det-6025420.aspx'">

                                <div>
                                    <meta itemprop="price" content="11000000">
                                    $ 11.000.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6025420" class="compare_div" value="6025420" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6025420,'#compare_div_6025420','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6025420" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_14" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_lucia-det-6054219.aspx'">
                                <div>
                                    <span class="text-photo">
                                        23
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/01/6054219/apartamento-arriendo-cundinamarca-bogota-351480414_m.jpg" alt="Apartamento en Arriendo - Bogotá Santa Lucía" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/01/6054219/apartamento-arriendo-cundinamarca-bogota-351480414_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_lucia-det-6054219.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/santa_lucia-det-6054219.aspx" title="Apartamento en Arriendo - Bogotá Santa Lucía">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Santa Lucía</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_lucia-det-6054219.aspx'">
                                70,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_lucia-det-6054219.aspx'">

                                <div>
                                    <meta itemprop="price" content="750000.0">
                                    $ 750.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6054219" class="compare_div" value="6054219" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6054219,'#compare_div_6054219','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6054219" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_15" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/caminos_ibiza_aptoint-det-6138902.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/01/6138902/apartamento-arriendo-cundinamarca-bogota-351480159_m.jpg" alt="Apartamento en Arriendo - Bogotá CAMINOS DE IBIZA APTOINT 4" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/01/6138902/apartamento-arriendo-cundinamarca-bogota-351480159_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/caminos_ibiza_aptoint-det-6138902.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/caminos_ibiza_aptoint-det-6138902.aspx" title="Apartamento en Arriendo - Bogotá CAMINOS DE IBIZA APTOINT 4">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Caminos De Ibiza Aptoint 4</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/caminos_ibiza_aptoint-det-6138902.aspx'">
                                65,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/caminos_ibiza_aptoint-det-6138902.aspx'">

                                <div>
                                    <meta itemprop="price" content="1250000.0">
                                    $ 1.250.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6138902" class="compare_div" value="6138902" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6138902,'#compare_div_6138902','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6138902" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_16" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6121533.aspx'">
                                <div>
                                    <span class="text-photo">
                                        18
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/23/6121533/apartamento-arriendo-cundinamarca-bogota-351479191_m.jpg" alt="Apartamento en Arriendo - Bogotá Santa Bárbara" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/23/6121533/apartamento-arriendo-cundinamarca-bogota-351479191_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6121533.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/santa_barbara-det-6121533.aspx" title="Apartamento en Arriendo - Bogotá Santa Bárbara">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Santa Bárbara</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6121533.aspx'">
                                48,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6121533.aspx'">

                                <div>
                                    <meta itemprop="price" content="1750000.0">
                                    $ 1.750.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6121533" class="compare_div" value="6121533" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6121533,'#compare_div_6121533','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6121533" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_17" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/portal_181_int_apto_302-det-6246127.aspx'">
                                <div>
                                    <span class="text-photo">
                                        15
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/10/6246127/apartamento-arriendo-cundinamarca-bogota-351478287_m.jpg" alt="Apartamento en Arriendo - Bogotá PORTAL 181 INT 8 APTO 302" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/10/6246127/apartamento-arriendo-cundinamarca-bogota-351478287_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/portal_181_int_apto_302-det-6246127.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/portal_181_int_apto_302-det-6246127.aspx" title="Apartamento en Arriendo - Bogotá PORTAL 181 INT 8 APTO 302">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Portal 181 Int 8 Apto 302</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/portal_181_int_apto_302-det-6246127.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/portal_181_int_apto_302-det-6246127.aspx'">

                                <div>
                                    <meta itemprop="price" content="900000.0">
                                    $ 900.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6246127" class="compare_div" value="6246127" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6246127,'#compare_div_6246127','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6246127" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_18" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_britalia-det-6193352.aspx'">
                                <div>
                                    <span class="text-photo">
                                        21
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/18/6193352/apartamento-arriendo-cundinamarca-bogota-351478163_m.jpg" alt="Apartamento en Arriendo - Bogotá Gran Britalia" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/18/6193352/apartamento-arriendo-cundinamarca-bogota-351478163_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_britalia-det-6193352.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/gran_britalia-det-6193352.aspx" title="Apartamento en Arriendo - Bogotá Gran Britalia">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Gran Britalia</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_britalia-det-6193352.aspx'">
                                59,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/gran_britalia-det-6193352.aspx'">

                                <div>
                                    <meta itemprop="price" content="1459000.0">
                                    $ 1.459.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6193352" class="compare_div" value="6193352" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6193352,'#compare_div_6193352','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6193352" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_19" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/villas_del_dorado-det-6251025.aspx'">
                                <div>
                                    <span class="text-photo">
                                        12
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6251025/apartamento-arriendo-cundinamarca-bogota-351477439_m.jpg" alt="Apartamento en Arriendo - Bogotá Villas del Dorado" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6251025/apartamento-arriendo-cundinamarca-bogota-351477439_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/villas_del_dorado-det-6251025.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/villas_del_dorado-det-6251025.aspx" title="Apartamento en Arriendo - Bogotá Villas del Dorado">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Villas Del Dorado</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Occidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/villas_del_dorado-det-6251025.aspx'">
                                40,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/villas_del_dorado-det-6251025.aspx'">

                                <div>
                                    <meta itemprop="price" content="550000.0">
                                    $ 550.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6251025" class="compare_div" value="6251025" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6251025,'#compare_div_6251025','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6251025" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_20" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_delicias_del_carmen-det-5940710.aspx'">
                                <div>
                                    <span class="text-photo">
                                        12
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/12/09/5940710/apartamento-arriendo-cundinamarca-bogota-351482678_m.jpg" alt="Apartamento en Arriendo - Bogotá LAS DELICIAS DEL CARMEN" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/12/09/5940710/apartamento-arriendo-cundinamarca-bogota-351482678_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_delicias_del_carmen-det-5940710.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/las_delicias_del_carmen-det-5940710.aspx" title="Apartamento en Arriendo - Bogotá LAS DELICIAS DEL CARMEN">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Las Delicias Del Carmen</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_delicias_del_carmen-det-5940710.aspx'">
                                50,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_delicias_del_carmen-det-5940710.aspx'">

                                <div>
                                    <meta itemprop="price" content="1200000.0">
                                    $ 1.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5940710" class="compare_div" value="5940710" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5940710,'#compare_div_5940710','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5940710" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <div id="tty-recommender-container" style="height: 250px;">
<style>
    @import url('https://fonts.googleapis.com/css?family=Roboto:400,700');
    #tty-title {
        color: #424242;
        text-align: left;
        font-weight: bold;
        font-size: 17px;
        font-family: 'Lato', 'Roboto', sans-serif;
        padding-bottom: .4em;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    #tty-recommender-container {
        background-color: white;
        font-family: 'Roboto', sans-serif;
        width: 640px;
        height: 1px;
        padding-bottom: .4em;
        line-height: 100%;
        overflow: hidden;
        margin-bottom: 1.5em;
    }
    #tty-recs-container {
        margin-top: 10px;
        height: 240px;
        margin-left: 25px;
        overflow: hidden;
        position: absolute;
        box-sizing:border-box;
    }

    #tty-wrapper {
        width: 100%;
        height: 240px;
        position: relative;
    }

    .glide__track {
        width: 590px;
        height: 200px;
        box-sizing:border-box;
    }

    .glide_slides {
        height: 200px;
    }

    .glide__slide {
        width: 0;
        display: inline-block;
        text-decoration: none;
        color: #7C8086;
        float: left;
        text-align: center;
    }

     a.tty-rec {
        text-decoration: none;
        color: #7C8086;
    }
    #tty-rec__img {
        width: 90%;
        margin: auto;
        height: 130px;
    }
    #tty-rec__info {
        height: 64px;
        margin: auto;
        padding-top: 5px;
        text-align: center;
        overflow: hidden;
    }
    .tty-rec__title {
        height: 20px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 14px;
        color: #004891;
    }
    #tty-rec__price{
        font-size: 13px;
        font-weight: bold;
    }
    .tty-arrow {
        color: #bbb;
        width: 20px; height: 160px;
        background-color: white;
        padding-top: 75px;
        display: inline-block;
        position: absolute;
    }

    #tty-next{
        padding-left: 5px;
        right: 0;
    }

    #tty-prev{
        padding-right: 5px;
    }

    ul.glide_slides {
        padding-inline-start: 0px;
        line-height: 18px;

    }

    @media (max-width: 650px) {
        #tty-title { padding: 5px 5px .4em 5px;}
        #tty-recommender-container {
            width:100vw;
        }
        #tty-recs-container { width: 86%; left:7%; margin-left: 0;}
        .glide__track { width: 100%; }
        #tty-next { padding-right: 4px;}
        #tty-prev { padding-left: 4px;}
    }

    
    #tty-recommender-container {
        padding: 2em .5em 2em .5em;
        margin-left: -5px;
        margin-bottom: 0;
        border-bottom: 1px solid #F0EDEF;
    }

    ul.glide_slides {
        padding-inline-start: 0px;
        line-height: 18px !important;
    }

    .Grid .content-grid .contentGrid ul.glide_slides {
        line-height: 18px !important;
        border: none !important;
    }

    .Grid .content-grid .contentGrid ul.glide_slides:hover{
        border: none !important;
        box-shadow: none !important;
    }



</style>
<div id="tty-title" style="margin-top:1em;">Inmuebles relacionados a tu búsqueda</div>
<div id="tty-wrapper">
    <div id="tty-prev" class="tty-arrow prev" data-glide-dir="|<">
        <svg width="20px" height="20px" aria-hidden="true" focusable="false" data-prefix="fal" data-icon="arrow-circle-left" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="svg-inline--fa fa-arrow-circle-left fa-w-16 fa-2x"><path fill="currentColor" d="M504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zM256 472c-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216 0 118.7-96.1 216-216 216zm-12.5-92.5l-115.1-115c-4.7-4.7-4.7-12.3 0-17l115.1-115c4.7-4.7 12.3-4.7 17 0l6.9 6.9c4.7 4.7 4.7 12.5-.2 17.1L181.7 239H372c6.6 0 12 5.4 12 12v10c0 6.6-5.4 12-12 12H181.7l85.6 82.5c4.8 4.7 4.9 12.4.2 17.1l-6.9 6.9c-4.8 4.7-12.4 4.7-17.1 0z" class=""></path></svg>
    </div>
    <div id="tty-recs-container" class="glide glide--ltr glide--carousel glide--swipeable">
        <div class="glide__track" data-glide-el="track">
            <ul class="glide_slides" style="transition: transform 0ms cubic-bezier(0.165, 0.84, 0.44, 1) 0s; width: 3600px; transform: translate3d(-900px, 0px, 0px);">
            
                <li class="glide__slide glide__slide--clone" style="width: 140px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6236595?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356627928419804%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6236595%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=665975420f77ddf370885349d58fe177" title="CALABLANCA BARÚ Otros municipios" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356627928419804&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6236595/proyecto-nuevo-venta-bolivar-otros-municipios-350269776.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">CALABLANCA BARÚ</div>
                                <div class="tty-rec__title">Otros municipios</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $2.232.000.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5980402?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356506478235315%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5980402%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=f6def49be4d9413ab5beae43a6ba2a9f" title="TRES COLINAS Armenia" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356506478235315&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/12/30/5980402/proyecto-nuevo-venta-quindio-armenia-347074839.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">TRES COLINAS</div>
                                <div class="tty-rec__title">Armenia</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $570.000.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5928270?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356611644934334%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5928270%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=425cd848332d1f925c50e89ce14061fc" title="Ivory Apartamentos Cerritos Pereira Pereira" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356611644934334&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/12/02/5928270/proyecto-nuevo-venta-risaralda-pereira-350853343.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Ivory Apartamentos Cerritos Pereira</div>
                                <div class="tty-rec__title">Pereira</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $471.117.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4640864?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356881222736588%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4640864%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=a57889eeaf5c8aaa68489f8ba230ca8f" title="VERDI CASAS Jamundí" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356881222736588&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/06/04/4640864/proyecto-nuevo-venta-valle-del-cauca-jamundi-343445365.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">VERDI CASAS</div>
                                <div class="tty-rec__title">Jamundí</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $163.000.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5502257?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356932021075101%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5502257%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=38f0e6a0d66f444870bfb4d827800b84" title="Ángeles Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356932021075101&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/06/15/5502257/proyecto-nuevo-venta-cundinamarca-bogota-346404193.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Ángeles</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $186.101.600
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6092357?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356653050444449%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6092357%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=6191eb9d87d2da45f2d009a351fc42f6" title="Hacienda Los Lagos Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356653050444449&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/12/6092357/proyecto-nuevo-venta-cundinamarca-bogota-342139980.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Hacienda Los Lagos</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $368.000.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--active" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5121293?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356413295980415%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5121293%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=6feccf0b617d4fc7946407f28bbd3087" title="VALVANERA VERDE Chía" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356413295980415&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/11/29/5121293/proyecto-nuevo-venta-cundinamarca-chia-349785027.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">VALVANERA VERDE</div>
                                <div class="tty-rec__title">Chía</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $456.600.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/964547?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356155776677925%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D964547%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=22d7adf05f97bfcf8327a90dec779977" title="PARQUE RESIDENCIAL LOS CEDROS Armenia" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356155776677925&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2013/07/15/964547/proyecto-nuevo-venta-quindio-armenia-350226033.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">PARQUE RESIDENCIAL LOS CEDROS</div>
                                <div class="tty-rec__title">Armenia</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $150.000.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6234917?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356771451460267%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6234917%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=436988f5e50a07a8f1205731fb7eea70" title="El Rosal Medellín" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356771451460267&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/06/6234917/proyecto-nuevo-venta-antioquia-medellin-350693101.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">El Rosal</div>
                                <div class="tty-rec__title">Medellín</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $322.630.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6233842?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356822952013500%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6233842%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=d3302d2373752f2e14d159aa5a0b535b" title="NUEVA COLINA  TURO Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356822952013500&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/06/6233842/proyecto-nuevo-venta-cundinamarca-bogota-349926830.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">NUEVA COLINA  TURO</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $437.061.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5682304?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356431021988505%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5682304%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=4b820d8a4f0e80f047704908929287eb" title="GIRASOLES Cajicá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356431021988505&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/08/31/5682304/proyecto-nuevo-venta-cundinamarca-cajica-349914855.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">GIRASOLES</div>
                                <div class="tty-rec__title">Cajicá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $284.772.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/1020566?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356192150755284%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D1020566%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=68f084703dd62c403f241b0ff006bb97" title="Mediterráneo Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356192150755284&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2013/10/16/1020566/proyecto-nuevo-venta-cundinamarca-bogota-345812356.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Mediterráneo</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $391.539.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6236595?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356627928419804%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6236595%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=665975420f77ddf370885349d58fe177" title="CALABLANCA BARÚ Otros municipios" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356627928419804&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6236595/proyecto-nuevo-venta-bolivar-otros-municipios-350269776.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">CALABLANCA BARÚ</div>
                                <div class="tty-rec__title">Otros municipios</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $2.232.000.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5980402?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356506478235315%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5980402%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=f6def49be4d9413ab5beae43a6ba2a9f" title="TRES COLINAS Armenia" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356506478235315&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/12/30/5980402/proyecto-nuevo-venta-quindio-armenia-347074839.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">TRES COLINAS</div>
                                <div class="tty-rec__title">Armenia</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $570.000.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5928270?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356611644934334%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5928270%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=425cd848332d1f925c50e89ce14061fc" title="Ivory Apartamentos Cerritos Pereira Pereira" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356611644934334&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/12/02/5928270/proyecto-nuevo-venta-risaralda-pereira-350853343.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Ivory Apartamentos Cerritos Pereira</div>
                                <div class="tty-rec__title">Pereira</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $471.117.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4640864?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356881222736588%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4640864%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=a57889eeaf5c8aaa68489f8ba230ca8f" title="VERDI CASAS Jamundí" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356881222736588&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/06/04/4640864/proyecto-nuevo-venta-valle-del-cauca-jamundi-343445365.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">VERDI CASAS</div>
                                <div class="tty-rec__title">Jamundí</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $163.000.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5502257?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356932021075101%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5502257%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=38f0e6a0d66f444870bfb4d827800b84" title="Ángeles Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356932021075101&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/06/15/5502257/proyecto-nuevo-venta-cundinamarca-bogota-346404193.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Ángeles</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $186.101.600
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6092357?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356653050444449%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6092357%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=6191eb9d87d2da45f2d009a351fc42f6" title="Hacienda Los Lagos Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356653050444449&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/12/6092357/proyecto-nuevo-venta-cundinamarca-bogota-342139980.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Hacienda Los Lagos</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $368.000.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
            <li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5121293?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356413295980415%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5121293%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=6feccf0b617d4fc7946407f28bbd3087" title="VALVANERA VERDE Chía" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356413295980415&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/11/29/5121293/proyecto-nuevo-venta-cundinamarca-chia-349785027.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">VALVANERA VERDE</div>
                                <div class="tty-rec__title">Chía</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $456.600.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/964547?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356155776677925%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D964547%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=22d7adf05f97bfcf8327a90dec779977" title="PARQUE RESIDENCIAL LOS CEDROS Armenia" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356155776677925&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2013/07/15/964547/proyecto-nuevo-venta-quindio-armenia-350226033.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">PARQUE RESIDENCIAL LOS CEDROS</div>
                                <div class="tty-rec__title">Armenia</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $150.000.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6234917?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356771451460267%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6234917%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=436988f5e50a07a8f1205731fb7eea70" title="El Rosal Medellín" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356771451460267&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/06/6234917/proyecto-nuevo-venta-antioquia-medellin-350693101.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">El Rosal</div>
                                <div class="tty-rec__title">Medellín</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $322.630.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6233842?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356822952013500%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6233842%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=d3302d2373752f2e14d159aa5a0b535b" title="NUEVA COLINA  TURO Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356822952013500&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/06/6233842/proyecto-nuevo-venta-cundinamarca-bogota-349926830.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">NUEVA COLINA  TURO</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $437.061.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5682304?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356431021988505%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5682304%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=4b820d8a4f0e80f047704908929287eb" title="GIRASOLES Cajicá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356431021988505&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/08/31/5682304/proyecto-nuevo-venta-cundinamarca-cajica-349914855.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">GIRASOLES</div>
                                <div class="tty-rec__title">Cajicá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $284.772.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/1020566?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356192150755284%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D1020566%26trackuity%3D2&amp;user=cookie-170072957071895926&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-170072957071895926%3A1618263088.8323019&amp;recommend_id=U5YctWrn2Hd9uNARUYcSK8&amp;tty_param_h=68f084703dd62c403f241b0ff006bb97" title="Mediterráneo Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356192150755284&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2013/10/16/1020566/proyecto-nuevo-venta-cundinamarca-bogota-345812356.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Mediterráneo</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $391.539.000
                                </div>
                            
                        </div>
                    </a>
                </li></ul>
        </div>
    </div>
    <div id="tty-next" class="tty-arrow next">
        <svg width="20px" height="20px" aria-hidden="true" focusable="false" data-prefix="fal" data-icon="arrow-circle-right" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="svg-inline--fa fa-arrow-circle-right fa-w-16 fa-2x"><path fill="currentColor" d="M8 256c0 137 111 248 248 248s248-111 248-248S393 8 256 8 8 119 8 256zM256 40c118.7 0 216 96.1 216 216 0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216zm12.5 92.5l115.1 115c4.7 4.7 4.7 12.3 0 17l-115.1 115c-4.7 4.7-12.3 4.7-17 0l-6.9-6.9c-4.7-4.7-4.7-12.5.2-17.1l85.6-82.5H140c-6.6 0-12-5.4-12-12v-10c0-6.6 5.4-12 12-12h190.3l-85.6-82.5c-4.8-4.7-4.9-12.4-.2-17.1l6.9-6.9c4.8-4.7 12.4-4.7 17.1 0z" class=""></path></svg>
    </div>
</div>
</div><ul id="rowIndex_21" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/kennedy_central-det-6214662.aspx'">
                                <div>
                                    <span class="text-photo">
                                        30
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/27/6214662/apartamento-arriendo-cundinamarca-bogota-351477138_m.jpg" alt="Apartamento en Arriendo - Bogotá Kennedy Central" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/27/6214662/apartamento-arriendo-cundinamarca-bogota-351477138_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/kennedy_central-det-6214662.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/kennedy_central-det-6214662.aspx" title="Apartamento en Arriendo - Bogotá Kennedy Central">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Kennedy Central</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Occidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/kennedy_central-det-6214662.aspx'">
                                68,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/kennedy_central-det-6214662.aspx'">

                                <div>
                                    <meta itemprop="price" content="750000.0">
                                    $ 750.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6214662" class="compare_div" value="6214662" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6214662,'#compare_div_6214662','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6214662" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_22" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/niza-det-6224884.aspx'">
                                <div>
                                    <span class="text-photo">
                                        18
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/31/6224884/apartamento-arriendo-cundinamarca-bogota-351476451_m.jpg" alt="Apartamento en Arriendo - Bogotá Niza" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/31/6224884/apartamento-arriendo-cundinamarca-bogota-351476451_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/niza-det-6224884.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/niza-det-6224884.aspx" title="Apartamento en Arriendo - Bogotá Niza">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Niza</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/niza-det-6224884.aspx'">
                                37,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/niza-det-6224884.aspx'">

                                <div>
                                    <meta itemprop="price" content="1090000.0">
                                    $ 1.090.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6224884" class="compare_div" value="6224884" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6224884,'#compare_div_6224884','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6224884" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_23" class="advert  Product_Code_ADE AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedro_golf-det-6245396.aspx'">
                                <div>
                                    <span class="text-photo">
                                        10
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/10/6245396/apartamento-arriendo-cundinamarca-bogota-350920980_m.jpg" alt="Apartamento en Arriendo - Bogotá Cedro Golf" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/10/6245396/apartamento-arriendo-cundinamarca-bogota-350920980_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedro_golf-det-6245396.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/cedro_golf-det-6245396.aspx" title="Apartamento en Arriendo - Bogotá Cedro Golf">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Cedro Golf</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedro_golf-det-6245396.aspx'">
                                140,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedro_golf-det-6245396.aspx'">

                                <div>
                                    <meta itemprop="price" content="2500000.0">
                                    $ 2.500.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6245396" class="compare_div" value="6245396" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6245396,'#compare_div_6245396','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6245396" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_24" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_margaritas-det-6240103.aspx'">
                                <div>
                                    <span class="text-photo">
                                        22
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/08/6240103/apartamento-arriendo-cundinamarca-bogota-351475964_m.jpg" alt="Apartamento en Arriendo - Bogotá Las Margaritas" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/08/6240103/apartamento-arriendo-cundinamarca-bogota-351475964_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_margaritas-det-6240103.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/las_margaritas-det-6240103.aspx" title="Apartamento en Arriendo - Bogotá Las Margaritas">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Las Margaritas</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_margaritas-det-6240103.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/las_margaritas-det-6240103.aspx'">

                                <div>
                                    <meta itemprop="price" content="1300000.0">
                                    $ 1.300.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6240103" class="compare_div" value="6240103" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6240103,'#compare_div_6240103','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6240103" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_25" class="advert  Product_Code_ADE Product_Code_TURB Product_Code_TURB Product_Code_TURB AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-6241322.aspx'">
                                <div>
                                    <span class="text-photo">
                                        14
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/08/6241322/apartamento-arriendo-cundinamarca-bogota-350576028_m.jpg" alt="Apartamento en Arriendo - Bogotá Pasadena" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/08/6241322/apartamento-arriendo-cundinamarca-bogota-350576028_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-6241322.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/pasadena-det-6241322.aspx" title="Apartamento en Arriendo - Bogotá Pasadena">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Pasadena</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-6241322.aspx'">
                                113,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-6241322.aspx'">

                                <div>
                                    <meta itemprop="price" content="2850000.0">
                                    $ 2.850.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6241322" class="compare_div" value="6241322" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6241322,'#compare_div_6241322','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6241322" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_26" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bella_suiza-det-6169113.aspx'">
                                <div>
                                    <span class="text-photo">
                                        16
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/10/6169113/apartamento-arriendo-cundinamarca-bogota-351474159_m.jpg" alt="Apartamento en Arriendo - Bogotá Bella Suiza" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/10/6169113/apartamento-arriendo-cundinamarca-bogota-351474159_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bella_suiza-det-6169113.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/bella_suiza-det-6169113.aspx" title="Apartamento en Arriendo - Bogotá Bella Suiza">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Bella Suiza</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bella_suiza-det-6169113.aspx'">
                                67,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bella_suiza-det-6169113.aspx'">

                                <div>
                                    <meta itemprop="price" content="2100000.0">
                                    $ 2.100.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6169113" class="compare_div" value="6169113" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6169113,'#compare_div_6169113','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6169113" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_27" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/nueva_autopista-det-6250991.aspx'">
                                <div>
                                    <span class="text-photo">
                                        6
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250991/apartamento-arriendo-cundinamarca-bogota-351473744_m.jpg" alt="Apartamento en Arriendo - Bogotá Nueva Autopista" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250991/apartamento-arriendo-cundinamarca-bogota-351473744_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/nueva_autopista-det-6250991.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/nueva_autopista-det-6250991.aspx" title="Apartamento en Arriendo - Bogotá Nueva Autopista">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Nueva Autopista</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/nueva_autopista-det-6250991.aspx'">
                                85,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/nueva_autopista-det-6250991.aspx'">

                                <div>
                                    <meta itemprop="price" content="2305000.0">
                                    $ 2.305.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6250991" class="compare_div" value="6250991" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6250991,'#compare_div_6250991','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6250991" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_28" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/local_barrio_venecia_diagonal_sur-det-6246153.aspx'">
                                <div>
                                    <span class="text-photo">
                                        3
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/10/6246153/apartamento-arriendo-cundinamarca-bogota-351471160_m.jpg" alt="Apartamento en Arriendo - Bogotá LOCAL BARRIO VENECIA DIAGONAL 51 SUR 53 B 38" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/10/6246153/apartamento-arriendo-cundinamarca-bogota-351471160_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/local_barrio_venecia_diagonal_sur-det-6246153.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/local_barrio_venecia_diagonal_sur-det-6246153.aspx" title="Apartamento en Arriendo - Bogotá LOCAL BARRIO VENECIA DIAGONAL 51 SUR 53 B 38">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Local Barrio Venecia Diagonal 51 Sur 53 B 38</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/local_barrio_venecia_diagonal_sur-det-6246153.aspx'">
                                21,00 m2
                                <br>
                                <div style="margin-top: 12px">---</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/local_barrio_venecia_diagonal_sur-det-6246153.aspx'">

                                <div>
                                    <meta itemprop="price" content="750000.0">
                                    $ 750.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6246153" class="compare_div" value="6246153" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6246153,'#compare_div_6246153','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6246153" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_29" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-6250936.aspx'">
                                <div>
                                    <span class="text-photo">
                                        9
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250936/apartamento-arriendo-cundinamarca-bogota-351462830_m.jpg" alt="Apartamento en Arriendo - Bogotá Santa Bárbara Oriental" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250936/apartamento-arriendo-cundinamarca-bogota-351462830_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-6250936.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-6250936.aspx" title="Apartamento en Arriendo - Bogotá Santa Bárbara Oriental">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Santa Bárbara Oriental</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-6250936.aspx'">
                                51,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-6250936.aspx'">

                                <div>
                                    <meta itemprop="price" content="1850000.0">
                                    $ 1.850.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6250936" class="compare_div" value="6250936" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6250936,'#compare_div_6250936','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6250936" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_30" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bosa-det-6250932.aspx'">
                                <div>
                                    <span class="text-photo">
                                        9
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250932/apartamento-arriendo-cundinamarca-bogota-351454948_m.jpg" alt="Apartamento en Arriendo - Bogotá Bosa" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250932/apartamento-arriendo-cundinamarca-bogota-351454948_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bosa-det-6250932.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/bosa-det-6250932.aspx" title="Apartamento en Arriendo - Bogotá Bosa">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Bosa</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bosa-det-6250932.aspx'">
                                41,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/bosa-det-6250932.aspx'">

                                <div>
                                    <meta itemprop="price" content="730000.0">
                                    $ 730.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6250932" class="compare_div" value="6250932" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6250932,'#compare_div_6250932','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6250932" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_31" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/espanola-det-6250919.aspx'">
                                <div>
                                    <span class="text-photo">
                                        8
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250919/apartamento-arriendo-cundinamarca-bogota-351467580_m.jpg" alt="Apartamento en Arriendo - Bogotá La Española" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250919/apartamento-arriendo-cundinamarca-bogota-351467580_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/espanola-det-6250919.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/espanola-det-6250919.aspx" title="Apartamento en Arriendo - Bogotá La Española">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Española</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/espanola-det-6250919.aspx'">
                                45,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/espanola-det-6250919.aspx'">

                                <div>
                                    <meta itemprop="price" content="950000.0">
                                    $ 950.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6250919" class="compare_div" value="6250919" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6250919,'#compare_div_6250919','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6250919" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_32" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6250929.aspx'">
                                <div>
                                    <span class="text-photo">
                                        7
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250929/apartamento-arriendo-cundinamarca-bogota-351463621_m.jpg" alt="Apartamento en Arriendo - Bogotá Cedritos" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250929/apartamento-arriendo-cundinamarca-bogota-351463621_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6250929.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/cedritos-det-6250929.aspx" title="Apartamento en Arriendo - Bogotá Cedritos">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Cedritos</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6250929.aspx'">
                                72,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6250929.aspx'">

                                <div>
                                    <meta itemprop="price" content="1875000.0">
                                    $ 1.875.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6250929" class="compare_div" value="6250929" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6250929,'#compare_div_6250929','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6250929" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_33" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_luis_patios-det-6250922.aspx'">
                                <div>
                                    <span class="text-photo">
                                        12
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250922/apartamento-arriendo-cundinamarca-bogota-351440474_m.jpg" alt="Apartamento en Arriendo - Bogotá San Luis  Patios" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/12/6250922/apartamento-arriendo-cundinamarca-bogota-351440474_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_luis_patios-det-6250922.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/san_luis_patios-det-6250922.aspx" title="Apartamento en Arriendo - Bogotá San Luis  Patios">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en San Luis  Patios</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_luis_patios-det-6250922.aspx'">
                                1.500,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_luis_patios-det-6250922.aspx'">

                                <div>
                                    <meta itemprop="price" content="1100000.0">
                                    $ 1.100.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6250922" class="compare_div" value="6250922" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6250922,'#compare_div_6250922','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6250922" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
        </div>
        <div class="pagination">
            <div id="divPaginator">
                
                        
                        <a title="Ir a la pagina 1" onclick="return Grid_PageChanged('1')" href="/apartamentos/arriendo/bogota/" class="link-pag selected">
                            1</a>
                    
                        
                        <a title="Ir a la pagina 2" onclick="return Grid_PageChanged('2')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            2</a>
                    
                        
                        <a title="Ir a la pagina 3" onclick="return Grid_PageChanged('3')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            3</a>
                    
                        
                        <a title="Ir a la pagina 4" onclick="return Grid_PageChanged('4')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            4</a>
                    
                        
                        <a title="Ir a la pagina 5" onclick="return Grid_PageChanged('5')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            5</a>
                    
                        
                        <a title="Ir a la pagina 6" onclick="return Grid_PageChanged('6')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            6</a>
                    
                        
                        <a title="Ir a la pagina Siguiente" onclick="return Grid_PageChanged('2')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            Siguiente</a>
                    
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $("img.lazy").lazyload({ effect: "fadeIn", threshold: 200 });
    console.timeEnd('Test');

    var lstAdverts = [{data:[{AdvertId:"6237104",Title:"Apartamento en Arriendo - Bogotá Chicó Navarra",Address:"CALLE 103 A  19 A -53",PhotoUrl:"2021/04/07/6237104/apartamento-arriendo-cundinamarca-bogota-350183794_m.jpg",ClientName:"Consuelo de la Vega y Cia",ClientId:"269624",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"5330804",Title:"Apartamento en Arriendo - Bogotá Chapinero Alto",Address:"Carrera 2  62 A 25",PhotoUrl:"2020/02/21/5330804/apartamento-arriendo-cundinamarca-bogota-345248733_m.jpg",ClientName:"ALFONSO  SAENZ CUELLAR",ClientId:"385784",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6250131",Title:"Apartamento en Arriendo - Bogotá Los Rosales",Address:"TRANS 1 ESTE  68 - 50",PhotoUrl:"2021/04/12/6250131/apartamento-arriendo-cundinamarca-bogota-351356553_m.jpg",ClientName:"Gestiones Inmobiliarias",ClientId:"102693",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6027884",Title:"Apartamento en Arriendo - Bogotá Teusaquillo",Address:"Calle 28a16a-22",PhotoUrl:"2021/01/22/6027884/apartamento-arriendo-cundinamarca-bogota-330517855_m.jpg",ClientName:"Diana Sanchez",ClientId:"78564",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6248195",Title:"Apartamento en Arriendo - Bogotá Gran América",Address:"Carrera 31A # 25 - 25",PhotoUrl:"2021/04/11/6248195/apartamento-arriendo-cundinamarca-bogota-351483661_m.jpg",ClientName:"Gama Consulting SAS",ClientId:"416168",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6230621",Title:"Apartamento en Arriendo - Bogotá Florida Blanca",Address:"CALLE 69 A   93 A -35",PhotoUrl:"2021/04/05/6230621/apartamento-arriendo-cundinamarca-bogota-349606716_m.jpg",ClientName:"andrea Penagos",ClientId:"2080411",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6251107",Title:"Apartamento en Arriendo - Bogotá Hayuelos",Address:"Carrera 96 F  22K - 40",PhotoUrl:"2021/04/12/6251107/apartamento-arriendo-cundinamarca-bogota-351483158_m.jpg",ClientName:"Martha Corredor",ClientId:"366410",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"5872681",Title:"Apartamento en Arriendo - Bogotá Cedritos",Address:"Calle 145 No. 7F-09",PhotoUrl:"2020/11/10/5872681/apartamento-arriendo-cundinamarca-bogota-351483136_m.jpg",ClientName:"Lozano Villegas Y Cia S en C",ClientId:"1758391",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6248317",Title:"Apartamento en Arriendo - Bogotá Parque Central Bavaria",Address:"Calle 31 # 13A - 51",PhotoUrl:"2021/04/11/6248317/apartamento-arriendo-cundinamarca-bogota-351483116_m.jpg",ClientName:"Gama Consulting SAS",ClientId:"416168",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6077178",Title:"Apartamento en Arriendo - Bogotá LOS REYES III APTO 203",Address:"Calle 162 # 18A - 88",PhotoUrl:"2021/02/08/6077178/apartamento-arriendo-cundinamarca-bogota-351482901_m.jpg",ClientName:"Inmobiliaria Gonzalez Amaya Ltda",ClientId:"301537",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6251073",Title:"Apartamento en Arriendo - Bogotá GARCES NAVAS",Address:"CALLE 75   105D- 04",PhotoUrl:"2021/04/12/6251073/apartamento-arriendo-cundinamarca-bogota-351482357_m.jpg",ClientName:"Inmobiliaria TuCasa.com",ClientId:"213602",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6069822",Title:"Apartamento en Arriendo - Bogotá Cedritos Usaquén",Address:"Calle 144 # 9 - 30 Apto 504 Conjunto Residencial Scala 27 Garaje 38 Deposito 40",PhotoUrl:"2021/02/05/6069822/apartamento-arriendo-cundinamarca-bogota-351482189_m.jpg",ClientName:"Orjuela & Cía Ltda - Arriendos",ClientId:"28762",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"5792716",Title:"Apartamento en Arriendo - Bogotá SUBA",Address:"CARRERA 111A   148- 88",PhotoUrl:"2020/10/10/5792716/apartamento-arriendo-cundinamarca-bogota-351481275_m.jpg",ClientName:"Rafael Angel H y Cia SAS.",ClientId:"29010",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6025420",Title:"Apartamento en Arriendo - Bogotá Los Rosales",Address:"Carrera 1a 76a-36, Bogotá",PhotoUrl:"2021/01/21/6025420/apartamento-arriendo-cundinamarca-bogota-351481099_m.jpg",ClientName:"Inmobiliaria Piedad Mejia SAS",ClientId:"29283",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6054219",Title:"Apartamento en Arriendo - Bogotá Santa Lucía",Address:"Calle 42 A sur No. 19-11",PhotoUrl:"2021/02/01/6054219/apartamento-arriendo-cundinamarca-bogota-351480414_m.jpg",ClientName:"Inmobiliaria Colombia Ltda",ClientId:"191905",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6138902",Title:"Apartamento en Arriendo - Bogotá CAMINOS DE IBIZA APTOINT 4",Address:"Carrera 13B # 161 - 50",PhotoUrl:"2021/03/01/6138902/apartamento-arriendo-cundinamarca-bogota-351480159_m.jpg",ClientName:"Inmobiliaria Gonzalez Amaya Ltda",ClientId:"301537",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6121533",Title:"Apartamento en Arriendo - Bogotá Santa Bárbara",Address:"Carrera 17A 122-62",PhotoUrl:"2021/02/23/6121533/apartamento-arriendo-cundinamarca-bogota-351479191_m.jpg",ClientName:"METRO 51 INMOBILIARIA",ClientId:"2897502",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6246127",Title:"Apartamento en Arriendo - Bogotá PORTAL 181 INT 8 APTO 302",Address:"Calle 181 # 17B - 47",PhotoUrl:"2021/04/10/6246127/apartamento-arriendo-cundinamarca-bogota-351478287_m.jpg",ClientName:"Inmobiliaria Gonzalez Amaya Ltda",ClientId:"301537",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6193352",Title:"Apartamento en Arriendo - Bogotá Gran Britalia",Address:"Carrera 56 # 167A - 03 Apto 908",PhotoUrl:"2021/03/18/6193352/apartamento-arriendo-cundinamarca-bogota-351478163_m.jpg",ClientName:"Uraki Inmobiliaria S.A.S",ClientId:"52671",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6251025",Title:"Apartamento en Arriendo - Bogotá Villas del Dorado",Address:"Carrera 110 D # 64 C ",PhotoUrl:"2021/04/12/6251025/apartamento-arriendo-cundinamarca-bogota-351477439_m.jpg",ClientName:"Yesid  Sánchez ",ClientId:"353068",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"5940710",Title:"Apartamento en Arriendo - Bogotá LAS DELICIAS DEL CARMEN",Address:"CALLE 127C   3- 81",PhotoUrl:"2020/12/09/5940710/apartamento-arriendo-cundinamarca-bogota-351482678_m.jpg",ClientName:"Vasquez & Vasquez sas",ClientId:"29298",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6214662",Title:"Apartamento en Arriendo - Bogotá Kennedy Central",Address:"Calle 35 A sur No. 78 D-29",PhotoUrl:"2021/03/27/6214662/apartamento-arriendo-cundinamarca-bogota-351477138_m.jpg",ClientName:"Inmobiliaria Colombia Ltda",ClientId:"191905",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6224884",Title:"Apartamento en Arriendo - Bogotá Niza",Address:"Calle 127 # 58 - 45 Apto 508 t 2",PhotoUrl:"2021/03/31/6224884/apartamento-arriendo-cundinamarca-bogota-351476451_m.jpg",ClientName:"Espacio Inmobiliario & Cia Ltda.",ClientId:"86553",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6245396",Title:"Apartamento en Arriendo - Bogotá Cedro Golf",Address:"Cra 8A 151 83",PhotoUrl:"2021/04/10/6245396/apartamento-arriendo-cundinamarca-bogota-350920980_m.jpg",ClientName:"Lina Atehortua",ClientId:"242577",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6240103",Title:"Apartamento en Arriendo - Bogotá Las Margaritas",Address:"CALLE 146  19 14",PhotoUrl:"2021/04/08/6240103/apartamento-arriendo-cundinamarca-bogota-351475964_m.jpg",ClientName:"Cortes García Inmobiliaria",ClientId:"129794",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6241322",Title:"Apartamento en Arriendo - Bogotá Pasadena",Address:"Cr 50 104b-68",PhotoUrl:"2021/04/08/6241322/apartamento-arriendo-cundinamarca-bogota-350576028_m.jpg",ClientName:"Juan Sebastian Rodriguez Casas",ClientId:"1849255",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6169113",Title:"Apartamento en Arriendo - Bogotá Bella Suiza",Address:"carrera 7B No 127A-57",PhotoUrl:"2021/03/10/6169113/apartamento-arriendo-cundinamarca-bogota-351474159_m.jpg",ClientName:"Caceres y Asociados Inmobiliaria S.A.S.",ClientId:"100151",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6250991",Title:"Apartamento en Arriendo - Bogotá Nueva Autopista",Address:"CALLE 140  20",PhotoUrl:"2021/04/12/6250991/apartamento-arriendo-cundinamarca-bogota-351473744_m.jpg",ClientName:"PATRICIA MORENO      ALIANZAS INMOBILIARIAS",ClientId:"3030581",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6246153",Title:"Apartamento en Arriendo - Bogotá LOCAL BARRIO VENECIA DIAGONAL 51 SUR 53 B 38",Address:"Diagonal 51 SUR # 53B - 38",PhotoUrl:"2021/04/10/6246153/apartamento-arriendo-cundinamarca-bogota-351471160_m.jpg",ClientName:"Inmobiliaria Gonzalez Amaya Ltda",ClientId:"301537",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6250936",Title:"Apartamento en Arriendo - Bogotá Santa Bárbara Oriental",Address:"Calle 123  7b - 67",PhotoUrl:"2021/04/12/6250936/apartamento-arriendo-cundinamarca-bogota-351462830_m.jpg",ClientName:"Ruben Ramirez",ClientId:"3077399",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6250932",Title:"Apartamento en Arriendo - Bogotá Bosa",Address:"Calle 59C sur  88H-15",PhotoUrl:"2021/04/12/6250932/apartamento-arriendo-cundinamarca-bogota-351454948_m.jpg",ClientName:"Cristian Camilo Jimenez Lebro",ClientId:"2150016",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6250919",Title:"Apartamento en Arriendo - Bogotá La Española",Address:"diagonal 83 76-39",PhotoUrl:"2021/04/12/6250919/apartamento-arriendo-cundinamarca-bogota-351467580_m.jpg",ClientName:"CARLOS BOHORQUEZ",ClientId:"2701830",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6250929",Title:"Apartamento en Arriendo - Bogotá Cedritos",Address:"calle 144#12 ",PhotoUrl:"2021/04/12/6250929/apartamento-arriendo-cundinamarca-bogota-351463621_m.jpg",ClientName:"pedro  Armando",ClientId:"3068297",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6250922",Title:"Apartamento en Arriendo - Bogotá San Luis  Patios",Address:"CALLE 100 B N 3 16 ESTE ",PhotoUrl:"2021/04/12/6250922/apartamento-arriendo-cundinamarca-bogota-351440474_m.jpg",ClientName:"luz angela  GARIBELLO",ClientId:"646064",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"}],"info":""}][0];
    var lstFacets = "";

    function Grid_OrderBy(orderby) {
        trackingAlreadyCalled = false;
        sfFind.Order = orderby;
        sfFind.PageNumber = 1;
        return Find(sfFind, null, "ORDER");
    }

    //llamado carousel
    $(document).ready(function () {
        if (!toBoolean('False'))
            return;

        var isTag = window.xtsd != undefined;
        var timeExecution = !isTag ? 400 : 0;
        var maxTime = 10000;//Se define tiempo maximo de espera 
        //se crea setInterval para solicionar problemas cuando la variable window.xtsd no acanza a definirse
        var id = setInterval(function () {
            if (window.xtsd != undefined || timeExecution >= maxTime) {
                clearInterval(id);
                loadCarousel("30|1||||2||8|||67|3630001|||||||||||||||||||1||category1 desc||||||||", "AV")
            }
            if (isTag)
                timeExecution += 200;
        }, timeExecution);
    });
</script>

                        <!--Mapa-->
                        
                    </div>
                    <!--banner-->
                    <div class="advertising" itemscope="" itemtype="https://schema.org/WPAdBlock">
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1555516934764-0" name="Patrocinio_Top" provider="AdManager" size="[120,240]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 120px; height: 242px;"></div>
                        </section>
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1555518158980-0" name="Patrocinio_Medium" provider="AdManager" size="[120,240]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 120px; height: 242px;"></div>
                        </section>
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1555518684170-0" name="Patrocinio_Bottom" provider="AdManager" size="[120,240]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 120px; height: 242px;"></div>
                        </section>
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1556830308276-0" name="Solapa_Top_Resultados" provider="AdManager" size="[120, 600]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="divBanner AdvertisingContainer" style="width: 120px; height: 602px;"></div>
                        </section>
                    </div>
                </div>
                <div class="clear"></div>

            </div>
            <section class="contentBlock lederboard parentAdsContainer AdvertisingFixed">
                    <span></span>
                    <div id="div-gpt-ad-1552919085834-0" name="Megabanner_Resultados" provider="AdManager" size="[728,90]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 728px; height: 92px;"></div>
                </section>
        </div>
        <script type="text/javascript">
            var cEmail = "";
            var cName = "";
            var cPhone = "";
            var cCity  = "";            
            var cCategoryGroup =  "1";
            var contactToken = 'AF215EBA85EFBC37F03DEDA672D6DA11B05E1FD9F0889B101BCD8B2210307B488EBD8871A942E40E';
            var contextdomain  = 'www.fincaraiz.com.co';
            var clientIdR = '0';

            $( document ).ready(function() {
                cCategoryGroup = "1";
            });

            //variable global
            var sfFind = Normalize({"AdvertCategory" : "0", "LocationType" : "0", "AdvertId" : "0", "AdvertWASId" : "0", "AdvertExternalId" : "", "ClientId" : "0", "TransactionId" : "2", "sTransactionsId" : "", "TransactionType" : "All", "Category1Id" : "8", "Category1IdList" : "8", "Category2Id" : "0", "Category3Id" : "0", "Location1Id" : "67", "Location1IdList" : "67", "Location2Id" : "3630001", "Location2IdList" : "3630001", "Location3Id" : "0", "Location3IdList" : "", "Location4Id" : "0", "Location4IdList" : "", "PriceFrom" : "0", "PriceTo" : "0", "NotInLocation4Id" : "", "SalaryMax" : "0", "SurfaceFrom" : "0", "SurfaceTo" : "0", "Area" : "0", "Rooms" : "0", "RoomsList" : "", "Baths" : "0", "BathsList" : "", "AgeId" : "0", "AgeIdList" : "", "NotInLocation3Id" : "", "ExtrasId" : "0", "ExtrasIdList" : "", "ContractType" : "All", "TopAdvert" : "0", "ProductCode" : "", "NumPhotos" : "0", "ShowPhotos" : "True", "ProductId" : "0", "Word" : "", "Order" : "GridDate desc", "Status" : "0", "OriginId" : "0", "GridDate" : "1/1/0001 12:00:00 AM", "ModifyDateTo" : "1/1/1900 12:00:00 AM", "ToBePostModerate" : "False", "FTISearch" : "False", "NotInAdvertsId" : "", "ParentLevel" : "-1", "GroupType" : "-1", "ClientParentLevel" : "-1", "NotInCategory1Id" : "0", "NotInCategory2Id" : "0", "AdvertIP" : "", "GroupName" : "", "Neighborhood" : "", "PriceTypeId" : "0", "StratumId" : "", "StratumIdList" : "", "TotalEnvironment" : "0", "TotalEnvironmentList" : "", "IsFree" : "-1", "InLocation" : "False", "Ranking" : "0", "ProyectStatus" : "0", "PageSize" : "30", "PageNumber" : "1"});
            var viewMap = false;
            sfFind.Category1Id = sfFind.Category1IdList;
            sfFind.Rooms = sfFind.RoomsList;
            sfFind.Baths = sfFind.BathsList;
            sfFind.ExtrasId = sfFind.ExtrasIdList;
            var idsPageSemanticText = ['/apartamento-en-arriendo/bogota/chico_navarra-det-6237104.aspx','/apartamento-en-arriendo/bogota/chapinero_alto-det-5330804.aspx','/apartamento-en-arriendo/bogota/los_rosales-det-6250131.aspx','/apartamento-en-arriendo/bogota/teusaquillo-det-6027884.aspx','/apartamento-en-arriendo/bogota/gran_america-det-6248195.aspx','/apartamento-en-arriendo/bogota/florida_blanca-det-6230621.aspx','/apartamento-en-arriendo/bogota/hayuelos-det-6251107.aspx','/apartamento-en-arriendo/bogota/cedritos-det-5872681.aspx','/apartamento-en-arriendo/bogota/parque_central_bavaria-det-6248317.aspx','/apartamento-en-arriendo/bogota/los_reyes_iii_apto_203-det-6077178.aspx','/apartamento-en-arriendo/bogota/garces_navas-det-6251073.aspx','/apartamento-en-arriendo/bogota/cedritos_usaquen-det-6069822.aspx','/apartamento-en-arriendo/bogota/suba-det-5792716.aspx','/apartamento-en-arriendo/bogota/los_rosales-det-6025420.aspx','/apartamento-en-arriendo/bogota/santa_lucia-det-6054219.aspx','/apartamento-en-arriendo/bogota/caminos_ibiza_aptoint-det-6138902.aspx','/apartamento-en-arriendo/bogota/santa_barbara-det-6121533.aspx','/apartamento-en-arriendo/bogota/portal_181_int_apto_302-det-6246127.aspx','/apartamento-en-arriendo/bogota/gran_britalia-det-6193352.aspx','/apartamento-en-arriendo/bogota/villas_del_dorado-det-6251025.aspx','/apartamento-en-arriendo/bogota/las_delicias_del_carmen-det-5940710.aspx','/apartamento-en-arriendo/bogota/kennedy_central-det-6214662.aspx','/apartamento-en-arriendo/bogota/niza-det-6224884.aspx','/apartamento-en-arriendo/bogota/cedro_golf-det-6245396.aspx','/apartamento-en-arriendo/bogota/las_margaritas-det-6240103.aspx','/apartamento-en-arriendo/bogota/pasadena-det-6241322.aspx','/apartamento-en-arriendo/bogota/bella_suiza-det-6169113.aspx','/apartamento-en-arriendo/bogota/nueva_autopista-det-6250991.aspx','/apartamento-en-arriendo/bogota/local_barrio_venecia_diagonal_sur-det-6246153.aspx','/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-6250936.aspx','/apartamento-en-arriendo/bogota/bosa-det-6250932.aspx','/apartamento-en-arriendo/bogota/espanola-det-6250919.aspx','/apartamento-en-arriendo/bogota/cedritos-det-6250929.aspx','/apartamento-en-arriendo/bogota/san_luis_patios-det-6250922.aspx'];
            var countAdverts = 22187;
            var totalPages = 740;

            InitializeViewModelFilters();
        
            function ShowArrows()
            {
                if(trim($("#div_LastPage").html()) != ""){
                    $("#div_LastPage").show();
                }
                else{
                    $("#div_LastPage").hide();
                }                    
                if(trim($("#div_NextPage").html()) != ""){
                    $("#div_NextPage").show();            
                }
                else{
                    $("#div_NextPage").hide();
                }
                if(countAdverts == 0){
                    $("#paginator_top").hide();
                }
            }

            function PaintSuperiorPaginator(lstData){
                totalPages = Math.ceil(parseInt(lstData.info) / sfFind.PageSize);
                sfFind.PageNumber = parseInt(sfFind.PageNumber);
                if(totalPages > 0)
                {
                    $("#paginator_top").show();
                    $("#span_counter").html(sfFind.PageNumber + " de " + totalPages);
                    var firtsPage = GetFirtsPagePaginator();
                    var lastPage = GetLastPagePaginator();
                    var htmlNextPage = '';
                    var htmlLastPage = '';
                    if (sfFind.PageNumber > firtsPage)
                    {
                        htmlLastPage = '<a href="{Semantic}"  class="ico20 prev-page" onclick="return Grid_PageChanged(\'{PageNumber}\')" ></a>\
                                        <a href="{Semantic}" title="Ir a la pagina Anterior" onclick="return Grid_PageChanged(\'{PageNumber}\')" >Anterior</a>';
                        var pageObject1 = GetPageObject("Anterior", sfFind.PageNumber - 1);
                        htmlLastPage = toHtml(pageObject1,htmlLastPage);
                    }
                    if (sfFind.PageNumber < lastPage)
                    {
                        htmlNextPage = '<a href="{Semantic}" title="Ir a la pagina Siguiente" onclick="return Grid_PageChanged(\'{PageNumber}\')" >Siguiente</a> \
                                        <a href="{Semantic}" class="ico20 next-page" onclick="return Grid_PageChanged(\'{PageNumber}\')" ></a>';                
                        var pageObject2 = GetPageObject("Siguiente", sfFind.PageNumber + 1);                
                        htmlNextPage = toHtml(pageObject2,htmlNextPage);
                    }
                    $("#div_LastPage").html(htmlLastPage);
                    $("#div_NextPage").html(htmlNextPage);
                    ShowArrows();
                }
                else{
                    $("#paginator_top").hide();
                }
            }
            $(document).ready(function() {ShowArrows();});
                       
        </script>
    </form>

        </div>
        <!--MASTER FOOTER-->
        <div id="divFooter">
            

<div id="Div_Footer" class="footer">
    <div id="ctl00_xFooter_Div_Footer_Principal" class="footer">
        <div class="contenedor_products">
            <img src="/App_Theme/images/logo_fincaraiz_footer.png" width="361" height="58">
        </div>
        <div class="panel_principal">
            <div id="ctl00_xFooter_LinksGroupFooter1_Div_LinksEstaticos"> 
 <ul class="contenido_footer_principal">
  <li class="titulos_footer">
      Oferta de Finca Raíz en Colombia 
  </li>
    
            <li class="contenedor_links_rapida"><a href="/proyectos-vivienda-nueva/bogota" class="texto_rapida" title="Proyectos de Vivienda en Bogotá">Proyectos Vivienda Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/arriendo/bogota/" class="texto_rapida" title="Apartamentos en Arriendo en Bogotá">Apartamentos Arriendo Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/venta/bogota/" class="texto_rapida" title="Apartamentos en Venta en Bogotá">Apartamentos Venta Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartaestudios/arriendo/bogota/" class="texto_rapida" title="Apartaestudios en Arriendo en Bogotá">Apartaestudios Arriendo Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/arriendos/bogota/" class="texto_rapida" title="Arriendos en Bogotá">Arriendos Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/arriendo/bogota/" class="texto_rapida" title="Casas en Arriendo en Bogotá">Casas Arriendo Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/venta/bogota/" class="texto_rapida" title="Casas en Venta en Bogotá">Casas Venta Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/alquiler/cali/" class="texto_rapida" title="Apartamentos en Alquiler en Cali">Apartamentos Alquiler Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/venta/cali" class="texto_rapida" title="Apartamentos en Venta en Cali">Apartamentos Venta Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/alquiler/cali/" class="texto_rapida" title="Casas en Alquiler en Cali">Casas Alquiler Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/venta/cali/" class="texto_rapida" title="Casas en Venta en Cali">Casas Venta Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/arrendamientos/medellin/" class="texto_rapida" title="Inmuebles en Arrendamiento en Medellín">Arrendamientos Medellín</a></li>
        
            <li class="contenedor_links_rapida"><a href="/arrendamientos/envigado/" class="texto_rapida" title="Inmuebles en Arrendamiento en Envigado">Arrendamientos Envigado</a></li>
        
     <li class="contenedor_links_rapida"><a href="/LandingPage/LandingSabanaNorte.aspx" target="_blank" class="texto_rapida" title="Especial Sabana" style="font-size: 13px;"><b>Especial Sabana</b></a></li>
 </ul>
</div>




  

            <ul class="contenido_footer_principal">
                <li class="contenedor_links_rapida">
                    <br><a class="texto_rapida version_impresa" title="Visita nuestro BLOG" target="_blank" href="https://blog.fincaraiz.com.co/"><b>Visita nuestro BLOG</b></a>
                    <a class="texto_rapida version_impresa" title="Visita nuestro Mapa del Sitio" target="_blank" href="https://www.fincaraiz.com.co/sitemap.aspx"><b>Mapa del Sitio</b></a>
                </li>
            </ul>
        </div>
        <div class="panel_secundario">
            







<ul class="contenido_footer_principal">
 <li class="titulos_footer">
  Apartamentos en Arriendo en Bogotá
 </li>    
 <li class="contenedor_links_rapida">
  Encuentre en fincaraiz.com.co Apartamentos en Arriendo Nuevos y Usados ubicados en las distintas zonas de Bogotá: <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-norte/index.aspx?ad=30|1||||2||8|||67|3630001|3630101|||||||||||||||1|||1|||||"> Norte</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-sur/index.aspx?ad=30|1||||2||8|||67|3630001|3630106|||||||||||||||1|||1|||||"> Sur</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-occidente/index.aspx?ad=30|1||||2||8|||67|3630001|3630104|||||||||||||||1|||1|||||"> Occidente</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-noroccidente/index.aspx?ad=30|1||||2||8|||67|3630001|3630102|||||||||||||||1|||1|||||"> NorOccidente</a> y <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-centro/index.aspx?ad=30|1||||2||8|||67|3630001|3630105|||||||||||||||1|||1|||||"> Centro</a>. Apartamentos en Arriendo en Bogotá de tipo <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|5||||2||8|||67|3630001||||||||||||||145||1|||1|||||"> loft</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|1||||2||8|||67|3630001||||||||||||||144||1|||1|||||"> dúplex</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|1||||2||8|||67|3630001||||||||||||||146||1|||1|||||">penthouse</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|1||||2||8|||67|3630001||||||||||||||19||1|||1|||||"> amoblados</a>. Características del conjunto: En edificio, Condominio, conjunto cerrado; Características del Sector donde se encuentra ubicado y características internas del apartamento, para arriendo directo o inmobiliaria. 
 </li>
</ul>
        </div>
        <div class="panel_secundario">
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Oferta de Anuncios: </li>
                <li class="contenedor_links"><a class="texto_links" title="Inmuebles en Venta en Colombia" href="/finca-raiz/">Venta Nuevo y Usados<br></a></li>
                <li class="contenedor_links"><a class="texto_links" title="Proyectos de Vivienda Nueva en Colombia" href="/proyectos-vivienda-nueva/">Proyectos Nuevos</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Inmuebles en Arriendo en Colombia" href="/arriendos/">Ofertas en Arriendo</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Alquiler Vacacional en Colombia" href="/alquiler-vacacional/">Ofertas Vacacionales</a></li>
            </ul>
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Nuestros Clientes</li>
                <li class="contenedor_links"><a class="texto_links" title="Listado de Inmobiliarias en Bogotá" href="/inmobiliarias/bogota/">Inmobiliarias en Bogotá<br> </a></li>
                <li class="contenedor_links"><a class="texto_links" title="Listado de Constructoras en Bogotá" href="/constructoras/bogota/">Constructoras en Bogotá<br> </a></li>
            </ul>
        </div>
        <div class="panel_secundario">
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Nuestros Servicios: </li>
                <li class="contenedor_links"><a class="texto_links" title="Administración de Inmuebles - Particulares" href="/ClientAdmin/Adverts.aspx">Gestión Personal</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Administración de Inmuebles - Inmobiliarias y Constructoras" href="https://profesionales.fincaraiz.com.co/">Gestión Empresarial</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Publicación de Avisos de Finca Raíz" href="/anuncios-clasificados-gratis-publicar-inmueble.aspx">Publicar Inmueble GRATIS*</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Descarga nuestra APP en Android e Itunes" href="/apps/">Descarga nuestra APP</a></li>
            </ul>
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Servicio al Cliente: </li>
                <li class="contenedor_links"><a class="texto_links" title="Conctactar a fincaraiz.com.co" href="/contactenos.aspx">Contáctenos<br></a></li>
                <li class="contenedor_links"><a class="texto_links" title="Consultar Preguntas Frecuentes de los Usuarios" href="/preguntas_frecuentes.aspx">Preguntas frecuentes</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Consultar Recomendaciones de Seguridad" href="/recomendaciones_seguridad.aspx">Recomendaciones de seguridad</a></li>
            </ul>
        </div>
        <div class="panel_logos_marcas">
            <div class="producto">Un Producto:<div id="schibsted_logo" style="cursor: pointer" title="https://www.adevinta.com/" onclick="javascript:window.open('https://www.adevinta.com/') "></div>
            </div>
            <div class="redes_sociales">
                Síguenos en:
                <div id="laguia_facebook" style="cursor: pointer" title="Síguenos en Facebook" onclick="javascript:window.open('http://www.facebook.com/fincaraiz.com.co') "></div>
                <div id="laguia_twitter" style="cursor: pointer" title="Síguenos en Twitter" onclick="javascript:window.open('https://twitter.com/fincaraizfr') "></div>
                <div id="laguia_youtube" style="cursor: pointer" title="Síguenos en Youtube" onclick="javascript:window.open('http://www.youtube.com/c/fincaraiz') "></div>
            </div>
            <div class="afiliado">Afiliado a:<a id="laguia_afiliado"></a></div>
        </div>
    </div>
    <div id="ctl00_xFooter_Div_dir_tel" class="panel_info">
        <strong>Calle 147 N° 17 - 78 Piso 8, Edificio Soko 147</strong>&nbsp; Bogotá D.C &nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; <strong>Tel:</strong>&nbsp; (57) (1) 3598079 - 3598071 -  3174359173
    </div>
    <div class="contenido_aviso_legal ">
        * Aplica sólo para personas naturales, máximo dos avisos gratis. Excluye Proyectos Nuevos<br>
        Fincaraiz.com.co cumple con la ley 527 de 1.999, para todos los efectos ha de entenderse por SISTEMA DE INFORMACIÓN. 
        <a href="/aviso_legal.aspx" class="link_aviso_legal">Aviso legal</a> - 
        <a href="/terminos_y_condiciones.aspx" class="link_aviso_legal">Términos y Condiciones</a> -
        <a href="/politica_tratamiento_de_datos_personales.aspx" class="link_aviso_legal">Políticas de tratamiento de datos</a>
    </div>
</div>










        </div>
    </div>
    <div id="ctl00_scripts">
    <script type="text/javascript">$(document).ready(function () { if (cCategoryGroup && cCategoryGroup != '2') { jQuery.ajax({type: 'GET',url: '/PhotoGallery.ashx?find=?ad=30|1||||2||8|||67|3630001|||||||||||||||||||1||||||||||',dataType: 'html',success: function (response) { if (response && typeof response == 'string' && response.trim().length > 0 && typeof (sfFind.Location1Id) != 'undefined') { $('#divPhotoGallery').html('').append(response);  $('div.box_top_Galery').removeAttr('style'); } else { $('#divPhotoGallery').html('');  $('div.box_top_Galery').attr('style', 'display: none !important;'); }}});}});</script><script type="text/javascript">function OLAPAdvertContact2(advId,originId,typeId){ WSStatistics.Contact(advId,typeId,40,'2021/04/12:21:31:26:132-074-39',originId);}</script><script type="text/javascript">function OlapSearchStats(cat1,loc1,loc2,loc3,loc4,trans){var type='5001';var src='40';var ck='2021/04/12:21:31:26:132-074-39';WSStatistics.SaveFilters(type,src,ck,cat1,loc1,loc2,loc3,loc4,trans);}
OlapSearchStats('8','67','3630001','0','','2');</script></div>
    <div id="ctl00_publicity">
    </div>
    

    <!--Div necesarios para las notificaciones-->
    <div id="AlertContainer"></div>
    <div id="notification_panel" class="progress_fixed">Procesando</div>
    <div id="msg" class="msg_black">
        <div class="msg_content">
            <span></span>
        </div>
    </div>
    <div id="layer_black"></div>

    <div id="debugDiv" style="color:#fff;background-color:#000;width:800px;height:70px;display:none;position:fixed;bottom:0px;right:0px;z-index:999999;">
        <textarea rows="4" cols="108" id="txtDebug" value="Debug"></textarea>
    </div>
    <script type="text/javascript">
        function GetBreadCrumbsOk() { }
        $("#debugDiv").attr("style", "color:#fff;background-color:#000;width:800px;height:70px;display:none;position:fixed;bottom:0px;right:0px;z-index:999999;")
        
        function addDebug(text) {
            $("#txtDebug").text(text + "\n" + $("#txtDebug").text());
        }
    </script><script type="text/javascript" async="" src="https://api.trackuity.com/auto?ts=1618263087455&amp;cookie=170072957071895926&amp;url=https%3A%2F%2Fwww.fincaraiz.com.co%2Fapartamentos%2Farriendo%2Fbogota&amp;referrer=&amp;key=BjxWXgW7qj5CBprWxtqBtA"></script>


<script type="text/javascript" async="" src="https://api.trackuity.com/log?ts=1618263087455&amp;cookie=170072957071895926&amp;url=https%3A%2F%2Fwww.fincaraiz.com.co%2Fapartamentos%2Farriendo%2Fbogota&amp;referrer=&amp;key=DxhMQ8Hb4z2LNmz47xGaQN&amp;name=loading_time&amp;value=1580"></script><div class="CookiesPrincipal" id="PoliticaCookies">                        <div class="CookiesSegunda">                            <span>                                <p class="TextoCookies">                                    Utilizamos cookies propias para mejorar tu experiencia de navegación. Si continúas en el sitio consideramos que aceptas su uso.<a href="/CookiesPolicy.aspx" target="_blank" rel="noopener noreferrer"> Más información </a>                                </p>                            </span>                            <div class="AceptarCookie">                                <button class="BotonAceptarCookie" onclick="CrearCookiePolitica();"> ACEPTO </button>                            </div>                        </div>                    </div><iframe height="1" width="1" style="display:none" src="//us.creativecdn.com/tags?id=pr_hZsXzDiaQEYXCnsNU30o_listing_6237104,5330804,6250131,6027884,6248195&amp;id=pr_hZsXzDiaQEYXCnsNU30o_uid_unknown" id="utag_79"></iframe><iframe id="google_osd_static_frame_8996192007598" name="google_osd_static_frame" style="display: none; width: 0px; height: 0px;"></iframe><div id="criteo-tags-div" style="display: none;"><iframe src="https://gum.criteo.com/syncframe?topUrl=www.fincaraiz.com.co#{&quot;bundle&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;cw&quot;:true,&quot;lwid&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;optout&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;origin&quot;:&quot;onetag&quot;,&quot;pm&quot;:0,&quot;sid&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;tld&quot;:&quot;fincaraiz.com.co&quot;,&quot;topUrl&quot;:&quot;www.fincaraiz.com.co&quot;,&quot;uid&quot;:null,&quot;version&quot;:&quot;5_6_2&quot;}" id="criteo-syncframe" width="0" height="0" frameborder="0" style="border-width:0px; margin:0px; display:none" title="Criteo GUM iframe"></iframe></div><iframe height="0" width="0" title="Criteo DIS iframe" style="display: none;"></iframe></body></html>"
}