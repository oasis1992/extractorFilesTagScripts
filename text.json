<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="es" xmlns:fb="http://ogp.me/ns/fb#"><head id="head">
    <link rel="canonical" href="https://www.fincaraiz.com.co/apartamentos/arriendo/bogota"> 
    <title>Apartamentos en Arriendo en Bogotá, Vivienda Nueva y Usada | Finca Raíz</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <meta name="description" content="Apartamentos en Arriendo en Bogotá: Buscas apartamento para arrendar en Bogotá al mejor precio? Compara número de habitaciones, ubicación sector o barrio.">
    <meta name="language" content="es-CO">
    <meta http-equiv="content-language" content="es-co">
    <meta name="distribution" content="global">
    <meta name="resource-type" content="document">
    <meta name="Audience" content="All">
    <meta name="robots" content="index,follow">
    <!--OnOff_Trackuity-->
    <script src="https://www.googletagservices.com/activeview/js/current/osd.js?cb=%2Fr20100101"></script><script async="true" type="text/javascript" src="https://sslwidget.criteo.com/event?a=%5B35366%2C48693%5D&amp;v=5.6.2&amp;p0=e%3Dexd%26site_type%3Dd&amp;p1=p%3D%255B5724798%252C6034343%252C5918672%255D%26e%3Dvl&amp;p2=e%3Ddis&amp;adce=1&amp;tld=fincaraiz.com.co&amp;dtycbr=30167" data-owner="criteo-tag"></script><script type="text/javascript" async="" src="https://www.google-analytics.com/gtm/js?id=GTM-M59GSFH&amp;t=tealium_0&amp;cid=1838887939.1617835965"></script><script type="text/javascript" async="" id="tealium-tag-3005" src="https://sb.scorecardresearch.com/c2/10424679/cs.js"></script><script type="text/javascript" async="" charset="utf-8" src="//static.criteo.net/js/ld/ld.js" id="utag_51"></script><script type="text/javascript" async="" charset="utf-8" src="//static.hotjar.com/c/hotjar-825301.js?sv=5" id="utag_47"></script><script src="https://connect.facebook.net/signals/config/855921464443427?v=2.9.33&amp;r=stable" async=""></script><script async="" src="//connect.facebook.net/en_US/fbevents.js"></script><script type="text/javascript" async="" charset="utf-8" src="https://www.google-analytics.com/analytics.js" id="tealium-tag-7110"></script><script type="text/javascript" async="" charset="utf-8" src="//www.googleadservices.com/pagead/conversion_async.js" id="utag_7"></script><script type="text/javascript" async="" charset="utf-8" src="//www.fincaraiz.com.co/App_Theme/scripts/xtcore.js" id="utag_25"></script><script type="text/javascript" async="" charset="utf-8" src="//sdk.mpianalytics.com/pulse.min.js" id="utag_45"></script><script src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.js" type="text/javascript" async=""></script><script type="text/javascript" async="" src="https://www.gstatic.com/recaptcha/releases/539Evs44yecoSf-lkJBQzKKj/recaptcha__en.js" crossorigin="anonymous" integrity="sha384-zjc7xTV/N/5xk7fBfl7Yk+Q37duEHBt4X3RleHe4j+AH4qq5QE4gTkWU4vCAoECz"></script><script async="" src="//static.trackuity.com/js/snippet.min.js"></script><script type="text/javascript">
        var trackuityEnable = 'true';
    </script>
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    
    <link rel="next" href="https://www.fincaraiz.com.co/apartamentos/arriendo/bogota/?ad=30|2||||2||8|||67|3630001|||||||||||||||||||1||griddate desc||||||||">
    
    <link rel="alternate" media="only screen and (max-width: 640px)" href="https://m.fincaraiz.com.co/apartamentos/arriendo/bogota">
    

    
    <meta property="fb:admins" content="100000283157257">
    <meta property="og:site_name" content="www.fincaraiz.com.co">
    <meta property="og:type" content="website">
    <meta property="og:locale" content="es_LA">
    <meta property="og:title" content="Apartamentos en Arriendo en Bogotá, Vivienda Nueva y Usada | Finca Raíz">
    <meta property="og:description" content="Apartamentos en Arriendo en Bogotá: Buscas apartamento para arrendar en Bogotá al mejor precio? Compara número de habitaciones, ubicación sector o barrio.">
    <meta property="og:url" content="http://www.fincaraiz.com.co/apartamentos/arriendo/bogota">
    <meta property="og:image" content="https://www.fincaraiz.com.co/App_Theme/images/landig_page/landing_apps/Logo_app.png">
     
    <meta name="twitter:card" content="summary_large_image"> 
    <meta name="twitter:site" content="@fincaraizfr"> 
    <meta name="twitter:creator" content="@fincaraizfr"> 
    <meta name="twitter:title" content="Apartamentos en Arriendo en Bogotá, Vivienda Nueva y Usada | Finca Raíz">
    <meta name="twitter:description" content="Apartamentos en Arriendo en Bogotá: Buscas apartamento para arrendar en Bogotá al mejor precio? Compara número de habitaciones, ubicación sector o barrio."> 
    <meta name="twitter:image" content="https://www.fincaraiz.com.co/App_Theme/images/landig_page/landing_apps/Logo_app.png"> 
    
    <meta name="google-signin-scope" content="profile email">
    <meta name="google-signin-client_id" content="751564689013-5mmokt7kti1qneh99thbrpk9lqo9hmd8.apps.googleusercontent.com">
    
    
    
    <link href="/CSSScript.ashx?Version=132622994611141819&amp;type=CSS&amp;fileSet=header,popups,normalize,mainNew,helper,font-awesomeNew,referserver,footer,parrilla,scroll,breadcrumbFilter,filters,font-fontello,font-awesomeNew,font-google-lato,popups,LoginRegister,detalle,MappingCarousel,slick,slick-theme,AlertNew,PoliticaCookies" rel="stylesheet" type="text/css">
    <script src="/CSSScript.ashx?type=JS&amp;fileSet=jquery&amp;min=0" type="text/javascript"></script>
    <script src="/CSSScript.ashx?Version=132622994651298049&amp;type=JS&amp;fileSet=AlertNew,util,input,tabs,cookie,usorigin,browserstorage,adssticky,adserverjs,ajax,PoliticaCookies" type="text/javascript"></script>
    <script src="/CSSScript.ashx?Version=132622994651298049&amp;type=JS&amp;fileSet=,knockout.min,advertresults,grid-knockOut,cookie,scroll,ajax,breadcrumbFilterV2,lazyload,contact,trackuity,loginregistercustomizer,ajax,util,validation,AlertNew,LoginRegister,FacebookManager,advertNew,validation,FavoriteAdverts,slick.min,MappingCarousel" type="text/javascript"></script>
    <script type="text/javascript">
        var AjaxEnabled = toBoolean("True")
        var sPhotosUrl = 'https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/';
        var sLogosUrl = 'https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/Logos/';
        var Origin = 40;
        var DateTimeMin = '1/1/0001 12:00:00 AM';
        var utag_data = '';
        var OLAPContactType={AdvertViewPhone:3001,AdvertContact:3002,ClientVisits:3003,ClientViewPhone:3004,ClientContact:3005,AdvertContact_DetailMain:3006,AdvertContact_DetailGridON:3007,AdvertContact_DetailPriceAlert:3008,AdvertContact_DetailCallback:3009,AdvertContact_DetailButtonZoneInfo:3010,AdvertContact_DetailMap:3011,AdvertContact_Results:3012,AdvertContact_ResultsMicrosite:3013,AdvertContact_Compare:3014,AdvertContact_SuperOffer:3015,AdvertContact_DetailButtonMain:3016,AdvertContact_Whatsapp:3017,AdvertContact_ViewPhone:3018,AdvertContact_LandingMail:3019,AdvertContact_LandingOfertas:3020,AdvertContact_LandingGSI:3021,AdvertContact_DetailMain_Ofertas:3022,AdvertContact_DetailGridON_Ofertas:3023,AdvertContact_DetailPriceAlert_Ofertas:3024,AdvertContact_DetailCallback_Ofertas:3025,AdvertContact_DetailButtonMain_Ofertas:3026,AdvertContact_Whatsapp_Ofertas:3027,AdvertContact_ViewPhone_Ofertas:3028,AdvertContact_Compare_Ofertas:3029,AdvertContact_Facebook:3030,AdvertContact_Facebook_GSI:3031,AdvertContact_Facebook_Ofertas:3032,AdvertContact_Facebook_Sabana:3033};
    </script>
<script type="text/javascript" async="" src="https://www.googletagservices.com/tag/js/gpt.js"></script><script type="text/javascript" class="AdvertisingScript">var googletag = googletag || {};googletag.cmd = googletag.cmd || []; 
</script><script type="text/javascript" class="AdvertisingScript">googletag.cmd.push(function() {
	googletag.pubads().enableAsyncRendering();
	googletag.pubads().enableSingleRequest();
	googletag.pubads().setCentering(true);
	
	googletag.enableServices();
	googletag.pubads().collapseEmptyDivs();
	googletag.pubads().addEventListener('slotRenderEnded', function(event) { AdsBuildInProcess(event.isEmpty, event.slot.getSlotElementId());  }); 
});</script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/tiqapp/utag.v.js?a=schibsted/fincaraiz/202009011416&amp;cb=1617835964570" id="tiqapp"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.89.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_89"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.25.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_25"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.26.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_26"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.42.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_42"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.7.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_7"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.18.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_18"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.70.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_70"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.47.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_47"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.51.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_51"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.55.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_55"></script><script type="text/javascript" async="" charset="utf-8" src="//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.79.js?utv=ut4.37.202009011416" id="utag_schibsted.fincaraiz_79"></script><meta http-equiv="origin-trial" content="A+b/H0b8RPXNaJgaNFpO0YOFuGK6myDQXlwnJB3SwzvNMfcndat4DZYMrP4ClJIzYWo3/yP2S+8FTZ/lpqbPAAEAAABueyJvcmlnaW4iOiJodHRwczovL2ltYXNkay5nb29nbGVhcGlzLmNvbTo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzVGhpcmRQYXJ0eSI6dHJ1ZX0="><meta http-equiv="origin-trial" content="A9ZgbRtm4pU3oZiuNzOsKcC8ppFSZdcjP2qYcdQrFKVzkmiWH1kdYY1Mi9x7G8+PS8HV9Ha9Cz0gaMdKsiVZIgMAAAB7eyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9"><meta http-equiv="origin-trial" content="AxL6oBxcpn5rQDPKSAs+d0oxNyJYq2/4esBUh3Yx5z8QfcLu+AU8iFCXYRcr/CEEfDnkxxLTsvXPJFQBxHfvkgMAAACBeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXRhZ3NlcnZpY2VzLmNvbTo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9"><meta http-equiv="origin-trial" content="A9KPtG5kl3oLTk21xqynDPGQ5t18bSOpwt0w6kGa6dEWbuwjpffmdUpR3W+faZDubGT+KIk2do0BX2ca16x8qAcAAACBeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiVHJ1c3RUb2tlbnMiLCJleHBpcnkiOjE2MjYyMjA3OTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9"><meta http-equiv="origin-trial" content="A3HucHUo1oW9s+9kIKz8mLkbcmdaj5lxt3eiIMp1Nh49dkkBlg1Fhg4Fd/r0vL69mRRA36YutI9P/lJUfL8csQoAAACFeyJvcmlnaW4iOiJodHRwczovL2RvdWJsZWNsaWNrLm5ldDo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A0OysezhLoCRYomumeYlubLurZTCmsjTb087OvtCy95jNM65cfEsbajrJnhaGwiTxhz38ZZbm+UhUwQuXfVPTg0AAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXN5bmRpY2F0aW9uLmNvbTo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="AxoOxdZQmIoA1WeAPDixRAeWDdgs7ZtVFfH2y19ziTgD1iaHE5ZGz2UdSjubkWvob9C5PrjUfkWi4ZSLgWk3Xg8AAACLeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZXRhZ3NlcnZpY2VzLmNvbTo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A7+rMYR5onPnACrz+niKSeFdH3xw1IyHo2AZSHmxrofRk9w4HcQPMYcpBUKu6OQ6zsdxf4m/vqa6tG6Na4OLpAQAAAB4eyJvcmlnaW4iOiJodHRwczovL2ltYXNkay5nb29nbGVhcGlzLmNvbTo0NDMiLCJmZWF0dXJlIjoiQ29udmVyc2lvbk1lYXN1cmVtZW50IiwiZXhwaXJ5IjoxNjI2MjIwNzk5LCJpc1RoaXJkUGFydHkiOnRydWV9"><script src="https://securepubads.g.doubleclick.net/gpt/pubads_impl_2021040101.js" async=""></script><script src="https://googleads.g.doubleclick.net/pagead/viewthroughconversion/1012702328/?random=1617835964786&amp;cv=9&amp;fst=1617835964786&amp;num=1&amp;guid=ON&amp;resp=GooglemKTybQhCsO&amp;eid=376635471%2C2505059650&amp;u_h=900&amp;u_w=1440&amp;u_ah=900&amp;u_aw=1440&amp;u_cd=24&amp;u_his=2&amp;u_tz=-300&amp;u_java=false&amp;u_nplug=0&amp;u_nmime=0&amp;sendb=1&amp;ig=1&amp;frm=0&amp;url=https%3A%2F%2Fwww.fincaraiz.com.co%2Fapartamentos%2Farriendo%2Fbogota&amp;tiba=Apartamentos%20en%20Arriendo%20en%20Bogot%C3%A1%2C%20Vivienda%20Nueva%20y%20Usada%20%7C%20Finca%20Ra%C3%ADz&amp;hn=www.googleadservices.com&amp;async=1&amp;rfmt=3&amp;fmt=4"></script><link rel="preload" href="https://adservice.google.com.mx/adsid/integrator.js?domain=www.fincaraiz.com.co" as="script"><script type="text/javascript" src="https://adservice.google.com.mx/adsid/integrator.js?domain=www.fincaraiz.com.co"></script><link rel="preload" href="https://adservice.google.com/adsid/integrator.js?domain=www.fincaraiz.com.co" as="script"><script type="text/javascript" src="https://adservice.google.com/adsid/integrator.js?domain=www.fincaraiz.com.co"></script><link rel="prefetch" href="https://a1965402475aa82ea85e2dfb9f030083.safeframe.googlesyndication.com/safeframe/1-0-38/html/container.html"><link rel="prefetch" href="https://tpc.googlesyndication.com/safeframe/1-0-38/html/container.html"><script type="text/javascript" src="https://hcdn.trackuity.supplies/fincaraiz/glide-30fa291eaeb1bb48b262637b5d96dd5e.min.js"></script></head>
<body id="body" class="generic_section">
    
<script type="text/javascript">
    utag_data = JSON.parse('{"environment":"Prod","page_type":"List","page_type_id":"2","event_name":"List","Info_HTTP_X_FORWARDED_FOR":"187.184.96.62","Info_REMOTE_ADDR":"172.21.2.83","Info_LOCAL_ADDR":"172.21.2.158","Info_X_FORWARDED_FOR":"187.184.96.62","ad_type_id":"2","ad_type":"Arriendo","ad_id":"0","ad_source_id":"0","region_level1":"Cundinamarca","region_level2":"Bogotá","region_level1_id":"67","region_level2_id":"3630001","category_level1":"Apartamento","category_level1_id":"8","action_type":"Navigation","num_bathrooms":"0","results_page":"1","rooms":"0","visit_origin":"Direct","Continent_Code":"NA","Continent_Name":"North America","Country_IsoCode":"MX","Country_Name":"Mexico","Traits_IPAddress":"187.184.96.62","items":[{"id":"5724798","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá LA CASTELLANA","category":"Apartamento"},{"id":"6034343","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá SAN RAFAELGALAN","category":"Apartamento"},{"id":"5918672","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Santa Bárbara Oriental","category":"Apartamento"},{"id":"6232295","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Santa Bárbara","category":"Apartamento"},{"id":"6238945","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Alcala","category":"Apartamento"},{"id":"6185708","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá CASTILLA","category":"Apartamento"},{"id":"6154473","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá CIUDADELA COLSUBSIDIO","category":"Apartamento"},{"id":"6173400","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Chicó Navarra","category":"Apartamento"},{"id":"6232057","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá AURES II SECTOR LA PLANTA","category":"Apartamento"},{"id":"5889719","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Chicó","category":"Apartamento"},{"id":"6238883","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Barrancas","category":"Apartamento"},{"id":"6238645","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá La Calleja","category":"Apartamento"},{"id":"6238445","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá PONTEVEDRA","category":"Apartamento"},{"id":"6238874","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Minuto de Dios","category":"Apartamento"},{"id":"6140712","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Alquería","category":"Apartamento"},{"id":"5491225","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá LA CAROLINA","category":"Apartamento"},{"id":"6238855","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Britalia Norte","category":"Apartamento"},{"id":"6238859","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Suba rincon","category":"Apartamento"},{"id":"3805306","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Pasadena","category":"Apartamento"},{"id":"6198773","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Santa Bárbara Occidental","category":"Apartamento"},{"id":"4884766","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá La Felicidad","category":"Apartamento"},{"id":"5145589","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá CIUDAD JARDIN SUR","category":"Apartamento"},{"id":"5647245","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá CASA BLANCA SUR","category":"Apartamento"},{"id":"6020253","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá LA LIBERTAD","category":"Apartamento"},{"id":"5638518","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá La Cabrera","category":"Apartamento"},{"id":"6238789","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Chapinero","category":"Apartamento"},{"id":"6238763","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá El Batán","category":"Apartamento"},{"id":"5840277","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Chicó","category":"Apartamento"},{"id":"6238738","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Cedritos","category":"Apartamento"},{"id":"6144677","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá La Floresta","category":"Apartamento"},{"id":"6238655","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Santa Bárbara","category":"Apartamento"},{"id":"6238714","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá Pardo Rubio","category":"Apartamento"},{"id":"6182998","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá SIETE DE AGOSTO","category":"Apartamento"},{"id":"6182897","type":"ClassifiedAd","name":"Apartamento en Arriendo - Bogotá SIETE DE AGOSTO","category":"Apartamento"}],"num_results":"22139","num_items":"34","sorting":"Other","facility":"Sin Especificar","pagetype":"listing"}');
    var tealiumEnvironment = utag_data.environment.toLowerCase();
    var opengraphObj = [];
    var metaObj = [];
    $('head meta').each(function () {
        var prop = $(this).attr('property');
        var name = $(this).attr('name');
        var httpe = $(this).attr('httpequiv');
        var _http = $(this).attr('http-equiv');
        var content = $(this).attr('content');
        
        if (prop && $(this).attr('property').indexOf('og:') != -1 && name == undefined && httpe == undefined && _http == undefined)
            opengraphObj.push({ property: prop, content: content });
        else if (prop != undefined)
            metaObj.push({ property: prop, content: content });

        if (name && prop == undefined && httpe == undefined && _http == undefined)
            metaObj.push({ property: name, content: content });

        if (httpe && name == undefined && prop == undefined && _http == undefined)
            metaObj.push({ property: httpe, content: content });

        if (_http && name == undefined && prop == undefined && httpe == undefined)
            metaObj.push({ property: _http, content: content });
    });

    if (opengraphObj.length > 0) utag_data.opengraph = opengraphObj;
    if (metaObj.length > 0) utag_data.meta = metaObj;
</script>

<!-- Loading script asynchronously -->
<script type="text/javascript">
    var clientIp;
    $.ajax({
        async: true, type: 'GET', contentType: 'application/json',
        url: 'https://api.ipify.org/?format=json',        
        success: function (data) {
            if (data && data.ip)
                clientIp = data.ip;
        },
        complete: function () { getGeoipInfo(clientIp) }
    });

    function getGeoipInfo(clientIp) {
        var obj_geo;
        if (typeof (Storage) !== "undefined")
            obj_geo = sessionStorage.getItem("ss_geoip_info");

        if (obj_geo)
            setGeoipInfo(JSON.parse(obj_geo));
        else {
            $.ajax({
                async: false, type: 'GET', dataType: 'xml', contentType: "application/x-www-form-urlencoded",
                url: '/WebServices/Utils.asmx/GetGeoipInfo?clientIp=' + clientIp,
                success: function (data) {
                    if (data && data.hasChildNodes()) {
                        var obj = JSON.parse(data.children[0].textContent);
                        setGeoipInfo(obj);
                        if (typeof (Storage) !== "undefined")
                            sessionStorage.setItem("ss_geoip_info", JSON.stringify(obj));
                    }
                }
            });
        }
        loadTealium();
    }
    function setGeoipInfo(obj) {
        if (obj.Continent_Code) utag_data.Continent_Code = obj.Continent_Code;
        if (obj.Continent_Name) utag_data.Continent_Name = obj.Continent_Name;
        if (obj.Country_IsoCode) utag_data.Country_IsoCode = obj.Country_IsoCode;
        if (obj.Country_Name) utag_data.Country_Name = obj.Country_Name;
        if (obj.Traits_Domain) utag_data.Traits_Domain = obj.Traits_Domain;
        if (obj.Traits_IPAddress) utag_data.Traits_IPAddress = obj.Traits_IPAddress;
    }
    function loadTealium() {
        (function (a, b, c, d) {
            a = '//tags.tiqcdn.com/utag/schibsted/fincaraiz/prod/utag.js';
            b = document; c = 'script'; d = b.createElement(c); d.src = a; d.type = 'text/java' + c; d.async = true;
            a = b.getElementsByTagName(c)[0]; a.parentNode.insertBefore(d, a);
        })();
    }

    var TealiumEventHandler = function (event, data) {
        var dataTealium = data;
        try 
        {
            if (event.toLowerCase() == "view") {
                utag.view(dataTealium);
                $.each(dataTealium, function (index, value) { utag_data[index] = value; });
            }
            if (event.toLowerCase() == "click") {
                utag.link(dataTealium);
                $.each(dataTealium, function (index, value) { utag_data[index] = value; });
            }
            if (event.toLowerCase() == "hit") {
                utag.track({ event: 'hit', data: dataTealium });
            }
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function trackingView(page, _eventHandler) {
        try {
            var dataTealium = { event_name: page, EventHandler: _eventHandler };

            TealiumEventHandler("view", dataTealium);
        }
        catch (ex) {
        }
        return true;
    }

    function trackingClick(page, _eventHandler) {
        try {
            var dataTealium = {event_name: page, EventHandler: _eventHandler};
            
            TealiumEventHandler("click", dataTealium);
        }
        catch (ex) {
        }
        return true;
    }

    function trackingHit(page, _eventHandler) {
        try {
            if (typeof (page) == 'undefined' || page == null) {
                page = utag_data.event_name;
            }

            var dataTealium = { event_name: page, EventHandler: _eventHandler, environment: utag_data.environment };

            TealiumEventHandler("hit", dataTealium);
        }
        catch (ex) {
        }
        return true;
    }

    function TealiumMessage(message) {
        var dataTealium;
        try {
            dataTealium = {
                EventHandler: 'SpecificTracking',
                event_name: utag_data.page_type,
                error_msg: (utag_data.page_type.sanitize() + "-" + message.removeAccents().replace(/\s/g, '_')), 
                environment: utag_data.environment
            };

            TealiumEventHandler("hit", dataTealium);
        }
        catch (cvex) {
        }
    }

    function TealiumGroupPacks(content) {
        var dataTealium;
        try {
            dataTealium = {
                EventHandler: 'SpecificTracking',
                event_name: utag_data.page_type,
                group_packs: (utag_data.page_type.sanitize() + "-GroupPacks_" + content.removeAccents().replace(/\s/g, '_')),
                environment: utag_data.environment
            };

            TealiumEventHandler("hit", dataTealium);
        }
        catch (cvex) {
        }
    }

    function TealiumClick(nameAttribute, valueAttribute, message) {
        var obj = searchElementTealium(nameAttribute, valueAttribute, message);

        for (var key in obj) {
            if (obj[key] !== null) {
                addClickTealium(obj[key], function () { trackingClick(message, 'SpecificTracking'); });
            }
        }
    }

    var addClickTealium = function (objElement, objFunction) {
        if (objElement.addEventListener) {  // all browsers except IE before version 9
            objElement.addEventListener("click", objFunction, false);
        } else {
            if (objElement.attachEvent) {   // IE before version 9
                objElement.attachEvent("click", objFunction);
            }
        }
    }

    var searchElementTealium = function (nameAttribute, valueAttribute, message) {
        var obj = {};

        switch (nameAttribute.toLowerCase().trim()) {
            case "id":
                var elementCollection = new Array();
                var allElements = document.getElementsByTagName("*");
                for (i = 0; i < allElements.length; i++) {
                    if (allElements[i].id == valueAttribute)
                        obj[valueAttribute + i.toString()] = allElements[i];
                }
                break;
            case "name":
                if (document.getElementsByName(valueAttribute) !== null) {
                    obj[valueAttribute] = document.getElementsByName(valueAttribute);
                }
                break;
            case "class":
                if (document.getElementsByClassName(valueAttribute) !== null) {
                    var allElements = document.getElementsByClassName(valueAttribute);
                    for (i = 0; i < allElements.length; i++) {
                        obj[valueAttribute + i.toString()] = allElements[i];
                    }
                }
                break;
            default:
                var All = document.getElementsByTagName('*');
                var cont = 0;

                for (var i = 0; i < All.length; i++) {
                    if (All[i].getAttribute(nameAttribute) == valueAttribute) {
                        obj[cont] = All[i];
                        cont++;
                    }
                }
                break;
        }

        return obj;
    }

    var TealiumSetConversion = function (tag, idConversion, emailConversion, content_type, content_ids, value, content_name, content_category) {
        //Tags personalizados
        if (typeof (TealiumConversion) !== 'undefined') {
            TealiumConversion(tag, idConversion, emailConversion, content_type, content_ids, value, content_name, content_category);
        }
    }

    var FacebookPixel = function () {
        var content_ids = []
        var id = $("#ctl00_phMasterPage_GroupPacks_hddGroupPack").val();
        if (typeof (id) !== 'undefined' && id !== '') {
            var title = $("#GroupPacks" + id).attr("text");
            var price = $("#Group_" + id + " .price_content h4").html().replace(/\t/g, '').replace(/(\r\n|\n|\r)/g, "").replace("$", '').trim();

            content_ids.push(id)
            TealiumSetConversion('FacebookPixel', null, null, title, content_ids, price);
        }
    }

    var FacebookPixelLead = function (content_name) {
        var content_category = utag_data.ad_type_id + " : " + utag_data.ad_type + " > " + utag_data.category_level1_id + " : " + utag_data.category_level1

        TealiumSetConversion('FacebookPixelLead', null, null, null, null, 1, content_name, content_category);
    }

    var RegisterViewBasket = function ()
    {
        var Product_arrayPrice = []
        var Product_arrayPack = []
        var Product_arrayQuan = []
        $.each($(".checked"), function (key, value) {
            var code = $(value).attr("id").replace('price_', '');
            Product_arrayPrice.push($("#priceValue_" + code).val().replace("$ ",""));
            var pack = $("#packValue_" + code).val();
            Product_arrayPack.push(pack);
            var quan = $("[pack-value*='" + pack + "|']:first").text();
            Product_arrayQuan.push(quan.substring(0, quan.indexOf(" ")));
        });

        utag_data.lst_products_id = Product_arrayPack;
        utag_data.lst_products_price = Product_arrayPrice;
        utag_data.lst_products_quan = Product_arrayQuan;
    }

    var RegisterViewBasket = function () {
        var Product_arrayPrice = []
        var Product_arrayPack = []
        var Product_arrayQuan = []
        $.each($(".checked"), function (key, value) {
            var code = $(value).attr("id").replace('price_', '');
            Product_arrayPrice.push($("#priceValue_" + code).val().replace("$ ", ""));
            var pack = $("#packValue_" + code).val();
            Product_arrayPack.push(pack);
            var quan = $("[pack-value*='" + pack + "|']:first").text();
            Product_arrayQuan.push(quan.substring(0, quan.indexOf(" ")));
        });

        utag_data.lst_products_id = Product_arrayPack;
        utag_data.lst_products_price = Product_arrayPrice;
        utag_data.lst_products_quan = Product_arrayQuan;

        //trackingHit(null, 'SpecificTracking');
    }

    var RegisterViewItem = function (product) {
        var code = product.replace("Check_","");
        utag_data.product_id = $("#packValue_" + code).val();
        trackingHit(null, 'SpecificTracking');
    }
</script>

    <div id="Master_728x90"></div>
    
    <div class="page">
        <!-- TOP PUBLICITY-->
        
    <div id="div-ad-parent" style="overflow:hidden; transition:height 0.25s ease-in 0s; min-width:100%" class="parentAdsContainer">
        <div id="div-gpt-ad-1561580143967-0" provider="AdManager" platform="FR_Desktop_Lista_resultados" name="Expandible_Push_Resultados" size="[[970,415], [970,90], [970,70], [728,90]]" isapplysegmentation="true" class="AdvertisingContainer AdsPushdown" data-google-query-id="CPO5gtCc7e8CFUwXwwodj3sCuA"><div id="google_ads_iframe_/21801155815/FR_Desktop_Lista_resultados/Expandible_Push_Resultados_0__container__" style="border: 0pt none; margin: auto; text-align: center; width: 970px; height: 90px;"><iframe frameborder="0" src="https://a1965402475aa82ea85e2dfb9f030083.safeframe.googlesyndication.com/safeframe/1-0-38/html/container.html" id="google_ads_iframe_/21801155815/FR_Desktop_Lista_resultados/Expandible_Push_Resultados_0" title="3rd party ad content" name="" scrolling="no" marginwidth="0" marginheight="0" width="970" height="90" data-is-safeframe="true" sandbox="allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation" data-google-container-id="1" style="border: 0px; vertical-align: bottom;" data-load-complete="true"></iframe></div></div>
    </div>

        
            <!-- Area de Gestión - Botón publicar inmueble -->
            

<script type="text/javascript">
    var RegisteredClientId = 0;

    function GetValueJson(response, i, length) {
        var responseTmp = response.substring(i + length);
        var lengthVar = responseTmp.indexOf(";");
        var value = responseTmp.substring(0, lengthVar);
        if (value.indexOf("[]") == -1)
            return $.parseJSON(value);
        else
            return [];
    }

    //Inicialiaza los items de favoritos.
    function StartFavoritesAdverts(response) {
        setTimeout(function () {
            if (typeof LaunchFavorites !== "undefined") {
                i = response.indexOf("_favoriteAdverts=[]");
                if (i == -1) {
                    i = response.indexOf("_favoriteAdverts=[");
                    _favoriteAdverts = GetValueJson(response, i, 17);
                }

                if (typeof LoadGridFavorites !== "undefined")
                    LoadGridFavorites(1);
                else
                    LaunchFavorites();
            }
        }, 300);
    }

    function LoadHeaderASync() {
        jQuery.ajax({
            cache: false,
            type: "GET",
            url: "/HeaderV2.ashx?ButtonPublish=True&Management=True&LogoSize=1&SocialMedia=False&ClientId=",
            dataType: "html",
            success: function (response) {
                $("#THV2").empty();
                var node = document.getElementById('HeaderV2');
                if (node != null) {
                    node.parentNode.removeChild(node);
                }
                StartFavoritesAdverts(response);
                $("#THV2").replaceWith(response);
            }
        });
    }

    LoadHeaderASync();
    
</script>



<div id="THV2" class="HeaderContent">
    <div id="HeaderV2" class="Header-PublishButton">
        
        <div class="header header1" itemscope="" itemtype="http://schema.org/WPHeader">
            <div class="fincaraiz-branding">
                <a class="sm-fincaraiz-logo left img_print" href="/">
                    <div class="compound-logo"></div>
                </a>
                <div class="clear">
                </div>
            </div>
        </div>
        
        <div class="header">
            <!-- Area de Gestión - Botón publicar inmueble -->
            <div class="nav no_print">
                <div class="user-area">
                    

<ul class="left link-user">
    <li class="li-user" style="display:none">
        
    </li>
    
            <li class="li-user">
                
                <a href="/client/Client.aspx" class="vinculo" title="Gestión personal">Regístrate <i style="display:none" class="fa fa-sort-down"></i></a>
                
            </li>
        
            <li class="li-user">
                <img src="/App_Theme/images/user-shape.png" style="margin: -1pt;" width="auto" height="auto">
                <a href="/client/Client.aspx" class="vinculo" title="Gestión personal">Ingresa <i style="display:none" class="fa fa-sort-down"></i></a>
                
            </li>
        
</ul>



                </div>
            </div>
        </div>
        
        <div class="PublishButton">
            <a id="btnPriceAlert" class="button_resaltadoProm" onclick="return trackingClick(utag_data.event_name + ' - Boton Publicar','SpecificTracking')" href="/anuncios-clasificados-gratis-publicar-inmueble.aspx" title="Publique su inmueble">Publica GRATIS* en 1 paso
            </a>
        </div>
        
    </div>
</div>


        
        <!--MASTER CONTENT-->
        <div class="MasterPageContent">
            
    <form name="aspnetForm" method="post" action="./bogota" id="aspnetForm" autocomplete="off">
<div>
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUKMTAwNDAxMTEwN2RkemO2eixE72pg1wwX/ol9ge+Phi0=">
</div>

<div>

	<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="63301E89">
</div>
        
<script src="https://www.google.com/recaptcha/api.js" async="" defer=""></script>
<script type="text/javascript">
    var recaptchasitekey = "6Lc9_RUTAAAAAEk2cOguGou6KkxtddYpK4qeKuTr";
</script>
<div id="LoginRegisterPanel" class="RegisterControlContent">
    <div style="display: none">
        

<script type="text/javascript">
    var OpenWindowFacebook = function (_url, name, w, h) {
        var left = parseInt((screen.width / 2) - (w / 2));
        var top = parseInt((screen.height / 2) - (h / 2) - 100);
        var _params = "toolbar=no, location=no, modal=yes, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=" + w + ", height=" + h + ', top=' + top + ', left=' + left;
        window.open(_url, name, _params);
    }
    var functionClickFacebook = function () {
        OnClientClickFacebook();

        window.location.href = 'https://www.facebook.com/dialog/oauth?client_id=278151412365412&redirect_uri=https://www.fincaraiz.com.co/apartamentos/arriendo/bogota?nw=fb&display=popup&scope=email'; 

    }

    var OnClientClickFacebook = function(){
        
    }
</script>

<div id="btnFacebookLogin" class="login_fb">

    <a class="btn-social btn-facebook" onclick="functionClickFacebook();" id="lnkLoginFacebook">
        <div class="btn-social-content">
            <div class="facebook-icon btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="18" height="18.001" viewBox="0 0 18 18.001"><defs><clipPath id="a"><rect width="18" height="18" transform="translate(0.4)" fill="none"></rect></clipPath></defs><g transform="translate(-0.4)"><g clip-path="url(#a)"><path d="M2338.094,1331.04a9,9,0,1,0-10.407,8.892v-6.29H2325.4v-2.6h2.286v-1.983a3.176,3.176,0,0,1,3.4-3.5,13.834,13.834,0,0,1,2.015.176v2.215h-1.135a1.3,1.3,0,0,0-1.467,1.406v1.688h2.5l-.4,2.6h-2.1v6.29a9,9,0,0,0,7.595-8.892Z" transform="translate(-2319.632 -1322.04)" fill="#1877f2"></path></g><path d="M2332.6,1333.642l.4-2.6h-2.5v-1.688a1.3,1.3,0,0,1,1.467-1.406h1.135v-2.215a13.834,13.834,0,0,0-2.015-.176,3.176,3.176,0,0,0-3.4,3.5v1.983H2325.4v2.6h2.286v6.29a9.122,9.122,0,0,0,2.812,0v-6.29Z" transform="translate(-2319.632 -1322.04)" fill="#fff"></path></g></svg>
            </div>
            <div id="textoBtnFacebook" class="btn-label">
                Acceder con Facebook
            </div>
        </div>
    </a>
    <div id="ctl00_phMasterPage_LoginRegister_facebookLogin_statusFB" class="errorFB"></div>
    <input type="hidden" name="ctl00$phMasterPage$LoginRegister$facebookLogin$hddTokenFB" id="ctl00_phMasterPage_LoginRegister_facebookLogin_hddTokenFB">
</div>
        
<script type="text/javascript">
    var OpenWindowGmail = function (_url, name, w, h) {
        var left = parseInt((screen.width / 2) - (w / 2));
        var top = parseInt((screen.height / 2) - (h / 2) - 100);
        var _params = "toolbar=no, location=no, modal=yes, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=" + w + ", height=" + h + ', top=' + top + ', left=' + left;
        window.open(_url, name, _params);
    }

    var functionClickGmail = function () {
        
                window.location.href = 'https://accounts.google.com/o/oauth2/v2/auth?scope=openid%20profile%20email&include_granted_scopes=true&redirect_uri=https://www.fincaraiz.com.co/apartamentos/arriendo/bogota?nw=gm&response_type=code&client_id=751564689013-5mmokt7kti1qneh99thbrpk9lqo9hmd8.apps.googleusercontent.com';                
        
    }

</script>

<div id="btnGmailLogin" class="login_fb">

    <a class="btn-social btn-google" onclick="functionClickGmail();" id="lnkLoginGmail">
        <div class="btn-social-content">
            <div class="google-icon btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"><path d="M17.64,9.2a10.347,10.347,0,0,0-.164-1.841H9v3.481h4.844a4.14,4.14,0,0,1-1.8,2.716v2.258h2.909A8.777,8.777,0,0,0,17.64,9.2Z" fill="#4285f4" fill-rule="evenodd"></path><path d="M9,18a8.592,8.592,0,0,0,5.956-2.181l-2.909-2.258A5.43,5.43,0,0,1,3.964,10.71H.957v2.332A9,9,0,0,0,9,18Z" fill="#34a853" fill-rule="evenodd"></path><path d="M3.964,10.71a5.321,5.321,0,0,1,0-3.42V4.958H.957a9.011,9.011,0,0,0,0,8.084L3.964,10.71Z" fill="#fbbc05" fill-rule="evenodd"></path><path d="M9,3.58a4.862,4.862,0,0,1,3.441,1.346l2.581-2.581A8.649,8.649,0,0,0,9,0,9,9,0,0,0,.957,4.958L3.964,7.29A5.364,5.364,0,0,1,9,3.58Z" fill="#ea4335" fill-rule="evenodd"></path><path d="M0,0H18V18H0Z" fill="rgba(0,0,0,0)" fill-rule="evenodd"></path></svg>
            </div>
            <div id="textoBtnGmail" class="btn-label">
                Acceder con Google
            </div>
        </div>
    </a>
    <div id="ctl00_phMasterPage_LoginRegister_gmailLogin_statusFB" class="errorFB"></div>
    <input type="hidden" name="ctl00$phMasterPage$LoginRegister$gmailLogin$hddTokenFB" id="ctl00_phMasterPage_LoginRegister_gmailLogin_hddTokenFB">
</div>
        
<script type="text/javascript">
    var OpenWindowApple = function (_url, name, w, h) {
        var left = parseInt((screen.width / 2) - (w / 2));
        var top = parseInt((screen.height / 2) - (h / 2) - 100);
        var _params = "toolbar=no, location=no, modal=yes, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, width=" + w + ", height=" + h + ', top=' + top + ', left=' + left;
        window.open(_url, name, _params);
    }

    var functionClickApple = function () {
        
                window.location.href = 'https://appleid.apple.com/auth/authorize?scope=name%20email&client_id=web.co.com.fincaProd&redirect_uri=https://www.fincaraiz.com.co/apartamentos/arriendo/bogota&state=chqJAEDVd0aImfKJ0tqLw&response_type=code&response_mode=form_post&approval_prompt=auto';                
        
    }

</script>

<div id="btnAppleLogin" class="login_fb">

    <a class="btn-social btn-apple" onclick="functionClickApple();" id="lnkLoginApple">
        <div class="btn-social-content">
            <div class="apple-icon btn-icon">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 7.39 9.09"><defs><style>.cls-1{fill:#707070;}</style></defs><g id="Capa_2" data-name="Capa 2"><g id="Capa_1-2" data-name="Capa 1"><path class="cls-1" d="M7.15,3.1a2.05,2.05,0,0,0-1,1.73A2,2,0,0,0,7.39,6.67,5.12,5.12,0,0,1,6.77,8c-.39.55-.8,1.12-1.41,1.12s-.78-.37-1.49-.37-1,.38-1.51.38S1.4,8.57,1,7.93a5.54,5.54,0,0,1-.95-3,2.43,2.43,0,0,1,2.28-2.7c.6,0,1.1.39,1.48.39s.91-.41,1.6-.41A2.12,2.12,0,0,1,7.15,3.1ZM3.8,2.1H3.68a.65.65,0,0,1,0-.17A2,2,0,0,1,4.16.69,2,2,0,0,1,5.5,0a1,1,0,0,1,0,.18A2.05,2.05,0,0,1,5,1.45,1.77,1.77,0,0,1,3.8,2.1Z"></path></g></g></svg>
            </div>
            <div id="textoBtnApple" class="btn-label">
                Acceder con Apple
            </div>

        </div>
    </a>
    <div id="ctl00_phMasterPage_LoginRegister_appleLogin_statusFB" class="errorFB"></div>
    <input type="hidden" name="ctl00$phMasterPage$LoginRegister$appleLogin$hddTokenFB" id="ctl00_phMasterPage_LoginRegister_appleLogin_hddTokenFB">
</div>
    </div>
</div>

<script type="text/javascript">
    //Variables del proceso
    var advertId = '';
    var vurl = '';
    var contractType = 'Particular_Comprador';
    var registerUserToken = "11D8C67F8053C232FBE720ACE297E88BF490F55680A0A15D31205E0655B6E55172A3B738AF068BC9";
    var rclWidgetId = "";
    var dataUserRegister;

    function LoginFB(resp) {
        var data = ReadCookieNotEncrip("LoginFacebookFlag");
        if (data.length > 0) {
            var obj = $.parseJSON(data)
            _favoriteAdverts = [];
            var advertId = obj.AdvertId;
            var isAdd = obj.isAdd;
            FavoriteAdvert_Event(isAdd, advertId, function () {
                LoadHeaderASync();
                HideLoginRegisterPopup();
                CreateCookie("LoginFacebookFlag", "", 1, false);
            });
        }
    }

    function LoginGM(resp) {
        var data = ReadCookieNotEncrip("LoginGmailFlag");
        if (data.length > 0) {
            var obj = $.parseJSON(data)
            _favoriteAdverts = [];
            var advertId = obj.AdvertId;
            var isAdd = obj.isAdd;
            FavoriteAdvert_Event(isAdd, advertId, function () {
                LoadHeaderASync();
                HideLoginRegisterPopup();
                CreateCookie("LoginGmailFlag", "", 1, false);
            });
        }
    }

    function userNotRegister(message, resp, isFavorite = false) {
        alert(message);

        if (isFavorite)
            $('#btnCambio').click()
               
        dataUserRegister = jQuery.parseJSON(resp);
    } 


    function llenarCamposRegistro() {
        $("#txtEmailRegister").val(dataUserRegister.email);
        $("#txtNameRegister").val(dataUserRegister.first_name);
        $("#txtSurNameRegister").val(dataUserRegister.last_name);
        $("#txtPhoneRegister").val(dataUserRegister.phone);
        $("#txtRegistrationOriginID").val(dataUserRegister.idorigin);
        $("#txtPwsRegister").val(dataUserRegister.password);

        //$("#txtEmailRegister").attr("disabled", true);
       // $("#txtNameRegister").attr("disabled", true);
       // $("#txtSurNameRegister").attr("disabled", true);
        $("#divEmailConfirmRegister").hide();
        $("#divPasswordRegister").hide();
    }

 function LoginAP(resp) {
        var data = ReadCookieNotEncrip("LoginAppleFlag");
        if (data.length > 0) {
            var obj = $.parseJSON(data)
            _favoriteAdverts = [];
            var advertId = obj.AdvertId;
            var isAdd = obj.isAdd;
            FavoriteAdvert_Event(isAdd, advertId, function () {
                LoadHeaderASync();
                HideLoginRegisterPopup();
                CreateCookie("LoginAppleFlag", "", 1, false);
            });
        }
    }
    function CancelFB(message) {       
        alert(message);
    }

    function CancelGM(message) {
        alert(message);
    }

    function CancelAP(message) {
        alert(message);
    }

    function LoadLoginRegisterByMode(mode, configuration) {
        if (configuration != null) {
            var urlBase = "/App_Modules/Client/LoginRegisterV2.ashx?mode=" + mode;
            if (mode != "6" || mode != "7")
                urlBase = urlBase + "&Redirect=" + window.location.protocol + '//' + window.location.host + window.location.pathname;

            //Consulta la estructura html dependiendo del modo.
            jQuery.ajax({
                cache: false,
                type: "GET",
                url: urlBase,
                dataType: "html",
                success: function (response) {
                    if (mode != "6" && mode != "7" && mode != "8" && mode != "9") {
                        //Asigna la configuracion especifica al llamado actual
                        CustomerConfiguration = configuration;

                        //Limpia si existe una renderizacion previa.
                        ClearLoginRegisterRender();

                        //Obtiene el html que se visualizara
                        var html = LoginRegisterRender(configuration, response);

                        //Asigna el popup de ser necesario
                        if (configuration.Popup) {
                            LaunchLoginRegisterPopup(configuration, html);
                        }
                        else {
                            //Coloca el html en el panel por defecto
                            $("#LoginRegisterPanel").append(html);
                        }

                        //Cosas por defecto que se deban realizar
                        Initialsteps();

                        //Si tiene un evento para personalizar antes de iniciar.
                        if (typeof configuration.InitEvent == "function") {
                            configuration.InitEvent();
                        }

                        //Asigna los eventos y validaciones a las etiquetas generadas.
                        SetLoginRegisterEvent(mode);

                        if (typeof (window.PromoterManager) != "undefined" && typeof (window.PromoterManager.ShowModal) != "undefined") {                 
                            $(".overlay, #popup_ok, #skipRegister").bind("click", function () {                
                                window.PromoterManager.ShowModal();
                            });
                        }
                        //usuario logueado con exito pero no registrado
                        if (dataUserRegister)
                            llenarCamposRegistro();
                    }
                    else {
                        if (mode == "6")
                            window.location.href = response;
                        else if (mode == "7") {
                            OpenWindowFacebook(response, 'LoginFacebook', 500, 250)
                        }
                        else if (mode == "8") {
                            OpenWindowGmail(response, 'LoginGmail', 500, 560)
                        }
                        else if (mode == "9") {
                            OpenWindowApple(response, 'LoginApple', 648, 663)
                        }
                    }
                }
            });
        }
        else {
            alert("debe asignar una configuración el control");
        }
    }

</script>


        <div class="page-content" itemscope="" itemtype="http://schema.org/SearchResultsPage">
            <div class="Filter-Container">
                <div id="grid_results" class="grid_results">
                    <script type="text/javascript">
                        //si es por ajax, ocultamos la parrilla
                        var semantic = window.location.hash.replace("#", "");
                        if (semantic.indexOf("ad=") == 0) {
                            $("#grid_results").hide();
                        }
                        $(document).ready(
                            function () {
                                var textNoResults = '';

                                if (textNoResults != '') {
                                    if ('22139' == 0) {
                                        $("#AjaxNoAdverts").html("Hoy no tenemos inmuebles que coincidan con su búsqueda de: <b>" + textNoResults + "</b>. Consulte nuestro listado para encontrar más inmuebles: <a href='/todos/venta/colombia/index.aspx?ad=30|1||||1||||||||||||||||||||||||||||||'>Anuncios de Finca Raíz en Colombia</a>");
                                        $("#AjaxNoAdverts").show();
                                    }
                                    else
                                    {
                                        $("#AjaxNoAdverts").html(htmlNoAdverts.replace("{fulltitle}", textNoResults));
                                        $("#AjaxNoAdverts").show();
                                    }
                                }
                            }
                        );
                        var pulseObjectTypeText = 'ClassifiedAd';
                    </script>
                    <!--este div lo utilizamos cuando las consultas se hacen por ajax -->
                    <div id="AjaxNoAdverts" class="noAdverts" style="display: none"></div>
                </div>
                <div class="ResultsTitle">
                    <h5>INMUEBLES COMERCIALES</h5>
                </div>
                <div class="box_top_Galery" style="display: none !important;">
                    <!-- fotogalería -->
                    <div id="divPhotoGallery" class="GalleryContent"></div>
                </div>
                <div id="divBreadcrumbResults" class="breadcrumb">
                    
<div>
    <ul class="fa-ul">
         
                <li>
                    <a href="/">Inicio</a>
                   
                </li>          
                 <i class="fa fa-angle-right" style="margin:0px 0px; font-size: 12px;"></i>      
             
                <li>
                    <a href="/apartamentos/arriendo/cundinamarca/">Cundinamarca</a>
                   
                </li>          
                 <i class="fa fa-angle-right" style="margin:0px 0px; font-size: 12px;"></i>      
                
        <li>
            <a>Bogotá</a>
        </li>
    </ul>
</div>

                </div>
                <!-- título y botón publicar-->
                <h1 class="result_title" itemprop="headline">
                    <span id="lblNumInm">22,139&nbsp;</span><span id="lblResultTop">Apartamentos  en Arriendo en Bogotá</span>
                </h1>
                <!--Links de Barrios-->
                <div id="divLinkNeighborhoodsCtrl" class="neighbords">
                    
 

  <div id="divNeighborhoodLinks">
  <div id="ctl00_phMasterPage_NeighborhoodLinks1_divNeighborhoodBox">
   <div class="box-content" style="padding:6px">   
   
   <div style="color:Gray;font-size:10px" itemprop="significantLinks"> Barrios Sugeridos:    
  
     
       
      
        <a href="/apartamentos/arriendo/suba-centro/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Suba Centro - Bogotá">Suba Centro </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/mazuren/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Mazuren - Bogotá">Mazuren </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/sierras-del-moral/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Sierras Del Moral - Bogotá">Sierras Del Moral </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/batan/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Batan - Bogotá">Batan </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/jose-joaquin-vargas/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Jose Joaquin Vargas - Bogotá">Jose Joaquin Vargas </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/colina-norte/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Colina Norte - Bogotá">Colina Norte </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/cedro-bolivar/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Cedro Bolivar - Bogotá">Cedro Bolivar </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/zona-occidente/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Zona Occidente - Bogotá">Zona Occidente </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/altos-de-chozica/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Altos De Chozica - Bogotá">Altos De Chozica </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/ciudadela-colsubsidio/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Ciudadela Colsubsidio - Bogotá">Ciudadela Colsubsidio </a>&nbsp;
    
        
       
      
        <a href="/apartamentos/arriendo/nueva-tibabuyes/bogota/" class="vinculoNeigh" title="Apartamentos en Arriendo en Nueva Tibabuyes - Bogotá">Nueva Tibabuyes </a>&nbsp;
    
        
   
     <div class="clear"></div>
   </div>
   </div>
  </div>
</div>


                </div>
                <!-- breadcrumb localizaciones-->
                <div class="box_top">
                    <div id="gridLocations" class="LocationsContent">
                        
<div id="LocationsBreadcrumbFilters" autocomplete="off">
    <div class="navbar-form" id="olBCFilters" style="position: relative; float: left;">
        
                
                <div class="form-group" style="float: left; width: 219px; margin-left: -1px;">
                    <div class="form-control">
                        <div class="dropdown-check-list">
                            <div class="anchor" onclick="OpenItemOptionsLocations(this);">
                                <a href="/apartamentos/arriendo/cundinamarca/" onclick="return false;">Cundinamarca</a>
                            </div>
                            <div class="ContentCollapse">
                                <div class="drop">
                                    <ul class="items">
                                        <div class="scrollable">
                                            
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cundinamarca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" checked="" binding="Location1Id" value="67" parentlevel="0" locationname="Cundinamarca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cundinamarca/">Cundinamarca</a>
                                                        <span class="gray">(23483)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Antioquia" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="55" parentlevel="0" locationname="Antioquia" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/antioquia/">Antioquia</a>
                                                        <span class="gray">(21390)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Atlántico" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="57" parentlevel="0" locationname="Atlántico" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/atlantico/">Atlántico</a>
                                                        <span class="gray">(5434)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Santander" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="75" parentlevel="0" locationname="Santander" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/santander/">Santander</a>
                                                        <span class="gray">(4350)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Valle del Cauca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="82" parentlevel="0" locationname="Valle del Cauca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/alquiler/valle-del-cauca/">Valle del Cauca</a>
                                                        <span class="gray">(3699)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Bolívar" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="58" parentlevel="0" locationname="Bolívar" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/bolivar/">Bolívar</a>
                                                        <span class="gray">(2547)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Caldas" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="60" parentlevel="0" locationname="Caldas" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/caldas/">Caldas</a>
                                                        <span class="gray">(1532)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Risaralda" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="78" parentlevel="0" locationname="Risaralda" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/risaralda/">Risaralda</a>
                                                        <span class="gray">(1050)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Córdoba" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="66" parentlevel="0" locationname="Córdoba" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cordoba/">Córdoba</a>
                                                        <span class="gray">(842)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Magdalena" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="72" parentlevel="0" locationname="Magdalena" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/magdalena/">Magdalena</a>
                                                        <span class="gray">(479)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Tolima" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="81" parentlevel="0" locationname="Tolima" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/tolima/">Tolima</a>
                                                        <span class="gray">(359)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Norte Santander" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="85" parentlevel="0" locationname="Norte Santander" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/norte-santander/">Norte Santander</a>
                                                        <span class="gray">(320)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Quindío" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="77" parentlevel="0" locationname="Quindío" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/quindio/">Quindío</a>
                                                        <span class="gray">(291)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Nariño" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="74" parentlevel="0" locationname="Nariño" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/nariño/">Nariño</a>
                                                        <span class="gray">(234)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Boyacá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="59" parentlevel="0" locationname="Boyacá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/boyaca/">Boyacá</a>
                                                        <span class="gray">(198)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Meta" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="73" parentlevel="0" locationname="Meta" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/meta/">Meta</a>
                                                        <span class="gray">(174)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cesar" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="64" parentlevel="0" locationname="Cesar" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cesar/">Cesar</a>
                                                        <span class="gray">(97)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Huila" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="70" parentlevel="0" locationname="Huila" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/huila/">Huila</a>
                                                        <span class="gray">(88)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cauca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="63" parentlevel="0" locationname="Cauca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cauca/">Cauca</a>
                                                        <span class="gray">(49)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en San Andres y Providencia" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="79" parentlevel="0" locationname="San Andres y Providencia" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/san-andres-y-providencia/">San Andres y Providencia</a>
                                                        <span class="gray">(9)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Sucre" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="80" parentlevel="0" locationname="Sucre" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sucre/">Sucre</a>
                                                        <span class="gray">(8)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Casanare" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="62" parentlevel="0" locationname="Casanare" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/casanare/">Casanare</a>
                                                        <span class="gray">(5)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La guajira" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="71" parentlevel="0" locationname="La guajira" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-guajira/">La guajira</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Chocó" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="65" parentlevel="0" locationname="Chocó" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/choco/">Chocó</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Putumayo" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="76" parentlevel="0" locationname="Putumayo" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/putumayo/">Putumayo</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Caquetá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location1Id" value="61" parentlevel="0" locationname="Caquetá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/caqueta/">Caquetá</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                        </div>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
                
                <div class="form-group" style="float: left; width: 219px; margin-left: -1px;">
                    <div class="form-control">
                        <div class="dropdown-check-list">
                            <div class="anchor" onclick="OpenItemOptionsLocations(this);">
                                <a href="/apartamentos/arriendo/bogota/" onclick="return false;">Bogotá</a>
                            </div>
                            <div class="ContentCollapse">
                                <div class="drop">
                                    <ul class="items">
                                        <div class="scrollable">
                                            
                                                    
                                                    <li title="Apartamentos  en Arriendo en Bogotá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" checked="" binding="Location2Id" value="3630001" parentlevel="67" locationname="Bogotá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/bogota/">Bogotá</a>
                                                        <span class="gray">(22139)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Chía" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700003" parentlevel="67" locationname="Chía" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/chia/">Chía</a>
                                                        <span class="gray">(220)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Soacha" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700004" parentlevel="67" locationname="Soacha" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/soacha/">Soacha</a>
                                                        <span class="gray">(210)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Madrid" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700012" parentlevel="67" locationname="Madrid" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/madrid/">Madrid</a>
                                                        <span class="gray">(173)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Mosquera" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700002" parentlevel="67" locationname="Mosquera" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/mosquera/">Mosquera</a>
                                                        <span class="gray">(134)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cajicá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700009" parentlevel="67" locationname="Cajicá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cajica/">Cajicá</a>
                                                        <span class="gray">(119)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zipaquirá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700021" parentlevel="67" locationname="Zipaquirá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/zipaquira/">Zipaquirá</a>
                                                        <span class="gray">(106)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Ricaurte" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700029" parentlevel="67" locationname="Ricaurte" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/ricaurte/">Ricaurte</a>
                                                        <span class="gray">(85)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Tocancipá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700025" parentlevel="67" locationname="Tocancipá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/tocancipa/">Tocancipá</a>
                                                        <span class="gray">(52)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Girardot" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700001" parentlevel="67" locationname="Girardot" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/girardot/">Girardot</a>
                                                        <span class="gray">(39)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Fusagasugá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700016" parentlevel="67" locationname="Fusagasugá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/fusagasuga/">Fusagasugá</a>
                                                        <span class="gray">(35)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Facatativa" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700006" parentlevel="67" locationname="Facatativa" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/facatativa/">Facatativa</a>
                                                        <span class="gray">(33)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Funza" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700008" parentlevel="67" locationname="Funza" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/funza/">Funza</a>
                                                        <span class="gray">(29)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Otros Municipios" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700011" parentlevel="67" locationname="Otros Municipios" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/otros-municipios/cundinamarca/">Otros Municipios</a>
                                                        <span class="gray">(28)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Sopó" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700022" parentlevel="67" locationname="Sopó" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sopo/">Sopó</a>
                                                        <span class="gray">(19)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La Calera" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700017" parentlevel="67" locationname="La Calera" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-calera/">La Calera</a>
                                                        <span class="gray">(17)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Anapoima" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700014" parentlevel="67" locationname="Anapoima" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/anapoima/">Anapoima</a>
                                                        <span class="gray">(12)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Cota" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700015" parentlevel="67" locationname="Cota" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/cota/">Cota</a>
                                                        <span class="gray">(8)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La Mesa" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700018" parentlevel="67" locationname="La Mesa" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-mesa/">La Mesa</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Villeta" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700020" parentlevel="67" locationname="Villeta" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/villeta/">Villeta</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en La Vega" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700024" parentlevel="67" locationname="La Vega" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/la-vega/">La Vega</a>
                                                        <span class="gray">(3)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Gachancipá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700026" parentlevel="67" locationname="Gachancipá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/gachancipa/">Gachancipá</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Tenjo" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700027" parentlevel="67" locationname="Tenjo" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/tenjo/">Tenjo</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Silvania" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700038" parentlevel="67" locationname="Silvania" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/silvania/">Silvania</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en El Rosal" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700042" parentlevel="67" locationname="El Rosal" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/el-rosal/">El Rosal</a>
                                                        <span class="gray">(2)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Bojacá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700013" parentlevel="67" locationname="Bojacá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/bojaca/">Bojacá</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en El Colegio" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700028" parentlevel="67" locationname="El Colegio" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/el-colegio/">El Colegio</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Guasca" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700030" parentlevel="67" locationname="Guasca" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/guasca/">Guasca</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Chocontá" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700032" parentlevel="67" locationname="Chocontá" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/choconta/">Chocontá</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Sesquilé" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700035" parentlevel="67" locationname="Sesquilé" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sesquile/">Sesquilé</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Subachoque" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700037" parentlevel="67" locationname="Subachoque" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/subachoque/">Subachoque</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Puerto Salgar" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="6700040" parentlevel="67" locationname="Puerto Salgar" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/puerto-salgar/">Puerto Salgar</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Agua de Dios" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location2Id" value="8500104" parentlevel="67" locationname="Agua de Dios" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/agua-de-dios/">Agua de Dios</a>
                                                        <span class="gray">(1)</span>
                                                    </li>
                                                
                                        </div>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
                
                <div class="form-group" style="float: left; width: 219px; margin-left: -1px;">
                    <div class="form-control">
                        <div class="dropdown-check-list">
                            <div class="anchor" onclick="OpenItemOptionsLocations(this);">
                                <a href="/apartamentos/arriendo/bogota/" onclick="return false;">Seleccione Zona</a>
                            </div>
                            <div class="ContentCollapse">
                                <div class="drop">
                                    <ul class="items">
                                        <div class="scrollable">
                                            
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Norte" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630101" parentlevel="3630001" locationname="Zona Norte" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/norte/bogota/">Zona Norte</a>
                                                        <span class="gray">(8473)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Noroccidente" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630102" parentlevel="3630001" locationname="Zona Noroccidente" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/noroccidente/bogota/">Zona Noroccidente</a>
                                                        <span class="gray">(3515)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Occidente" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630104" parentlevel="3630001" locationname="Zona Occidente" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/occidente/bogota/">Zona Occidente</a>
                                                        <span class="gray">(3304)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Chapinero" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630103" parentlevel="3630001" locationname="Zona Chapinero" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/chapinero/bogota/">Zona Chapinero</a>
                                                        <span class="gray">(3293)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Centro" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630105" parentlevel="3630001" locationname="Zona Centro" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/centro/bogota/">Zona Centro</a>
                                                        <span class="gray">(1349)</span>
                                                    </li>
                                                
                                                    
                                                    <li title="Apartamentos  en Arriendo en Zona Sur" onclick="return ToggleCheckFromAnchor(this , event);" class="other_check">
                                                        <input type="checkbox" binding="Location3Id" value="3630106" parentlevel="3630001" locationname="Zona Sur" class="itemCheck" autocomplete="off">
                                                        <a class="locationItemLnk" href="/apartamentos/arriendo/sur/bogota/">Zona Sur</a>
                                                        <span class="gray">(1339)</span>
                                                    </li>
                                                
                                        </div>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            
        <div id="ctl00_phMasterPage_LocationsBreadcrumb_NbhoodSearch" class="form-group" style="float: left; width: 219px; margin-left: -1px; position: relative;">
            <input id="txtNbhood" list="list_donde" type="text" placeholder="Digita un barrio" class="form-control" value="" binding="Neighborhood" autocomplete="off" onclick="if ($(this).val() == '') { $(this).css('color', '#000'); } else { this.select(); };" onblur="if($(this).val()==''){;$(this).css('color','rgb(21, 36, 93)');};">
            <span id="btnClearNbhood" style="float: left; margin-left: -1px; position: absolute; top: 3px; right: -4px; display: none;"><i class="fa close" onclick="CleanNbhood(true)"></i></span>
        </div>
        <div id="BtnSearchBreadcrumb" onclick="SearchByButtom()" class="btn-search" style="cursor: pointer;"><i class="fa fa-search"></i>Buscar</div>
    </div>
</div>
<script type="text/javascript">
    LoadBreadcrumbFilterEvents();
    $(document).ready(function () {
        if (!(typeof AjaxEnabled !== "undefined" && AjaxEnabled)) {
            var ctrl = $("#olBCFilters");
            ctrl.addClass("NoAjax");
            ctrl.removeClass("Ajax");
        }

        //evento keyUp sobre txtNbhood
        //al presionar Enter, lanza la busqueda
        $("#txtNbhood").keyup(function (event) {
            var Value = $(this).val();
            //si presiona la tecla enter
            BtnClearWard(Value);

            if (event.keyCode == 13) {
                FindAdvertNbhood();
            }
        });

        BtnClearWard($("#txtNbhood").val());
    });
    //function SetNbhoodDefault() {
    //    var ctrl = $("#txtNbhood");
    //    ctrl.val(ctrl.attr("default")).css('color', 'rgb(21, 36, 93)');
    //}
    function ToggleCheckFromAnchor(item, event) {
        trackingAlreadyCalled = false;
        if (typeof AjaxEnabled !== "undefined" && AjaxEnabled) {
            var chks = (($(item).is('a') == true) ? $(item).parent().find("input[type='checkbox']") : $(item).find("input[type='checkbox']"));
            if (chks.length > 0) {
                var chk = $(chks[0]);
                if ($(event.target).is('input') == false) {
                    chk.attr('checked', !chk.attr('checked'));
                }
                chk.attr("changed", "true");
            }
            CleanNbhood(false);
            var CtrlParent = $(item).closest('.dropdown-check-list');
            if ($(CtrlParent).length > 0 && $(CtrlParent).find('input[type="checkbox"][binding="Location3Id"]').length > 0) {
                ChangeTextSelection(CtrlParent, 'input[type="checkbox"][binding="Location3Id"]:checked');
            }
            var ReturnValue = ($(event.target).is('a') == true) ? false : true;
            if (QuebeFindCall != undefined) { QuebeFindBreadCrumbCall(item, 1000); }
            return ReturnValue;
        }
        else {
            return true;
        }
    }

    function ChangeTextSelection(item, SelectorChilds) {
        var SelectedItems = $(item).find(SelectorChilds);
        var Textanchor = (($(SelectedItems).length == 1) ? $(SelectedItems[0]).attr('locationname') : (($(SelectedItems).length > 1) ? $(SelectedItems[0]).attr('locationname') + ", " + $(SelectedItems[1]).attr('locationname') : "Seleccione Zona"));
        $(item).find('.anchor').find('a').text(Textanchor);
    }

    function CleanNbhood(ExecuteSearch) {
        $("#txtNbhood").val('');
        $("#btnClearNbhood").css("display", "none");
        if (ExecuteSearch == true) { FindAdvertNbhood(); }
    }

    function FindAdvertNbhood() {
        var txtNbh = $("#txtNbhood");
        if (txtNbh.val() != "") {
            sfFind.Neighborhood = ValidIlegalCharacters(txtNbh.val());
            trackingClick("Results - Buscar por Barrio", "SpecificTracking");
        }
        else {
            sfFind.Neighborhood = "";
        }
        trackingAlreadyCalled = false;
        window.vmResults.FindAdvertsFacet('');
    }

    function BtnClearWard(MyValue) {
        if (MyValue == undefined || MyValue == "" || MyValue.length <= 0) {
            $("#btnClearNbhood").css("display", "none");
        }
        else {
            if ($("#btnClearNbhood").css("display") == "none") { $("#btnClearNbhood").css("display", "block"); }
        }
    }
</script>

                    </div>
                </div>
                <!-- paginador -->
                
            </div>
            <!--content-->
            <!--div mail tipos parrilla y paginado-->
            <div class="Grid" data-sticky-container="">
                
                <!--div filtros y pestañas -->
                <div>
                    <!--filtros-->
                    
<script type="text/javascript">
    var listTransactionTypes = [{ "optionValue": 1, "optionDisplay": "Venta" },{ "optionValue": 1, "optionDisplay": "Proyectos Nuevos" },{ "optionValue": 2, "optionDisplay": "Arriendo" },{ "optionValue": 3, "optionDisplay": "Alquiler Vacacional" }];
    var listTransactionSaleMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 20000000, "optionDisplay": "20 Millones" },{ "optionValue": 40000000, "optionDisplay": "40 Millones" },{ "optionValue": 60000000, "optionDisplay": "60 Millones" },{ "optionValue": 80000000, "optionDisplay": "80 Millones" },{ "optionValue": 100000000, "optionDisplay": "100 Millones" },{ "optionValue": 140000000, "optionDisplay": "140 Millones" },{ "optionValue": 200000000, "optionDisplay": "200 Millones" },{ "optionValue": 260000000, "optionDisplay": "260 Millones" },{ "optionValue": 300000000, "optionDisplay": "300 Millones" },{ "optionValue": 500000000, "optionDisplay": "500 Millones" }];
    var listTransactionSaleMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 20000000, "optionDisplay": "20 Millones" },{ "optionValue": 40000000, "optionDisplay": "40 Millones" },{ "optionValue": 60000000, "optionDisplay": "60 Millones" },{ "optionValue": 80000000, "optionDisplay": "80 Millones" },{ "optionValue": 100000000, "optionDisplay": "100 Millones" },{ "optionValue": 140000000, "optionDisplay": "140 Millones" },{ "optionValue": 200000000, "optionDisplay": "200 Millones" },{ "optionValue": 260000000, "optionDisplay": "260 Millones" },{ "optionValue": 300000000, "optionDisplay": "300 Millones" },{ "optionValue": 500000000, "optionDisplay": "500 Millones" },{ "optionValue": -1, "optionDisplay": "+500 Millones" }];
    var listTransactionRentMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var listTransactionRentMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 1500000, "optionDisplay": "1.5 Millones" },{ "optionValue": 2000000, "optionDisplay": "2 Millones" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 3000000, "optionDisplay": "3 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" },{ "optionValue": -1, "optionDisplay": "+4 Millones" }];
    var listTransactionVacationMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var listTransactionVacationMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 1500000, "optionDisplay": "1.5 Millones" },{ "optionValue": 2000000, "optionDisplay": "2 Millones" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 3000000, "optionDisplay": "3 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" },{ "optionValue": -1, "optionDisplay": "+4 Millones" }];
    var listCategoryParkingMinPrice = [{ "optionValue": 0, "optionDisplay": "0 Pesos" },{ "optionValue": 10000, "optionDisplay": "10 Mil" },{ "optionValue": 40000, "optionDisplay": "40 Mil" },{ "optionValue": 60000, "optionDisplay": "60 Mil" },{ "optionValue": 80000, "optionDisplay": "80 Mil" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 140000, "optionDisplay": "140 Mil" },{ "optionValue": 200000, "optionDisplay": "200 Mil" },{ "optionValue": 260000, "optionDisplay": "260 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var listCategoryParkingMaxPrice = [{ "optionValue": 0, "optionDisplay": "Todos" },{ "optionValue": 10000, "optionDisplay": "10 Mil" },{ "optionValue": 40000, "optionDisplay": "40 Mil" },{ "optionValue": 60000, "optionDisplay": "60 Mil" },{ "optionValue": 80000, "optionDisplay": "80 Mil" },{ "optionValue": 100000, "optionDisplay": "100 Mil" },{ "optionValue": 140000, "optionDisplay": "140 Mil" },{ "optionValue": 200000, "optionDisplay": "200 Mil" },{ "optionValue": 260000, "optionDisplay": "260 Mil" },{ "optionValue": 300000, "optionDisplay": "300 Mil" },{ "optionValue": 500000, "optionDisplay": "500 Mil" },{ "optionValue": 800000, "optionDisplay": "800 Mil" },{ "optionValue": 1000000, "optionDisplay": "1 Millón" },{ "optionValue": 2500000, "optionDisplay": "2.5 Millones" },{ "optionValue": 4000000, "optionDisplay": "4 Millones" }];
    var PresentTransaction = "Arriendo";
    var PresentCategory = "";
    var listFacets = [{data:[{Id:"8",Name:"Apartamento",Dictionary:"Category1Id",Count:"22139"},{Id:"4",Name:"Oficina",Dictionary:"Category1Id",Count:"7842"},{Id:"3",Name:"Local",Dictionary:"Category1Id",Count:"5144"},{Id:"22",Name:"Apartaestudio",Dictionary:"Category1Id",Count:"3368"},{Id:"9",Name:"Casa",Dictionary:"Category1Id",Count:"2430"},{Id:"10",Name:"Habitacion",Dictionary:"Category1Id",Count:"2093"},{Id:"5",Name:"Bodega",Dictionary:"Category1Id",Count:"1867"},{Id:"19",Name:"Edificio",Dictionary:"Category1Id",Count:"550"},{Id:"18",Name:"Consultorio",Dictionary:"Category1Id",Count:"329"},{Id:"24",Name:"Parqueadero",Dictionary:"Category1Id",Count:"81"},{Id:"2",Name:"Lote",Dictionary:"Category1Id",Count:"78"},{Id:"23",Name:"Casa Lote",Dictionary:"Category1Id",Count:"16"},{Id:"21",Name:"Casa Campestre",Dictionary:"Category1Id",Count:"11"},{Id:"7",Name:"Finca",Dictionary:"Category1Id",Count:"1"}],"info":"CategoryAdvert"},{data:[{Id:"4",Name:"Mi casa ya",Dictionary:"ProductCode",Count:"0"},{Id:"5",Name:"Sabana Bogotá",Dictionary:"ProductCode",Count:"0"}],"info":"ProductCodeAdvert"},{data:[{Id:"4",Name:"16 a 30 años",Dictionary:"AgeId",Count:"5926"},{Id:"2",Name:"1 a 8 años",Dictionary:"AgeId",Count:"5163"},{Id:"3",Name:"9 a 15 años",Dictionary:"AgeId",Count:"4867"},{Id:"5",Name:"Más de 30 años",Dictionary:"AgeId",Count:"2201"},{Id:"1",Name:"Menos de 1 año",Dictionary:"AgeId",Count:"1105"}],"info":"AgeAdvert"},{data:[{Id:"141",Name:"Trans. Público cercano",Dictionary:"ExtrasId",Count:"15307"},{Id:"143",Name:"Supermercados / C.Comerciales",Dictionary:"ExtrasId",Count:"13917"},{Id:"142",Name:"Parques cercanos",Dictionary:"ExtrasId",Count:"13512"},{Id:"139",Name:"Zona Residencial",Dictionary:"ExtrasId",Count:"13031"},{Id:"130",Name:"Citófono",Dictionary:"ExtrasId",Count:"12812"},{Id:"20",Name:"Cocina Integral",Dictionary:"ExtrasId",Count:"12623"},{Id:"133",Name:"Instalación de gas",Dictionary:"ExtrasId",Count:"12248"},{Id:"134",Name:"Zona de lavandería",Dictionary:"ExtrasId",Count:"11500"},{Id:"13",Name:"Ascensor",Dictionary:"ExtrasId",Count:"11078"},{Id:"140",Name:"Colegios / Universidades",Dictionary:"ExtrasId",Count:"10904"},{Id:"112",Name:"Salón Comunal",Dictionary:"ExtrasId",Count:"9046"},{Id:"115",Name:"Portería / Recepción",Dictionary:"ExtrasId",Count:"9030"},{Id:"128",Name:"Calentador",Dictionary:"ExtrasId",Count:"8946"},{Id:"5",Name:"Parqueadero Visitantes",Dictionary:"ExtrasId",Count:"8542"},{Id:"119",Name:"Vigilancia",Dictionary:"ExtrasId",Count:"7494"},{Id:"12",Name:"En conjunto cerrado",Dictionary:"ExtrasId",Count:"7315"},{Id:"117",Name:"Circuito cerrado de TV",Dictionary:"ExtrasId",Count:"7242"},{Id:"11",Name:"Depósito / Bodega",Dictionary:"ExtrasId",Count:"6692"},{Id:"124",Name:"Hall de Alcobas",Dictionary:"ExtrasId",Count:"6649"},{Id:"121",Name:"Baño Auxiliar",Dictionary:"ExtrasId",Count:"6267"},{Id:"109",Name:"Garaje(s)",Dictionary:"ExtrasId",Count:"5833"},{Id:"107",Name:"Zonas Verdes",Dictionary:"ExtrasId",Count:"5440"},{Id:"106",Name:"Zona Infantil",Dictionary:"ExtrasId",Count:"5235"},{Id:"180",Name:"Closet",Dictionary:"ExtrasId",Count:"5163"},{Id:"122",Name:"Estudio",Dictionary:"ExtrasId",Count:"5154"},{Id:"32",Name:"Balcón",Dictionary:"ExtrasId",Count:"4999"},{Id:"129",Name:"Chimenea",Dictionary:"ExtrasId",Count:"4737"},{Id:"137",Name:"Zona Comercial",Dictionary:"ExtrasId",Count:"4539"},{Id:"4",Name:"Piso en Baldosa /  Mármol",Dictionary:"ExtrasId",Count:"4215"},{Id:"263",Name:"Cómodas vias de acceso",Dictionary:"ExtrasId",Count:"4179"},{Id:"135",Name:"Sobre vía principal",Dictionary:"ExtrasId",Count:"4084"},{Id:"131",Name:"Cocina tipo Americano",Dictionary:"ExtrasId",Count:"4078"},{Id:"245",Name:"Vigilancia privada 24*7",Dictionary:"ExtrasId",Count:"4058"},{Id:"157",Name:"Portería / Vigilancia",Dictionary:"ExtrasId",Count:"3787"},{Id:"103",Name:"Gimnasio",Dictionary:"ExtrasId",Count:"3667"},{Id:"189",Name:"Sobre vía secundaria",Dictionary:"ExtrasId",Count:"3457"},{Id:"126",Name:"Vista panorámica",Dictionary:"ExtrasId",Count:"3330"},{Id:"10",Name:"Terraza",Dictionary:"ExtrasId",Count:"3048"},{Id:"127",Name:"Barra estilo americano",Dictionary:"ExtrasId",Count:"2771"},{Id:"207",Name:"Garaje Cubierto",Dictionary:"ExtrasId",Count:"2755"},{Id:"0",Name:"Sin Especificar",Dictionary:"ExtrasId",Count:"2664"},{Id:"211",Name:"Comedor",Dictionary:"ExtrasId",Count:"2573"},{Id:"217",Name:"Piso en Madera",Dictionary:"ExtrasId",Count:"2459"},{Id:"272",Name:"Cuarto de Servicio",Dictionary:"ExtrasId",Count:"2348"},{Id:"7",Name:"Jardín",Dictionary:"ExtrasId",Count:"2234"},{Id:"164",Name:"Garaje / Parqueadero(s)",Dictionary:"ExtrasId",Count:"2075"},{Id:"147",Name:"Vigilancia 24x7",Dictionary:"ExtrasId",Count:"1906"},{Id:"105",Name:"Salón de Juegos",Dictionary:"ExtrasId",Count:"1784"},{Id:"222",Name:"Shut de basura",Dictionary:"ExtrasId",Count:"1595"},{Id:"200",Name:"Área Urbana",Dictionary:"ExtrasId",Count:"1509"},{Id:"145",Name:"Loft",Dictionary:"ExtrasId",Count:"1464"},{Id:"259",Name:"Restaurantes",Dictionary:"ExtrasId",Count:"1457"},{Id:"214",Name:"Escalera de Emergencia",Dictionary:"ExtrasId",Count:"1372"},{Id:"270",Name:"Servicios independientes",Dictionary:"ExtrasId",Count:"1352"},{Id:"114",Name:"Vivienda Multifamiliar",Dictionary:"ExtrasId",Count:"1339"},{Id:"118",Name:"Planta Eléctrica",Dictionary:"ExtrasId",Count:"1324"},{Id:"16",Name:"Patio",Dictionary:"ExtrasId",Count:"1298"},{Id:"19",Name:"Amoblado",Dictionary:"ExtrasId",Count:"1281"},{Id:"116",Name:"Caldera",Dictionary:"ExtrasId",Count:"1194"},{Id:"132",Name:"Comedor auxiliar",Dictionary:"ExtrasId",Count:"1172"},{Id:"17",Name:"Piscina",Dictionary:"ExtrasId",Count:"1149"},{Id:"193",Name:"Ventilación Natural",Dictionary:"ExtrasId",Count:"1135"},{Id:"185",Name:"En Edificio",Dictionary:"ExtrasId",Count:"1096"},{Id:"260",Name:"Bombas de gasolina",Dictionary:"ExtrasId",Count:"1089"},{Id:"177",Name:"Zona de BBQ",Dictionary:"ExtrasId",Count:"1034"},{Id:"264",Name:"Cerca centro comercial",Dictionary:"ExtrasId",Count:"1009"},{Id:"218",Name:"Puerta de seguridad",Dictionary:"ExtrasId",Count:"994"},{Id:"148",Name:"Bahía exterior de parqueo",Dictionary:"ExtrasId",Count:"948"},{Id:"125",Name:"Sauna / Turco / Jacuzzi",Dictionary:"ExtrasId",Count:"936"},{Id:"120",Name:"Alarma",Dictionary:"ExtrasId",Count:"934"},{Id:"144",Name:"Duplex",Dictionary:"ExtrasId",Count:"895"},{Id:"174",Name:"Cocina Equipada",Dictionary:"ExtrasId",Count:"895"},{Id:"100",Name:"Cancha de Squash",Dictionary:"ExtrasId",Count:"889"},{Id:"202",Name:"Cerca a sector comercial",Dictionary:"ExtrasId",Count:"814"},{Id:"186",Name:"En zona Comercial",Dictionary:"ExtrasId",Count:"732"},{Id:"262",Name:"Seguridad",Dictionary:"ExtrasId",Count:"676"},{Id:"187",Name:"En zona residencial",Dictionary:"ExtrasId",Count:"671"},{Id:"150",Name:"Tanques de Agua",Dictionary:"ExtrasId",Count:"516"},{Id:"108",Name:"Cuarto de Escoltas",Dictionary:"ExtrasId",Count:"513"},{Id:"102",Name:"Canchas Deportivas",Dictionary:"ExtrasId",Count:"509"},{Id:"181",Name:"Baño Independiente",Dictionary:"ExtrasId",Count:"507"},{Id:"159",Name:"Cerca de Zona Urbana",Dictionary:"ExtrasId",Count:"506"},{Id:"267",Name:"Alcantarillado",Dictionary:"ExtrasId",Count:"484"},{Id:"175",Name:"Servicios Públicos",Dictionary:"ExtrasId",Count:"470"},{Id:"123",Name:"Cuarto de servicio",Dictionary:"ExtrasId",Count:"456"},{Id:"162",Name:"Cancha de Baloncesto",Dictionary:"ExtrasId",Count:"424"},{Id:"192",Name:"Todos los Servicios",Dictionary:"ExtrasId",Count:"414"},{Id:"163",Name:"Cancha de Futbol",Dictionary:"ExtrasId",Count:"396"},{Id:"138",Name:"Zona Industrial",Dictionary:"ExtrasId",Count:"393"},{Id:"156",Name:"Acceso Pavimentado",Dictionary:"ExtrasId",Count:"377"},{Id:"171",Name:"Cochera",Dictionary:"ExtrasId",Count:"374"},{Id:"113",Name:"Vivienda Bifamiliar",Dictionary:"ExtrasId",Count:"338"},{Id:"325",Name:"Sauna / Turco / Jacuzzi",Dictionary:"ExtrasId",Count:"334"},{Id:"146",Name:"PentHouse",Dictionary:"ExtrasId",Count:"329"},{Id:"101",Name:"Cancha de Tennis",Dictionary:"ExtrasId",Count:"282"},{Id:"249",Name:"Senderos ecológicos",Dictionary:"ExtrasId",Count:"282"},{Id:"216",Name:"Piso en Alfombra",Dictionary:"ExtrasId",Count:"281"},{Id:"273",Name:"Baño de Servicio",Dictionary:"ExtrasId",Count:"274"},{Id:"155",Name:"Despensa",Dictionary:"ExtrasId",Count:"260"},{Id:"250",Name:"Asador",Dictionary:"ExtrasId",Count:"238"}],"info":"ExtrasAdvert"},{data:[{Id:"3/31/2021 12:00:00 AM",Name:"Últimos 7 días",Dictionary:"GridDate",Count:"2436"},{Id:"4/4/2021 12:00:00 AM",Name:"Últimos 3 días",Dictionary:"GridDate",Count:"1839"},{Id:"4/7/2021 12:00:00 AM",Name:"Hoy",Dictionary:"GridDate",Count:"415"}],"info":"GridDateAdvert"},{data:[{Id:"3",Name:"Inmuebles con foto",Dictionary:"NumPhotos",Count:"23050"}],"info":"OtherFiltersAdvert"},{data:[{Id:"",Name:"",Dictionary:"GroupName",Count:"19162"},{Id:"AFYDI",Name:"AFYDI",Dictionary:"GroupName",Count:"1767"},{Id:"Lonja de Bogotá",Name:"Lonja de Bogotá",Dictionary:"GroupName",Count:"610"},{Id:"REMAX",Name:"REMAX",Dictionary:"GroupName",Count:"104"},{Id:"Century 21",Name:"Century 21",Dictionary:"GroupName",Count:"33"},{Id:"Lonja de Santander",Name:"Lonja de Santander",Dictionary:"GroupName",Count:"1"}],"info":"GroupNameAdvert"},{data:[{Id:"3",Name:"3",Dictionary:"StratumId",Count:"6012"},{Id:"4",Name:"4",Dictionary:"StratumId",Count:"6007"},{Id:"6",Name:"6",Dictionary:"StratumId",Count:"5431"},{Id:"5",Name:"5",Dictionary:"StratumId",Count:"3147"},{Id:"2",Name:"2",Dictionary:"StratumId",Count:"1030"},{Id:"",Name:"",Dictionary:"StratumId",Count:"452"},{Id:"1",Name:"1",Dictionary:"StratumId",Count:"57"},{Id:"Campestre",Name:"Campestre",Dictionary:"StratumId",Count:"3"}],"info":"StratumAdvert"}];
    var listPriceTypes = [{ "optionValue": 1, "optionDisplay": "Costo mensual" },{ "optionValue": 2, "optionDisplay": "Costo diario" }];
    var listEnvironments = [{ "optionValue": 1, "optionDisplay": "1" },{ "optionValue": 2, "optionDisplay": "2" },{ "optionValue": 3, "optionDisplay": "3" },{ "optionValue": 4, "optionDisplay": "4+" }];
    var listRomms = [{ "optionValue": 1, "optionDisplay": "1" },{ "optionValue": 2, "optionDisplay": "2" },{ "optionValue": 3, "optionDisplay": "3" },{ "optionValue": 4, "optionDisplay": "4+" }];
    var listBathRomms = [{ "optionValue": 1, "optionDisplay": "1" },{ "optionValue": 2, "optionDisplay": "2" },{ "optionValue": 3, "optionDisplay": "3" },{ "optionValue": 4, "optionDisplay": "4+" }];
    var listSurfaceFrom = [{ "optionValue": 0, "optionDisplay": "Seleccione" },{ "optionValue": 20, "optionDisplay": "20 m2" },{ "optionValue": 60, "optionDisplay": "60 m2" },{ "optionValue": 100, "optionDisplay": "100 m2" },{ "optionValue": 200, "optionDisplay": "200 m2" },{ "optionValue": 260, "optionDisplay": "260 m2" },{ "optionValue": 500, "optionDisplay": "500 m2" },{ "optionValue": 560, "optionDisplay": "560 m2" },{ "optionValue": 1000, "optionDisplay": "1000 m2" }];
    var listSurfaceTo = [{ "optionValue": 0, "optionDisplay": "Seleccione" },{ "optionValue": 20, "optionDisplay": "20 m2" },{ "optionValue": 60, "optionDisplay": "60 m2" },{ "optionValue": 100, "optionDisplay": "100 m2" },{ "optionValue": 200, "optionDisplay": "200 m2" },{ "optionValue": 260, "optionDisplay": "260 m2" },{ "optionValue": 500, "optionDisplay": "500 m2" },{ "optionValue": 560, "optionDisplay": "560 m2" },{ "optionValue": 1000, "optionDisplay": "1000 m2" },{ "optionValue": -1, "optionDisplay": "+1000 m2" }];
    var listParkingSize = [{ "optionValue": 278, "optionDisplay": "Pequeño" },{ "optionValue": 279, "optionDisplay": "Mediano" },{ "optionValue": 280, "optionDisplay": "Grande" }];
    var listParkingAvailability = [{ "optionValue": 281, "optionDisplay": "Lunes" },{ "optionValue": 282, "optionDisplay": "Martes" },{ "optionValue": 283, "optionDisplay": "Miercoles" },{ "optionValue": 284, "optionDisplay": "Jueves" },{ "optionValue": 285, "optionDisplay": "Viernes" },{ "optionValue": 286, "optionDisplay": "Sabado" },{ "optionValue": 287, "optionDisplay": "Domingo" }];
    var ParentCategory = 1;

    function InitializeViewModelFilters() {
        ko.options.useOnlyNativeEvents = true;
        if (typeof (window.vmResults) == "undefined") { window.vmResults = new AdvertResultsViewModel(); };
        UpdateCountersTransactionTypes();
        if (PresentTransaction == "Venta") {
            window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionSaleMinPrice, listTransactionSaleMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
        }
        else if (PresentTransaction == "Arriendo") {
            if (PresentCategory == "24") {
                window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listCategoryParkingMinPrice, listCategoryParkingMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
            }
            else {
                window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionRentMinPrice, listTransactionRentMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
            }
        }
        else if (PresentTransaction == "Alquiler_Vacacional") {
            window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionVacationMinPrice, listTransactionVacationMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
        }
        else {
            window.vmResults.init(listTransactionTypes, listFacets, listPriceTypes, listTransactionVacationMinPrice, listTransactionVacationMaxPrice, listEnvironments, listRomms, listBathRomms, listSurfaceFrom, listSurfaceTo, listParkingSize, listParkingAvailability, sfFind, ParentCategory);
        }
        if (!!ko.dataFor(document.getElementById("FiltersKnockOut")) == false) { ko.applyBindings(window.vmResults); }
    }

    function UpdateCountersTransactionTypes() {
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Venta"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Venta"; })[0].optionCount = "38647"; }
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Proyectos Nuevos"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Proyectos Nuevos"; })[0].optionCount = "480"; }
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Arriendo"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Arriendo"; })[0].optionCount = "22139"; }
        if (listTransactionTypes != undefined && listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Alquiler Vacacional"; }).length > 0) { listTransactionTypes.filter(function (obj) { return obj.optionDisplay == "Alquiler Vacacional"; })[0].optionCount = "107"; }
    }

</script>
<div id="FiltersKnockOut" class="Filter-Container" style="width: 182px; margin: 10px 2px 0 0; clear: both; float: left; position: relative;">
    <div class="filters">
        <div class="filter_items" style="padding: 0px 0px 0px 0px;">
            <div class="alert-box">
                <span>Te ayudamos a <strong>
                    <br>
                    buscar</strong> tu inmueble</span>
                <div class="center">
                    
                    <a id="btnPriceAlert" class="button" href="javascript:Alert24x7(0,true)" title="">Registrate</a>
                    
                </div>
            </div>
        </div>
        <div class="filter_items">
            <div style="display: none;" class="title_filters">¡Filtrar aqui!</div>
            <!--summary-->
            <div class="tags" style="display: none;">
                <div class="content" data-bind="foreach: Filters().ChosenFilters()">
                    <span data-bind="text: Text, title: Text,event: { click: callBackFill }, css: Custom">Arriendo</span>
                
                    <span data-bind="text: Text, title: Text,event: { click: callBackFill }, css: Custom">Apartamento</span>
                </div>
            </div>
        </div>
        <!--Busqueda por Palabra-->
        <div class="filter_items">
            <div class="input-group">
                <input id="txtSearch" type="text" onclick="this.select()" placeholder="Buscar por palabra" data-bind="    textInput: Filters().Word" style="text-align: left;">
                <div data-bind="click: FindAdvertByWord" class="searchBtnText">
                    <span><i class="fa fa-search ico_word"></i></span>
                </div>
            </div>
        </div>
        <!--Tipo de Oferta-->
        <div id="divOfertType" class="filter_items offer collapse">
            <div class="TitleContent">
                <span class="title_box">Tipo de oferta</span><i class="btn_collapse fa fa-minus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: block;" data-bind="visible: Filters().OfertType().filter(function (obj, inx, arr) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType != '2' &amp;&amp; obj.GroupType != '0' })">
                <ul class="items" data-bind="foreach: Filters().OfertType().filter(function (obj, inx, arr) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType != '2' &amp;&amp; obj.GroupType != '0'})">                    
                    <li class="other_check">
                        <div data-bind="event: { click: $root.Filters().changeOfertType }">
                            <input type="radio" data-bind="attr: { value: Valor, alt: Name, checked: Selected(),  group: 'OfertType'}" value="1" alt="Venta" group="OfertType">
                            <label>
                                <span data-bind="text: (Name + ' ' + Alias), title: Name">Venta (nuevo y usado)</span>
                                <span class="gray" data-bind="text: CountToShow"> (38647)</span>
                            </label>
                        </div>
                    </li>
                                    
                    <li class="other_check">
                        <div data-bind="event: { click: $root.Filters().changeOfertType }">
                            <input type="radio" data-bind="attr: { value: Valor, alt: Name, checked: Selected(),  group: 'OfertType'}" value="2" alt="Arriendo" checked="true" group="OfertType">
                            <label>
                                <span data-bind="text: (Name + ' ' + Alias), title: Name">Arriendo </span>
                                <span class="gray" data-bind="text: CountToShow"> (22139)</span>
                            </label>
                        </div>
                    </li>
                                    
                    <li class="other_check">
                        <div data-bind="event: { click: $root.Filters().changeOfertType }">
                            <input type="radio" data-bind="attr: { value: Valor, alt: Name, checked: Selected(),  group: 'OfertType'}" value="3" alt="Alquiler Vacacional" group="OfertType">
                            <label>
                                <span data-bind="text: (Name + ' ' + Alias), title: Name">Alquiler Vacacional </span>
                                <span class="gray" data-bind="text: CountToShow"> (107)</span>
                            </label>
                        </div>
                    </li>
                </ul>
            </div>
            <div data-bind="visible:Filters().OfertType().filter(function (obj) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType =='2'; }).length > 0">
                <ul id="facet_ProyectosNuevos" class="items" facet="ProyectosNuevos" data-bind="foreach: Filters().OfertType().filter(function (obj) { return obj.Visible() == true &amp;&amp; obj.Count() > 0 &amp;&amp; obj.GroupType =='2'; })">
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenOnlyNewProyect }">
                        <div class="proyectos_nuevos" style="cursor: pointer;">
                            <input id="chkProyectosNuevos" type="checkbox" data-bind="attr: { value: Valor, alt: Name, checked: $root.Filters().OnlyNewProyects() }, css: { checkbox_complete: $root.Filters().OnlyNewProyects() }" style="cursor: inherit;" value="1" alt="Proyectos Nuevos">
                            <label data-bind="text: 'Ver Proyectos nuevos', title: Name" style="cursor: inherit; font-size: 12px !important; margin-bottom: 2px;">Ver Proyectos nuevos</label>
                            <i data-bind="visible: GroupType =='2'" style="float: right; margin: 6px -2px 2px 2px; color: #06C;" class="ico icon-conjunto"></i>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <!--Products Code-->
        <div class="filter_items  collapse" data-bind="visible: Filters().ProductCodeAdvert().length > 0" style="display: none;">

            <div class="ContentCollapse" style="display: block;">
                <ul id="facet_ProductCodeAdvert" class="items" facet="ProductCodeAdvert" data-bind="foreach: Filters().ProductCodeAdvert();"></ul>
            </div>
        </div>
        <!--Caracteristicas Precio, Dispinibilidad, Tamaño-->
        <div id="ctl00_phMasterPage_Filters2_contentFeatures">
            <div class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Precio</span><i class="btn_collapse fa fa-minus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: block;">
                    <div id="divPriceType" class="filter_items" data-bind="visible: Filters().PriceType().length > 0 &amp;&amp; Filters().ShowParkingFilters() == true" style="display: none;">
                        <ul id="facet_PriceType" class="items" style="position: relative;" data-bind="foreach: Filters().PriceType()">
                            <li class="other_check" data-bind="event: { click: $root.Filters().chosenPriceType }, attr: { title: Name }" title="Costo mensual">
                                <div data-bind="attr: { title: Name }" title="Costo mensual">
                                    <input type="checkbox" data-bind="attr: { value: Valor, alt: Name, checked: Selected() }" style="cursor: inherit;" autocomplete="off" value="1" alt="Costo mensual">
                                    <label data-bind="text: Name, title: Name" style="cursor: inherit;">Costo mensual</label>
                                </div>
                            </li>
                        
                            <li class="other_check" data-bind="event: { click: $root.Filters().chosenPriceType }, attr: { title: Name }" title="Costo diario">
                                <div data-bind="attr: { title: Name }" title="Costo diario">
                                    <input type="checkbox" data-bind="attr: { value: Valor, alt: Name, checked: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="Costo diario">
                                    <label data-bind="text: Name, title: Name" style="cursor: inherit;">Costo diario</label>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="input-group">
                        <input id="priceFromFilter" type="text" placeholder="Desde $" data-bind="textInput: Filters().chosenPriceFrom" maxlength="16" autocomplete="off">
                        <span><i class="fa close" data-bind="visible: Filters().chosenPriceFrom() != undefined &amp;&amp; Filters().chosenPriceFrom() != '', event: { click: function () { $root.Filters().chosenPriceFrom(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                    <div class="input-group">
                        <input id="priceToFilter" type="text" placeholder="Hasta $" data-bind="textInput: Filters().chosenPriceTo, style: { 'border-color': Filters().chosenPriceRangeGuard() == true ? '#CCCCCC' : '#CE2323' } " maxlength="16" autocomplete="off" style="border-color: rgb(204, 204, 204);">
                        <span><i class="fa close" data-bind="visible: Filters().chosenPriceTo() != undefined &amp;&amp; Filters().chosenPriceTo() != '', event: { click: function () { $root.Filters().chosenPriceTo(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                </div>
            </div>
            <!--Categorias-->
            <div data-bind="visible: Filters().CategoryAdvert().length > 0" class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Tipo de Inmueble</span><i class="btn_collapse fa fa-minus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: block;">
                    <ul id="facet_CategoryAdvert" facet="CategoryAdvert" class="items" data-bind="foreach: Filters().CategoryAdvert()">
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="8" alt="Apartamento" checked="true" class="checkbox_complete">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Apartamento</label>
                                <span class="gray" data-bind="text: CountToShow">(22139)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="Oficina">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Oficina</label>
                                <span class="gray" data-bind="text: CountToShow">(7842)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="3" alt="Local">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Local</label>
                                <span class="gray" data-bind="text: CountToShow">(5144)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="22" alt="Apartaestudio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Apartaestudio</label>
                                <span class="gray" data-bind="text: CountToShow">(3368)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="9" alt="Casa">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Casa</label>
                                <span class="gray" data-bind="text: CountToShow">(2430)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="10" alt="Habitacion">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Habitacion</label>
                                <span class="gray" data-bind="text: CountToShow">(2093)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Bodega">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Bodega</label>
                                <span class="gray" data-bind="text: CountToShow">(1867)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="19" alt="Edificio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Edificio</label>
                                <span class="gray" data-bind="text: CountToShow">(550)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="18" alt="Consultorio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Consultorio</label>
                                <span class="gray" data-bind="text: CountToShow">(329)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="24" alt="Parqueadero">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Parqueadero</label>
                                <span class="gray" data-bind="text: CountToShow">(81)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="Lote">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Lote</label>
                                <span class="gray" data-bind="text: CountToShow">(78)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="23" alt="Casa Lote">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Casa Lote</label>
                                <span class="gray" data-bind="text: CountToShow">(16)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="21" alt="Casa Campestre">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Casa Campestre</label>
                                <span class="gray" data-bind="text: CountToShow">(11)</span>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: function (Facet, event) { Facet.SelectItem(Facet, event); QuebeFindCall(1000); } }">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="7" alt="Finca">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Finca</label>
                                <span class="gray" data-bind="text: CountToShow">(1)</span>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>

            <div id="divGroupAvailability" class="filter_items collapse" data-bind="visible: Filters().ExtrasParkingAvailability().length > 0 &amp;&amp; Filters().ShowParkingFilters() == true" style="display: none;">
                <div class="TitleContent">
                    <span class="title_box">Disponiblidad</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <ul class="items" data-bind="foreach: Filters().ExtrasParkingAvailability()">
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Lunes">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="281" alt="Lunes" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Lunes</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Martes">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="282" alt="Martes" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Martes</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Miercoles">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="283" alt="Miercoles" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Miercoles</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Jueves">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="284" alt="Jueves" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Jueves</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Viernes">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="285" alt="Viernes" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Viernes</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Sabado">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="286" alt="Sabado" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Sabado</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Domingo">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Availability',checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="287" alt="Domingo" group="Availability">
                                <label data-bind="text: Name" style="cursor: inherit;">Domingo</label>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
            <div id="divGroupSize" class="filter_items collapse" data-bind="visible: Filters().ExtrasParkingSize().length > 0 &amp;&amp; Filters().ShowParkingFilters() == true" style="display: none;">
                <div class="TitleContent">
                    <span class="title_box">Tamaño</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <ul class="items" data-bind="foreach: Filters().ExtrasParkingSize()">
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Pequeño">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Parking', checked: Selected()}, css: { checkbox_complete: Selected()}" value="278" alt="Pequeño" group="Parking">
                                <label data-bind="text: Name" style="cursor: inherit;">Pequeño</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Mediano">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Parking', checked: Selected()}, css: { checkbox_complete: Selected()}" value="279" alt="Mediano" group="Parking">
                                <label data-bind="text: Name" style="cursor: inherit;">Mediano</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }, attr: { title: Name }" title="Grande">
                            <div>
                                <input type="checkbox" data-bind="attr: { value: ExtraID, alt: Name, group: 'Parking', checked: Selected()}, css: { checkbox_complete: Selected()}" value="280" alt="Grande" group="Parking">
                                <label data-bind="text: Name" style="cursor: inherit;">Grande</label>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <!--Estato-->
        <div id="divStratum" data-bind="visible: Filters().StratumAdvert().length > 0" class="filter_items collapse">
            <div class="TitleContent">
                <span class="title_box">Estrato</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_stratumAdvert" class="items" facet="StratumAdvert" data-bind="foreach: Filters().StratumAdvert()">
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="Campestre" alt="Campestre">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Campestre</label>
                            <span class="gray" data-bind="text: CountToShow">(3)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="1" alt="Estrato 1">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 1</label>
                            <span class="gray" data-bind="text: CountToShow">(57)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="Estrato 2">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 2</label>
                            <span class="gray" data-bind="text: CountToShow">(1030)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="3" alt="Estrato 3">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 3</label>
                            <span class="gray" data-bind="text: CountToShow">(6012)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="Estrato 4">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 4</label>
                            <span class="gray" data-bind="text: CountToShow">(6007)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Estrato 5">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 5</label>
                            <span class="gray" data-bind="text: CountToShow">(3147)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div>
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="6" alt="Estrato 6">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estrato 6</label>
                            <span class="gray" data-bind="text: CountToShow">(5431)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div id="divGroupFeaturesRooms" data-bind="visible: Filters().ShowParkingFilters() != true">
            <!--Ambientes-->
            <div class="filter_items collapse" data-bind="visible: Filters().ParentCategory() == 2" style="display: none;">
                <div class="TitleContent">
                    <span class="title_box">Ambientes</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="btn-group" data-bind="foreach: Filters().Environments()">
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="1" alt="Ambientes: 1" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="2" alt="Ambientes: 2" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="3" alt="Ambientes: 3" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Ambientes: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="4+" alt="Ambientes: 4+" class="btn-select">
                    </div>
                </div>
            </div>
            <!--Habitaciones-->
            <div class="filter_items collapse" data-bind="visible: Filters().ParentCategory() != 2">
                <div class="TitleContent">
                    <span class="title_box">Habitaciones</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="btn-group" data-bind="foreach: Filters().Rooms()">
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="1" alt="Habitaciones: 1" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="2" alt="Habitaciones: 2" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="3" alt="Habitaciones: 3" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Habitaciones: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="4+" alt="Habitaciones: 4+" class="btn-select">
                    </div>
                </div>
            </div>
        </div>
        <div id="divGroupFeatures" data-bind="visible: Filters().ShowParkingFilters() != true">
            <!--Area-->
            <div class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Area M2</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="input-group medium">
                        <input id="areaFromFilter" type="text" placeholder="Desde" data-bind="textInput: Filters().chosenSurfaceFrom" maxlength="8" autocomplete="off">
                        <span><i class="fa close" data-bind="visible: Filters().chosenSurfaceFrom() != undefined &amp;&amp; Filters().chosenSurfaceFrom() != '', event: { click: function () { $root.Filters().chosenSurfaceFrom(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                    <div class="separate"></div>
                    <div class="input-group medium">
                        <input id="areaToFilter" type="text" placeholder="Hasta" data-bind="textInput: Filters().chosenSurfaceTo, style: { 'border-color': Filters().chosenSurfaceRangeGuard() == true ? '#CCCCCC' : '#CE2323' }" maxlength="8" autocomplete="off" style="border-color: rgb(204, 204, 204);">
                        <span><i class="fa close" data-bind="visible: Filters().chosenSurfaceTo() != undefined &amp;&amp; Filters().chosenSurfaceTo() != '', event: { click: function () { $root.Filters().chosenSurfaceTo(''); $root.FindAdverts(); } }" style="display: none;"></i></span>
                    </div>
                </div>
            </div>
        </div>
        <!--Otros Filtros-->
        <div class="filter_items others collapse" data-bind="visible: Filters().OtherFiltersAdvert().length > 0">
            <div class="TitleContent">
                <span class="title_box">Otros Filtros</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_OtherFiltersAdvert" class="items" facet="OtherFiltersAdvert" data-bind="foreach: Filters().OtherFiltersAdvert()">
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Con foto">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" value="3" alt="Con foto">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Con foto</label>
                            <span class="gray" data-bind="text: CountToShow">(23050)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <!--Extras-->
        <div class="filter_items others collapse" data-bind="visible: Filters().ExtrasAdvert().length > 0">
            <div class="TitleContent">
                <span class="title_box">Lo quiero con</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div id="facet_ExtrasAdvert" facet="ExtrasAdvert" class="ContentCollapse" style="display: none; top: 0px;">
                <div class="main_characteristics" data-bind="visible: Filters().ExtrasAdvert().filter(function (obj) { return obj.ShowInLst() == true &amp;&amp; obj.IconClass() != ''; }).length > 0">
                    <ul class="items" data-bind="foreach: Filters().ExtrasAdvert().filter(function (obj) { return obj.ShowInLst() == true &amp;&amp; obj.IconClass() != ''; })">
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Trans. Público cercano (15307)" class="extraicon publictrans">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="141" alt="Trans. Público cercano">
                                <label data-bind="text: ShortName, title: Name">Trans. Público </label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Sobre vía principal (4084)" class="extraicon main_road">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="135" alt="Sobre vía principal">
                                <label data-bind="text: ShortName, title: Name">Sobre vía princ</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Zona de lavandería (11500)" class="extraicon LaundryZone">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="134" alt="Zona de lavandería">
                                <label data-bind="text: ShortName, title: Name">Zona de lavande</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Cocina Integral (12623)" class="extraicon kitchenInt">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="20" alt="Cocina Integral">
                                <label data-bind="text: ShortName, title: Name">Cocina Integral</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Instalación de gas (12248)" class="extraicon gas">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="133" alt="Instalación de gas">
                                <label data-bind="text: ShortName, title: Name">Instalación de </label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Garaje(s) (5833)" class="extraicon garage">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="109" alt="Garaje(s)">
                                <label data-bind="text: ShortName, title: Name">Garaje(s)</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Portería / Recepción (9030)" class="extraicon door_reception">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="115" alt="Portería / Recepción">
                                <label data-bind="text: ShortName, title: Name">Portería / Rece</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Closet (5163)" class="extraicon closet">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="180" alt="Closet">
                                <label data-bind="text: ShortName, title: Name">Closet</label>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem } ">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow(), class: 'extraicon ' + IconClass()}" title="Baño Independiente (507)" class="extraicon bathroom_ind">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="181" alt="Baño Independiente">
                                <label data-bind="text: ShortName, title: Name">Baño Independie</label>
                            </div>
                        </li>
                    </ul>
                </div>
                <div scroll="yes" class="parent_scroll" style="max-height: 240px; position: relative; overflow: hidden;">
                    <ul class="items scroll_content" style="position: relative;" data-bind="foreach: Filters().ExtrasAdvert().filter(function (obj) { return obj.ShowInLst() == true &amp;&amp; obj.IconClass() == ''; })">
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Supermercados / C.Comerciales (13917)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="143" alt="Supermercados / C.Comerciales">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Supermercados /</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Parques cercanos (13512)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="142" alt="Parques cercanos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Parques cercano</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Residencial (13031)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="139" alt="Zona Residencial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Residencia</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Citófono (12812)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="130" alt="Citófono">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Citófono</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Ascensor (11078)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="13" alt="Ascensor">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Ascensor</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Colegios / Universidades (10904)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="140" alt="Colegios / Universidades">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Colegios / Univ</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Salón Comunal (9046)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="112" alt="Salón Comunal">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Salón Comunal</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Calentador (8946)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="128" alt="Calentador">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Calentador</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Parqueadero Visitantes (8542)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Parqueadero Visitantes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Parqueadero Vis</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vigilancia (7494)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="119" alt="Vigilancia">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vigilancia</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En conjunto cerrado (7315)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="12" alt="En conjunto cerrado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En conjunto cer</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Circuito cerrado de TV (7242)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="117" alt="Circuito cerrado de TV">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Circuito cerrad</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Depósito / Bodega (6692)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="11" alt="Depósito / Bodega">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Depósito / Bode</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Hall de Alcobas (6649)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="124" alt="Hall de Alcobas">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Hall de Alcobas</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Baño Auxiliar (6267)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="121" alt="Baño Auxiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Baño Auxiliar</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zonas Verdes (5440)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="107" alt="Zonas Verdes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zonas Verdes</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Infantil (5235)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="106" alt="Zona Infantil">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Infantil</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Estudio (5154)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="122" alt="Estudio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Estudio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Balcón (4999)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="32" alt="Balcón">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Balcón</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Chimenea (4737)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="129" alt="Chimenea">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Chimenea</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Comercial (4539)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="137" alt="Zona Comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Comercial</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piso en Baldosa /  Mármol (4215)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="Piso en Baldosa /  Mármol">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piso en Baldosa</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cómodas vias de acceso (4179)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="263" alt="Cómodas vias de acceso">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cómodas vias de</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cocina tipo Americano (4078)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="131" alt="Cocina tipo Americano">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cocina tipo Ame</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vigilancia privada 24*7 (4058)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="245" alt="Vigilancia privada 24*7">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vigilancia priv</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Portería / Vigilancia (3787)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="157" alt="Portería / Vigilancia">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Portería / Vigi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Gimnasio (3667)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="103" alt="Gimnasio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Gimnasio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Sobre vía secundaria (3457)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="189" alt="Sobre vía secundaria">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Sobre vía secun</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vista panorámica (3330)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="126" alt="Vista panorámica">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vista panorámic</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Terraza (3048)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="10" alt="Terraza">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Terraza</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Barra estilo americano (2771)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="127" alt="Barra estilo americano">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Barra estilo am</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Garaje Cubierto (2755)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="207" alt="Garaje Cubierto">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Garaje Cubierto</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Comedor (2573)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="211" alt="Comedor">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Comedor</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piso en Madera (2459)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="217" alt="Piso en Madera">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piso en Madera</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cuarto de Servicio (2348)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="272" alt="Cuarto de Servicio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cuarto de Servi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Jardín (2234)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="7" alt="Jardín">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Jardín</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vigilancia 24x7 (1906)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="147" alt="Vigilancia 24x7">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vigilancia 24x7</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Salón de Juegos (1784)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="105" alt="Salón de Juegos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Salón de Juegos</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Shut de basura (1595)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="222" alt="Shut de basura">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Shut de basura</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Área Urbana (1509)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="200" alt="Área Urbana">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Área Urbana</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Loft (1464)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="145" alt="Loft">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Loft</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Restaurantes (1457)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="259" alt="Restaurantes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Restaurantes</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Escalera de Emergencia (1372)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="214" alt="Escalera de Emergencia">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Escalera de Eme</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Servicios independientes (1352)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="270" alt="Servicios independientes">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Servicios indep</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vivienda Multifamiliar (1339)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="114" alt="Vivienda Multifamiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vivienda Multif</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Planta Eléctrica (1324)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="118" alt="Planta Eléctrica">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Planta Eléctric</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Patio (1298)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="16" alt="Patio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Patio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Amoblado (1281)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="19" alt="Amoblado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Amoblado</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Caldera (1194)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="116" alt="Caldera">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Caldera</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Comedor auxiliar (1172)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="132" alt="Comedor auxiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Comedor auxilia</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piscina (1149)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="17" alt="Piscina">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piscina</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Ventilación Natural (1135)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="193" alt="Ventilación Natural">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Ventilación Nat</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En Edificio (1096)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="185" alt="En Edificio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En Edificio</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Bombas de gasolina (1089)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="260" alt="Bombas de gasolina">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Bombas de gasol</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona de BBQ (1034)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="177" alt="Zona de BBQ">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona de BBQ</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cerca centro comercial (1009)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="264" alt="Cerca centro comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cerca centro co</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Puerta de seguridad (994)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="218" alt="Puerta de seguridad">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Puerta de segur</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Bahía exterior de parqueo (948)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="148" alt="Bahía exterior de parqueo">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Bahía exterior </label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Sauna / Turco / Jacuzzi (936)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="125" alt="Sauna / Turco / Jacuzzi">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Sauna / Turco /</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Alarma (934)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="120" alt="Alarma">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Alarma</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Duplex (895)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="144" alt="Duplex">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Duplex</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cocina Equipada (895)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="174" alt="Cocina Equipada">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cocina Equipada</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Squash (889)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="100" alt="Cancha de Squash">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Squas</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cerca a sector comercial (814)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="202" alt="Cerca a sector comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cerca a sector </label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En zona Comercial (732)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="186" alt="En zona Comercial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En zona Comerci</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Seguridad (676)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="262" alt="Seguridad">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Seguridad</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="En zona residencial (671)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="187" alt="En zona residencial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">En zona residen</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Tanques de Agua (516)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="150" alt="Tanques de Agua">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Tanques de Agua</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cuarto de Escoltas (513)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="108" alt="Cuarto de Escoltas">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cuarto de Escol</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Canchas Deportivas (509)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="102" alt="Canchas Deportivas">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Canchas Deporti</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cerca de Zona Urbana (506)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="159" alt="Cerca de Zona Urbana">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cerca de Zona U</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Alcantarillado (484)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="267" alt="Alcantarillado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Alcantarillado</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Servicios Públicos (470)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="175" alt="Servicios Públicos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Servicios Públi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cuarto de servicio (456)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="123" alt="Cuarto de servicio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cuarto de servi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Baloncesto (424)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="162" alt="Cancha de Baloncesto">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Balon</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Todos los Servicios (414)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="192" alt="Todos los Servicios">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Todos los Servi</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Futbol (396)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="163" alt="Cancha de Futbol">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Futbo</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Zona Industrial (393)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="138" alt="Zona Industrial">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Zona Industrial</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Acceso Pavimentado (377)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="156" alt="Acceso Pavimentado">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Acceso Paviment</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cochera (374)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="171" alt="Cochera">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cochera</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Vivienda Bifamiliar (338)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="113" alt="Vivienda Bifamiliar">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Vivienda Bifami</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Sauna / Turco / Jacuzzi (334)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="325" alt="Sauna / Turco / Jacuzzi">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Sauna / Turco /</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="PentHouse (329)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="146" alt="PentHouse">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">PentHouse</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Cancha de Tennis (282)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="101" alt="Cancha de Tennis">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Cancha de Tenni</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Senderos ecológicos (282)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="249" alt="Senderos ecológicos">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Senderos ecológ</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Piso en Alfombra (281)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="216" alt="Piso en Alfombra">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Piso en Alfombr</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Baño de Servicio (274)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="273" alt="Baño de Servicio">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Baño de Servici</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Despensa (260)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="155" alt="Despensa">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Despensa</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    
                        <li class="other_check" data-bind="event: { click: SelectItem }" style="float: none !important;">
                            <div data-bind="attr: { title: Name + ' ' + CountToShow() }" title="Asador (238)">
                                <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="250" alt="Asador">
                                <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Asador</label>
                                <!--<span class="gray" data-bind="text: CountToShow"></span> -->
                                <i data-bind="attr: { class: IconClass }, visible: IconClass != ''" class=""></i>
                            </div>
                        </li>
                    </ul>
                <div class="scroll ui-draggable" style="height: 23px; opacity: 0.5; top: 0px;"></div></div>
            </div>
        </div>
        <!--Fechas-->
        <div class="filter_items collapse" data-bind="visible: Filters().GridDateAdvert().filter(function (obj) { return obj.ShowInLst() == true; }).length > 0 &amp;&amp; Filters().ShowAllFilters() == true">
            <div class="TitleContent">
                <span class="title_box">Fecha de Publicado</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_GridDateAdvert" facet="GridDateAdvert" class="items" data-bind="foreach: Filters().GridDateAdvert().filter(function (obj) { return obj.ShowInLst() == true; })">
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Últimos 7 días">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected }, css: { checkbox_complete: Selected }" style="cursor: inherit;" autocomplete="off" value="3/31/2021 12:00:00 AM" alt="Últimos 7 días">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Últimos 7 días</label>
                            <span class="gray" data-bind="text: CountToShow">(2436)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Últimos 3 días">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected }, css: { checkbox_complete: Selected }" style="cursor: inherit;" autocomplete="off" value="4/4/2021 12:00:00 AM" alt="Últimos 3 días">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Últimos 3 días</label>
                            <span class="gray" data-bind="text: CountToShow">(1839)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: SelectItem }">
                        <div data-bind="attr: { title: Name }" title="Hoy">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected }, css: { checkbox_complete: Selected }" style="cursor: inherit;" autocomplete="off" value="4/7/2021 12:00:00 AM" alt="Hoy">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Hoy</label>
                            <span class="gray" data-bind="text: CountToShow">(415)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div id="divGroupFeaturesBathRooms" data-bind="visible: Filters().ShowParkingFilters() != true">
            <!--Baños-->
            <div class="filter_items collapse">
                <div class="TitleContent">
                    <span class="title_box">Baños</span><i class="btn_collapse fa fa-plus-square"></i>
                </div>
                <div class="ContentCollapse" style="display: none;">
                    <div class="btn-group" data-bind="foreach: Filters().BathRooms()">
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="1" alt="Baños: 1" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="2" alt="Baños: 2" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="3" alt="Baños: 3" class="btn-select">
                    
                        <input type="button" data-bind="attr: { value: Name, alt: 'Baños: ' + Name }, css: { 'btn-select': !Selected(), 'btn-select-Selected': Selected() }, event: { click: SelectItem }" style="float: left;" value="4+" alt="Baños: 4+" class="btn-select">
                    </div>
                </div>
            </div>
        </div>
        <!--Estado del inmueble-->
        <div class="filter_items collapse" data-bind="visible: Filters().AgeAdvert().length > 0 &amp;&amp; Filters().ShowAllFilters() == true">
            <div class="TitleContent">
                <span class="title_box">Antigüedad</span><i class="btn_collapse fa fa-plus-square"></i>
            </div>
            <div class="ContentCollapse" style="display: none;">
                <ul id="facet_AgeAdvert" facet="AgeAdvert" class="items" style="position: relative;" data-bind="foreach: Filters().AgeAdvert()">
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="16 a 30 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="4" alt="16 a 30 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">16 a 30 años</label>
                            <span class="gray" data-bind="text: CountToShow">(5926)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="1 a 8 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="2" alt="1 a 8 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">1 a 8 años</label>
                            <span class="gray" data-bind="text: CountToShow">(5163)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="9 a 15 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="3" alt="9 a 15 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">9 a 15 años</label>
                            <span class="gray" data-bind="text: CountToShow">(4867)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="Más de 30 años">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="5" alt="Más de 30 años">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Más de 30 años</label>
                            <span class="gray" data-bind="text: CountToShow">(2201)</span>
                        </div>
                    </li>
                
                    <li class="other_check" data-bind="event: { click: $root.Filters().chosenAgeAdvert }">
                        <div data-bind="attr: { title: Name }" title="Menos de 1 año">
                            <input type="checkbox" data-bind="attr: { value: Id, alt: Name, checked: Selected() }, css: { checkbox_complete: Selected() }" style="cursor: inherit;" autocomplete="off" value="1" alt="Menos de 1 año">
                            <label data-bind="text: ShortName, title: Name" style="cursor: inherit;">Menos de 1 año</label>
                            <span class="gray" data-bind="text: CountToShow">(1105)</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <!--Por Codigo-->
        <!--Remover Comentario a DIV si se desea habilitar-->
        <!--<div class="filter_items">   
            <div class="input-group">
                <input id="txtCode" type="text" onclick="this.select()" placeholder="Buscar por código" data-bind="textInput:Filters().AdvertId" style="max-width:132px;" />
                <div data-bind="click: FindAdvertByCode" style="float:right; margin:0px 0px 0px 3px; cursor:pointer; padding:5px 3px;">
                    <span><i class="fa fa-search"></i></span>   
                </div> 
            </div>
        </div> -->
        <!--Grupo Inmobililaria-->
        <!--Remover Comentario a DIV si se desea habilitar-->
        <!-- <div class="filter_items" data-bind="visible:Filters().GroupNameAdvert().length > 0">
            <div class="TitleContent">
                <span class="title_box">Grupo Inmobiliario</span><i class="btn_collapse fa fa-minus-square"></i>
            </div>
            <div class="ContentCollapse">  
                <div scroll="yes" class="parent_scroll" style="max-height:295px;">            
                    <ul id="facet_GroupNameAdvert" Facet="GroupNameAdvert" class="items scroll_content" style="position:relative;" data-bind="foreach: Filters().GroupNameAdvert()">
                        <li>
                            <div data-bind="event:{click:SelectItem}">
                                <input type="checkbox" data-bind="attr: {value: Id, alt: Name, checked: Selected }, css: {checkbox_complete: Selected }">
                                <label data-bind="text:ShortName, title:Name"></label>      
                                <span class="gray" data-bind="text: CountToShow"></span>   
                            </div>
                        </li>
                    </ul>            
                </div>
            </div>
        </div> -->
        <!--<div class="filter_items" style="padding: 7px 8px 7px 8px">
            <input class="btn_mas" type="button" data-bind="event: { click: Filters().ToogleExtras }, value: Filters().ShowAllFiltersLabel" />
        </div>-->
        <div id="fl_search" style="text-transform: uppercase; margin: 10px 0px 0px; position: fixed; bottom: 0px; top: auto;" onclick="trackingAlreadyCalled=false; window.vmResults.FindAdverts()">Aplicar Filtros</div>
    </div>

    <div class="publicity_Grid" style="top: 1209px;">
        <section class="contentBlock " data-sticky="" data-margin-top="10"> 
            <span></span>
             <div id="div-gpt-ad-1552918916085-0" name="Solapa_Bottom_Resultados" provider="AdManager" size="[160, 600]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 160px; height: 602px;"></div>
        </section>
        
        
    </div>
</div>

<script type="text/javascript">
    SetAsIntegerInput("#areaFromFilter,#areaToFilter,#txtCode");
    setInputAsCurrencyFormat("#priceFromFilter,#priceToFilter");
    var CurrentFacetsCategory;
</script>

                    <!--pestañas y avisos resultado-->
                    <div class="content-grid" style="margin-top: 10px;">
                        <!--menu-->
                        <!--nuevo filtro-->
                        <!--Grilla-->
                        
<style>
    .Grid .content-grid .contentGrid ul {
        height: 135px !important;
        border-top: #FFF 1px solid !important;
        border-right: #F0EDEF 1px solid !important;
        border-left: #F0EDEF 1px solid !important;
        border-bottom: #F0EDEF 1px solid !important;
        height: 135px !important !important;
        position: relative !important;
    }

    /* NUEVOS */


    /* NUEVOS */

    .heart-favorito, .heart-favoritoc {
        cursor: pointer;
        position: absolute;
        margin: 0pt;
        padding: 0pt;
        border: 0pt none;
        outline: 0pt none;
        font-size: 100%;
        vertical-align: baseline;
        top: 84%;
        right: 1%;
        z-index: 99;
        background: rgba(0,0,0,0);
        width: 16px;
        height: 16px;
        font-family: 'Lato', Gotham, "Helvetica Neue", Helvetica, Arial, "sans-serif" !important;
    }

    .Corazo {
        font-family: 'Lato', Gotham, "Helvetica Neue", Helvetica, Arial, "sans-serif" !important;
    }

    .heart-favorito .fa-heart-o {
        font-size: 16px !important;
        color: #888888;
        display: block;
    }

    .heart-favorito .fa-heart {
        color: #0066cc;
        display: none;
    }

    /* NUEVOS HOVER*/
    /*.heart-favorito:hover .fa-heart-o {
        display: none !important;
    }

    .heart-favorito:hover .fa-heart {
        display: block !important;
    }*/

    .heart-favoritoc .fa-heart-o {
        font-size: 16px !important;
        color: #888888;
        display: none;
    }

    .heart-favoritoc .fa-heart {
        color: #0066cc;
        display: block;
    }

    /* NUEVOS HOVER*/
    /*.heart-favoritoc:hover .fa-heart-o {
        display: block !important;
    }

    .heart-favoritoc:hover .fa-heart {
        display: none !important;
    }*/

    .carouselContent{
        width:100%;
        margin-bottom: 30px;
    }
</style>

<div id="ctl00_phMasterPage_Grid1_GridAdverts" class="grid">
    <div class="gridHeader" style="height: 32px; padding: 0px 0px 5px 5px;">
        <div class="result" style="width: 100%;">
            <div class="order" style="position: relative; padding: 2px 5px;">
                <select onchange="Grid_OrderBy(this.value)" class="options" id="lst_Order">
                    <option value="">Ordenar por</option>
                    <option value="Price asc">Precio - de menor a mayor</option>
                    <option value="Price desc">Precio - de mayor a menor</option>
                    <option value="Area asc">Área - de menor a mayor</option>
                    <option value="Area desc">Área - de mayor a menor</option>
                    <option value="Rooms asc">Hab. - de menor a mayor</option>
                    <option value="Rooms desc">Hab. - de mayor a menor</option>
                </select>
                <div id="ctl00_phMasterPage_Grid1_contenedor_linksMapList" style="position: relative;">
                    <ul>
                        <li>
                            <div id="boton_icon_listado" style="margin: 3px 2px;">
                                <i class="fa fa-list-ul" style="color: #b5b5b5 !important;"></i><a style="color: #b5b5b5 !important;" href="javascript:void(0);">listado</a>
                            </div>
                        </li>
                        <li>
                            <div id="ctl00_phMasterPage_Grid1_boton_icon_map" style="margin: 3px 2px;" onclick="javascript: goToMap(); trackingClick('results_resultados_mapa', 'SpecificTracking');">
                                <i class="fa fa-map-marker"></i><a href="javascript:void(0);">Mapa</a>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
     <!-- carrusel prodcto alta Visibilidad -->
     <div class="box_CarouselAv" style="display: none !important;">
          <div id="divCarouselAv" class="carouselContent" "=""></div>
     </div>

    <div class="contentGrid clear">
        <meta itemprop="mainContentOfPage" content="true">
        <div id="divAdverts">
            
                    
                    
                        <ul id="rowIndex_0" class="advert  Product_Code_DOV AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castellana-det-5724798.aspx'">
                                <div>
                                    <span class="text-photo">
                                        18
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/09/16/5724798/apartamento-arriendo-cundinamarca-bogota-321517833_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/09/16/5724798/apartamento-arriendo-cundinamarca-bogota-321517833_m.jpg" alt="Apartamento en Arriendo - Bogotá LA CASTELLANA" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/09/16/5724798/apartamento-arriendo-cundinamarca-bogota-321517833_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castellana-det-5724798.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/castellana-det-5724798.aspx" title="Apartamento en Arriendo - Bogotá LA CASTELLANA">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Castellana</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castellana-det-5724798.aspx'">
                                89,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castellana-det-5724798.aspx'">

                                <div>
                                    <meta itemprop="price" content="1500000.0">
                                    $ 1.500.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5724798" class="compare_div" value="5724798" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5724798,'#compare_div_5724798','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5724798" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_1" class="advert  Product_Code_ADE Product_Code_BUMP Product_Code_BUMP Product_Code_ADD Product_Code_ADDE Product_Code_LBL AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_rafaelgalan-det-6034343.aspx'">
                                <div>
                                    <span class="text-photo">
                                        15
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta">Oportunidad</span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/25/6034343/apartamento-arriendo-cundinamarca-bogota-331162594_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/25/6034343/apartamento-arriendo-cundinamarca-bogota-331162594_m.jpg" alt="Apartamento en Arriendo - Bogotá SAN RAFAELGALAN" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/25/6034343/apartamento-arriendo-cundinamarca-bogota-331162594_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_rafaelgalan-det-6034343.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/san_rafaelgalan-det-6034343.aspx" title="Apartamento en Arriendo - Bogotá SAN RAFAELGALAN">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en San Rafaelgalan</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Centro - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_rafaelgalan-det-6034343.aspx'">
                                56,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/san_rafaelgalan-det-6034343.aspx'">

                                <div>
                                    <meta itemprop="price" content="1020000.0">
                                    $ 1.020.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6034343" class="compare_div" value="6034343" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6034343,'#compare_div_6034343','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6034343" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_2" class="advert  Product_Code_DOV Product_Code_DOVC AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-5918672.aspx'">
                                <div>
                                    <span class="text-photo">
                                        19
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/11/29/5918672/apartamento-arriendo-cundinamarca-bogota-345617576_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/11/29/5918672/apartamento-arriendo-cundinamarca-bogota-345617576_m.jpg" alt="Apartamento en Arriendo - Bogotá Santa Bárbara Oriental" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/11/29/5918672/apartamento-arriendo-cundinamarca-bogota-345617576_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-5918672.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-5918672.aspx" title="Apartamento en Arriendo - Bogotá Santa Bárbara Oriental">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Santa Bárbara Oriental</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-5918672.aspx'">
                                47,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-5918672.aspx'">

                                <div>
                                    <meta itemprop="price" content="1673000.0">
                                    $ 1.673.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5918672" class="compare_div" value="5918672" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5918672,'#compare_div_5918672','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5918672" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_3" class="advert  Product_Code_ADD AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6232295.aspx'">
                                <div>
                                    <span class="text-photo">
                                        12
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/05/6232295/apartamento-arriendo-cundinamarca-bogota-349753348_m.jpg" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/05/6232295/apartamento-arriendo-cundinamarca-bogota-349753348_m.jpg" alt="Apartamento en Arriendo - Bogotá Santa Bárbara" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'" style="display: block;">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/05/6232295/apartamento-arriendo-cundinamarca-bogota-349753348_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6232295.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/santa_barbara-det-6232295.aspx" title="Apartamento en Arriendo - Bogotá Santa Bárbara">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Santa Bárbara</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6232295.aspx'">
                                57,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6232295.aspx'">

                                <div>
                                    <meta itemprop="price" content="1650000.0">
                                    $ 1.650.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6232295" class="compare_div" value="6232295" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6232295,'#compare_div_6232295','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6232295" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                        <ul style="height: auto;" class="parentAdsContainer">
                            <li style="width: 645px; margin: auto; border-bottom: 1px solid #E3DEE2" itemscope="" itemtype="http://schema.org/WPAdBlock">
                                <label style="margin-left: 2px" class="pub"></label>
                                <div id="div-gpt-ad-1555966766600-3" name="Patrocinio_Banner_Top" platform="FR_Desktop_Lista_resultados" provider="AdManager" size="[640,90]" isapplysegmentation="true" class="AdvertisingContainer" style="width: 640px; height: 92px;"></div>
                            </li>
                        </ul>
                    
                
                    
                    
                        <ul id="rowIndex_4" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alcala-det-6238945.aspx'">
                                <div>
                                    <span class="text-photo">
                                        10
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238945/apartamento-arriendo-cundinamarca-bogota-350333340_m.jpg" alt="Apartamento en Arriendo - Bogotá Alcala" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238945/apartamento-arriendo-cundinamarca-bogota-350333340_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alcala-det-6238945.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/alcala-det-6238945.aspx" title="Apartamento en Arriendo - Bogotá Alcala">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Alcala</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alcala-det-6238945.aspx'">
                                61,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alcala-det-6238945.aspx'">

                                <div>
                                    <meta itemprop="price" content="960000.0">
                                    $ 960.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238945" class="compare_div" value="6238945" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238945,'#compare_div_6238945','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238945" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_5" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castilla-det-6185708.aspx'">
                                <div>
                                    <span class="text-photo">
                                        20
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/16/6185708/apartamento-arriendo-cundinamarca-bogota-350333134_m.jpg" alt="Apartamento en Arriendo - Bogotá CASTILLA" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/16/6185708/apartamento-arriendo-cundinamarca-bogota-350333134_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castilla-det-6185708.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/castilla-det-6185708.aspx" title="Apartamento en Arriendo - Bogotá CASTILLA">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Castilla</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castilla-det-6185708.aspx'">
                                66,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/castilla-det-6185708.aspx'">

                                <div>
                                    <meta itemprop="price" content="1300000.0">
                                    $ 1.300.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6185708" class="compare_div" value="6185708" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6185708,'#compare_div_6185708','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6185708" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_6" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudadela_colsubsidio-det-6154473.aspx'">
                                <div>
                                    <span class="text-photo">
                                        20
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/05/6154473/apartamento-arriendo-cundinamarca-bogota-350330028_m.jpg" alt="Apartamento en Arriendo - Bogotá CIUDADELA COLSUBSIDIO" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/05/6154473/apartamento-arriendo-cundinamarca-bogota-350330028_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudadela_colsubsidio-det-6154473.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/ciudadela_colsubsidio-det-6154473.aspx" title="Apartamento en Arriendo - Bogotá CIUDADELA COLSUBSIDIO">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Ciudadela Colsubsidio</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudadela_colsubsidio-det-6154473.aspx'">
                                80,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudadela_colsubsidio-det-6154473.aspx'">

                                <div>
                                    <meta itemprop="price" content="1300000.0">
                                    $ 1.300.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6154473" class="compare_div" value="6154473" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6154473,'#compare_div_6154473','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6154473" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_7" class="advert  Product_Code_ADDE Product_Code_ADD Product_Code_LBL Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6173400.aspx'">
                                <div>
                                    <span class="text-photo">
                                        12
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta">Oportunidad</span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/11/6173400/apartamento-arriendo-cundinamarca-bogota-346537624_m.jpg" alt="Apartamento en Arriendo - Bogotá Chicó Navarra" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/11/6173400/apartamento-arriendo-cundinamarca-bogota-346537624_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6173400.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/chico_navarra-det-6173400.aspx" title="Apartamento en Arriendo - Bogotá Chicó Navarra">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Chicó Navarra</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6173400.aspx'">
                                120,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico_navarra-det-6173400.aspx'">

                                <div>
                                    <meta itemprop="price" content="2800000.0">
                                    $ 2.800.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6173400" class="compare_div" value="6173400" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6173400,'#compare_div_6173400','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6173400" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_8" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/aures_sector_planta-det-6232057.aspx'">
                                <div>
                                    <span class="text-photo">
                                        20
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/05/6232057/apartamento-arriendo-cundinamarca-bogota-350311940_m.jpg" alt="Apartamento en Arriendo - Bogotá AURES II SECTOR LA PLANTA" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/05/6232057/apartamento-arriendo-cundinamarca-bogota-350311940_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/aures_sector_planta-det-6232057.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/aures_sector_planta-det-6232057.aspx" title="Apartamento en Arriendo - Bogotá AURES II SECTOR LA PLANTA">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Aures Ii Sector La Planta</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/aures_sector_planta-det-6232057.aspx'">
                                170,00 m2
                                <br>
                                <div style="margin-top: 12px">5 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/aures_sector_planta-det-6232057.aspx'">

                                <div>
                                    <meta itemprop="price" content="1500000.0">
                                    $ 1.500.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6232057" class="compare_div" value="6232057" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6232057,'#compare_div_6232057','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6232057" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_9" class="advert  Product_Code_BUMP Product_Code_BUMP Product_Code_BUMP Product_Code_BUMP Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB Product_Code_TURB AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5889719.aspx'">
                                <div>
                                    <span class="text-photo">
                                        12
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/11/18/5889719/apartamento-arriendo-cundinamarca-bogota-321795792_m.jpg" alt="Apartamento en Arriendo - Bogotá Chicó" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/11/18/5889719/apartamento-arriendo-cundinamarca-bogota-321795792_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5889719.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/chico-det-5889719.aspx" title="Apartamento en Arriendo - Bogotá Chicó">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Chicó</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5889719.aspx'">
                                55,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5889719.aspx'">

                                <div>
                                    <meta itemprop="price" content="1474000.0">
                                    $ 1.474.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5889719" class="compare_div" value="5889719" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5889719,'#compare_div_5889719','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5889719" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_10" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/barrancas-det-6238883.aspx'">
                                <div>
                                    <span class="text-photo">
                                        9
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238883/apartamento-arriendo-cundinamarca-bogota-350309704_m.jpg" alt="Apartamento en Arriendo - Bogotá Barrancas" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238883/apartamento-arriendo-cundinamarca-bogota-350309704_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/barrancas-det-6238883.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/barrancas-det-6238883.aspx" title="Apartamento en Arriendo - Bogotá Barrancas">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Barrancas</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/barrancas-det-6238883.aspx'">
                                30,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/barrancas-det-6238883.aspx'">

                                <div>
                                    <meta itemprop="price" content="800000.0">
                                    $ 800.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238883" class="compare_div" value="6238883" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238883,'#compare_div_6238883','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238883" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                        <ul style="height: auto;" class="parentAdsContainer">
                            <li style="width: 645px; margin: auto; border-bottom: 1px solid #E3DEE2" itemscope="" itemtype="http://schema.org/WPAdBlock">
                                <label style="margin-left: 2px" class="pub"></label>
                                <div id="div-gpt-ad-1555966766600-10" name="Patrocinio_Banner_Bottom" platform="FR_Desktop_Lista_resultados" provider="AdManager" size="[640,90]" isapplysegmentation="true" class="AdvertisingContainer" style="width: 640px; height: 92px;"></div>
                            </li>
                        </ul>
                    
                
                    
                    
                        <ul id="rowIndex_11" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/calleja-det-6238645.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238645/apartamento-arriendo-cundinamarca-bogota-350318114_m.jpg" alt="Apartamento en Arriendo - Bogotá La Calleja" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238645/apartamento-arriendo-cundinamarca-bogota-350318114_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/calleja-det-6238645.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/calleja-det-6238645.aspx" title="Apartamento en Arriendo - Bogotá La Calleja">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Calleja</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/calleja-det-6238645.aspx'">
                                100,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/calleja-det-6238645.aspx'">

                                <div>
                                    <meta itemprop="price" content="2350000.0">
                                    $ 2.350.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238645" class="compare_div" value="6238645" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238645,'#compare_div_6238645','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238645" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_12" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pontevedra-det-6238445.aspx'">
                                <div>
                                    <span class="text-photo">
                                        30
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238445/apartamento-arriendo-cundinamarca-bogota-350309349_m.jpg" alt="Apartamento en Arriendo - Bogotá PONTEVEDRA" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238445/apartamento-arriendo-cundinamarca-bogota-350309349_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pontevedra-det-6238445.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/pontevedra-det-6238445.aspx" title="Apartamento en Arriendo - Bogotá PONTEVEDRA">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Pontevedra</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pontevedra-det-6238445.aspx'">
                                98,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pontevedra-det-6238445.aspx'">

                                <div>
                                    <meta itemprop="price" content="2200000.0">
                                    $ 2.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238445" class="compare_div" value="6238445" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238445,'#compare_div_6238445','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238445" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_13" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/minuto_dios-det-6238874.aspx'">
                                <div>
                                    <span class="text-photo">
                                        11
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238874/apartamento-arriendo-cundinamarca-bogota-350309096_m.jpg" alt="Apartamento en Arriendo - Bogotá Minuto de Dios" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238874/apartamento-arriendo-cundinamarca-bogota-350309096_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/minuto_dios-det-6238874.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/minuto_dios-det-6238874.aspx" title="Apartamento en Arriendo - Bogotá Minuto de Dios">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Minuto De Dios</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/minuto_dios-det-6238874.aspx'">
                                34,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/minuto_dios-det-6238874.aspx'">

                                <div>
                                    <meta itemprop="price" content="850000.0">
                                    $ 850.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238874" class="compare_div" value="6238874" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238874,'#compare_div_6238874','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238874" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_14" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alqueria-det-6140712.aspx'">
                                <div>
                                    <span class="text-photo">
                                        20
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/01/6140712/apartamento-arriendo-cundinamarca-bogota-350308669_m.jpg" alt="Apartamento en Arriendo - Bogotá Alquería" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/01/6140712/apartamento-arriendo-cundinamarca-bogota-350308669_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alqueria-det-6140712.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/alqueria-det-6140712.aspx" title="Apartamento en Arriendo - Bogotá Alquería">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Alquería</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Occidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alqueria-det-6140712.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/alqueria-det-6140712.aspx'">

                                <div>
                                    <meta itemprop="price" content="730000.0">
                                    $ 730.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6140712" class="compare_div" value="6140712" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6140712,'#compare_div_6140712','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6140712" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_15" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/carolina-det-5491225.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/06/09/5491225/apartamento-arriendo-cundinamarca-bogota-350308044_m.jpg" alt="Apartamento en Arriendo - Bogotá LA CAROLINA" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/06/09/5491225/apartamento-arriendo-cundinamarca-bogota-350308044_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/carolina-det-5491225.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/carolina-det-5491225.aspx" title="Apartamento en Arriendo - Bogotá LA CAROLINA">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Carolina</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/carolina-det-5491225.aspx'">
                                132,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/carolina-det-5491225.aspx'">

                                <div>
                                    <meta itemprop="price" content="2325000.0">
                                    $ 2.325.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5491225" class="compare_div" value="5491225" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5491225,'#compare_div_5491225','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5491225" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_16" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/britalia_norte-det-6238855.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238855/apartamento-arriendo-cundinamarca-bogota-350307065_m.jpg" alt="Apartamento en Arriendo - Bogotá Britalia Norte" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238855/apartamento-arriendo-cundinamarca-bogota-350307065_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/britalia_norte-det-6238855.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/britalia_norte-det-6238855.aspx" title="Apartamento en Arriendo - Bogotá Britalia Norte">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Britalia Norte</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/britalia_norte-det-6238855.aspx'">
                                70,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/britalia_norte-det-6238855.aspx'">

                                <div>
                                    <meta itemprop="price" content="1600000.0">
                                    $ 1.600.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238855" class="compare_div" value="6238855" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238855,'#compare_div_6238855','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238855" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_17" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba_rincon-det-6238859.aspx'">
                                <div>
                                    <span class="text-photo">
                                        5
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238859/apartamento-arriendo-cundinamarca-bogota-350306665_m.jpg" alt="Apartamento en Arriendo - Bogotá Suba rincon" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238859/apartamento-arriendo-cundinamarca-bogota-350306665_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba_rincon-det-6238859.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/suba_rincon-det-6238859.aspx" title="Apartamento en Arriendo - Bogotá Suba rincon">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Suba Rincon</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba_rincon-det-6238859.aspx'">
                                24,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/suba_rincon-det-6238859.aspx'">

                                <div>
                                    <meta itemprop="price" content="460000.0">
                                    $ 460.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238859" class="compare_div" value="6238859" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238859,'#compare_div_6238859','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238859" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_18" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-3805306.aspx'">
                                <div>
                                    <span class="text-photo">
                                        27
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2018/07/25/3805306/apartamento-arriendo-cundinamarca-bogota-350306453_m.jpg" alt="Apartamento en Arriendo - Bogotá Pasadena" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2018/07/25/3805306/apartamento-arriendo-cundinamarca-bogota-350306453_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-3805306.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/pasadena-det-3805306.aspx" title="Apartamento en Arriendo - Bogotá Pasadena">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Pasadena</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-3805306.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pasadena-det-3805306.aspx'">

                                <div>
                                    <meta itemprop="price" content="1143000.0">
                                    $ 1.143.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_3805306" class="compare_div" value="3805306" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(3805306,'#compare_div_3805306','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="3805306" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_19" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_occidental-det-6198773.aspx'">
                                <div>
                                    <span class="text-photo">
                                        18
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/20/6198773/apartamento-arriendo-cundinamarca-bogota-347070118_m.jpg" alt="Apartamento en Arriendo - Bogotá Santa Bárbara Occidental" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/20/6198773/apartamento-arriendo-cundinamarca-bogota-347070118_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_occidental-det-6198773.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/santa_barbara_occidental-det-6198773.aspx" title="Apartamento en Arriendo - Bogotá Santa Bárbara Occidental">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Santa Bárbara Occidental</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_occidental-det-6198773.aspx'">
                                234,00 m2
                                <br>
                                <div style="margin-top: 12px">4 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara_occidental-det-6198773.aspx'">

                                <div>
                                    <meta itemprop="price" content="5000000.0">
                                    $ 5.000.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6198773" class="compare_div" value="6198773" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6198773,'#compare_div_6198773','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6198773" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_20" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/felicidad-det-4884766.aspx'">
                                <div>
                                    <span class="text-photo">
                                        29
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/09/02/4884766/apartamento-arriendo-cundinamarca-bogota-350304780_m.jpg" alt="Apartamento en Arriendo - Bogotá La Felicidad" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/09/02/4884766/apartamento-arriendo-cundinamarca-bogota-350304780_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/felicidad-det-4884766.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/felicidad-det-4884766.aspx" title="Apartamento en Arriendo - Bogotá La Felicidad">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Felicidad</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Occidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/felicidad-det-4884766.aspx'">
                                68,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/felicidad-det-4884766.aspx'">

                                <div>
                                    <meta itemprop="price" content="1430000.0">
                                    $ 1.430.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_4884766" class="compare_div" value="4884766" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(4884766,'#compare_div_4884766','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="4884766" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <div id="tty-recommender-container" style="height: 250px;">
<style>
    @import url('https://fonts.googleapis.com/css?family=Roboto:400,700');
    #tty-title {
        color: #424242;
        text-align: left;
        font-weight: bold;
        font-size: 17px;
        font-family: 'Lato', 'Roboto', sans-serif;
        padding-bottom: .4em;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
    #tty-recommender-container {
        background-color: white;
        font-family: 'Roboto', sans-serif;
        width: 640px;
        height: 1px;
        padding-bottom: .4em;
        line-height: 100%;
        overflow: hidden;
        margin-bottom: 1.5em;
    }
    #tty-recs-container {
        margin-top: 10px;
        height: 240px;
        margin-left: 25px;
        overflow: hidden;
        position: absolute;
        box-sizing:border-box;
    }

    #tty-wrapper {
        width: 100%;
        height: 240px;
        position: relative;
    }

    .glide__track {
        width: 590px;
        height: 200px;
        box-sizing:border-box;
    }

    .glide_slides {
        height: 200px;
    }

    .glide__slide {
        width: 0;
        display: inline-block;
        text-decoration: none;
        color: #7C8086;
        float: left;
        text-align: center;
    }

     a.tty-rec {
        text-decoration: none;
        color: #7C8086;
    }
    #tty-rec__img {
        width: 90%;
        margin: auto;
        height: 130px;
    }
    #tty-rec__info {
        height: 64px;
        margin: auto;
        padding-top: 5px;
        text-align: center;
        overflow: hidden;
    }
    .tty-rec__title {
        height: 20px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 14px;
        color: #004891;
    }
    #tty-rec__price{
        font-size: 13px;
        font-weight: bold;
    }
    .tty-arrow {
        color: #bbb;
        width: 20px; height: 160px;
        background-color: white;
        padding-top: 75px;
        display: inline-block;
        position: absolute;
    }

    #tty-next{
        padding-left: 5px;
        right: 0;
    }

    #tty-prev{
        padding-right: 5px;
    }

    ul.glide_slides {
        padding-inline-start: 0px;
        line-height: 18px;

    }

    @media (max-width: 650px) {
        #tty-title { padding: 5px 5px .4em 5px;}
        #tty-recommender-container {
            width:100vw;
        }
        #tty-recs-container { width: 86%; left:7%; margin-left: 0;}
        .glide__track { width: 100%; }
        #tty-next { padding-right: 4px;}
        #tty-prev { padding-left: 4px;}
    }

    
    #tty-recommender-container {
        padding: 2em .5em 2em .5em;
        margin-left: -5px;
        margin-bottom: 0;
        border-bottom: 1px solid #F0EDEF;
    }

    ul.glide_slides {
        padding-inline-start: 0px;
        line-height: 18px !important;
    }

    .Grid .content-grid .contentGrid ul.glide_slides {
        line-height: 18px !important;
        border: none !important;
    }

    .Grid .content-grid .contentGrid ul.glide_slides:hover{
        border: none !important;
        box-shadow: none !important;
    }



</style>
<div id="tty-title" style="margin-top:1em;">Inmuebles relacionados a tu búsqueda</div>
<div id="tty-wrapper">
    <div id="tty-prev" class="tty-arrow prev" data-glide-dir="|<">
        <svg width="20px" height="20px" aria-hidden="true" focusable="false" data-prefix="fal" data-icon="arrow-circle-left" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="svg-inline--fa fa-arrow-circle-left fa-w-16 fa-2x"><path fill="currentColor" d="M504 256C504 119 393 8 256 8S8 119 8 256s111 248 248 248 248-111 248-248zM256 472c-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216 118.7 0 216 96.1 216 216 0 118.7-96.1 216-216 216zm-12.5-92.5l-115.1-115c-4.7-4.7-4.7-12.3 0-17l115.1-115c4.7-4.7 12.3-4.7 17 0l6.9 6.9c4.7 4.7 4.7 12.5-.2 17.1L181.7 239H372c6.6 0 12 5.4 12 12v10c0 6.6-5.4 12-12 12H181.7l85.6 82.5c4.8 4.7 4.9 12.4.2 17.1l-6.9 6.9c-4.8 4.7-12.4 4.7-17.1 0z" class=""></path></svg>
    </div>
    <div id="tty-recs-container" class="glide glide--ltr glide--carousel glide--swipeable">
        <div class="glide__track" data-glide-el="track">
            <ul class="glide_slides" style="transition: transform 0ms cubic-bezier(0.165, 0.84, 0.44, 1) 0s; width: 3600px; transform: translate3d(-900px, 0px, 0px);">
            
                <li class="glide__slide glide__slide--clone" style="width: 140px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5798960?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356342368420879%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5798960%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=2863058611347524819452574f259e6f" title="Entreprados Apartamentos Medellín" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356342368420879&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/14/5798960/proyecto-nuevo-venta-antioquia-medellin-349954855.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Entreprados Apartamentos</div>
                                <div class="tty-rec__title">Medellín</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $136.940.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5502257?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356280504609102%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5502257%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=0e377c379e6c85683bba89dac60a9530" title="Ángeles Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356280504609102&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/06/15/5502257/proyecto-nuevo-venta-cundinamarca-bogota-346404193.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Ángeles</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $186.101.600
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4934476?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356697599738577%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4934476%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=b49a8ed807a134fd73733a1e07d37368" title="BOÉ Barranquilla" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356697599738577&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/09/19/4934476/proyecto-nuevo-venta-atlantico-barranquilla-342130697.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">BOÉ</div>
                                <div class="tty-rec__title">Barranquilla</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $278.785.539
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4241333?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356053066096979%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4241333%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=ceee465a5982303bd4339154b7bbd8e9" title="Cedro Alto 2 Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356053066096979&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/01/09/4241333/proyecto-nuevo-venta-cundinamarca-bogota-344454536.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Cedro Alto 2</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $321.000.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6225447?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356189052565692%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6225447%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=f68e56a9d44de421735831688ba4d4e2" title="AMARA APARTAMENTOS Armenia" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356189052565692&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/31/6225447/proyecto-nuevo-venta-quindio-armenia-349192497.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">AMARA APARTAMENTOS</div>
                                <div class="tty-rec__title">Armenia</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $155.285.200
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4001670?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356636534360369%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4001670%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=9ef0c110dbde3c1e18d3054a931125e0" title="WIWA BEACH RESORT Santa Marta" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356636534360369&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2018/10/02/4001670/proyecto-nuevo-venta-magdalena-santa-marta-347734790.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">WIWA BEACH RESORT</div>
                                <div class="tty-rec__title">Santa Marta</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $516.332.001
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--active" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/1020566?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356451787690576%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D1020566%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=37b711fb75d0a65b35e7dd41750d255b" title="Mediterráneo Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356451787690576&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2013/10/16/1020566/proyecto-nuevo-venta-cundinamarca-bogota-345812356.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Mediterráneo</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $391.539.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4731554?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356095437204407%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4731554%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=5644ba6c88adf247fab7c770f378374b" title="Prado Park Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356095437204407&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/07/08/4731554/proyecto-nuevo-venta-cundinamarca-bogota-345982858.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Prado Park</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $136.278.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6070653?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356084755605342%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6070653%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=8dddf9bb6630eb0f50a8f17e85f52968" title="SAHARA Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356084755605342&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/05/6070653/proyecto-nuevo-venta-cundinamarca-bogota-347435246.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">SAHARA</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $217.767.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/3332024?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356251867505882%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D3332024%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=379e90f88a3be10b70dba46e4d1ed835" title="Parque Residencial Araucarias Santa Rosa de Cabal" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356251867505882&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2018/01/22/3332024/proyecto-nuevo-venta-risaralda-santa-rosa-de-cabal-348943864.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Parque Residencial Araucarias</div>
                                <div class="tty-rec__title">Santa Rosa de Cabal</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $77.390.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5766082?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356132163112210%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5766082%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=8fd9dcbbae2016f24cd33a624b6aa049" title="ARTEK 104 Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356132163112210&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/01/5766082/proyecto-nuevo-venta-cundinamarca-bogota-342150406.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">ARTEK 104</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $518.281.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6223316?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356468615117627%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6223316%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=705e007fe90b70985964b15e6477b600" title="VISTA MAR Santa Marta" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356468615117627&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/31/6223316/proyecto-nuevo-venta-magdalena-santa-marta-349365556.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">VISTA MAR</div>
                                <div class="tty-rec__title">Santa Marta</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $136.728.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5798960?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356342368420879%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5798960%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=2863058611347524819452574f259e6f" title="Entreprados Apartamentos Medellín" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356342368420879&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/14/5798960/proyecto-nuevo-venta-antioquia-medellin-349954855.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Entreprados Apartamentos</div>
                                <div class="tty-rec__title">Medellín</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $136.940.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5502257?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356280504609102%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5502257%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=0e377c379e6c85683bba89dac60a9530" title="Ángeles Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356280504609102&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/06/15/5502257/proyecto-nuevo-venta-cundinamarca-bogota-346404193.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Ángeles</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $186.101.600
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4934476?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356697599738577%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4934476%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=b49a8ed807a134fd73733a1e07d37368" title="BOÉ Barranquilla" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356697599738577&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/09/19/4934476/proyecto-nuevo-venta-atlantico-barranquilla-342130697.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">BOÉ</div>
                                <div class="tty-rec__title">Barranquilla</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $278.785.539
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4241333?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356053066096979%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4241333%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=ceee465a5982303bd4339154b7bbd8e9" title="Cedro Alto 2 Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356053066096979&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/01/09/4241333/proyecto-nuevo-venta-cundinamarca-bogota-344454536.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Cedro Alto 2</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $321.000.000
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6225447?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356189052565692%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6225447%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=f68e56a9d44de421735831688ba4d4e2" title="AMARA APARTAMENTOS Armenia" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356189052565692&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/31/6225447/proyecto-nuevo-venta-quindio-armenia-349192497.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">AMARA APARTAMENTOS</div>
                                <div class="tty-rec__title">Armenia</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $155.285.200
                                </div>
                            
                        </div>
                    </a>
                </li>
            
                <li class="glide__slide" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4001670?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356636534360369%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4001670%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=9ef0c110dbde3c1e18d3054a931125e0" title="WIWA BEACH RESORT Santa Marta" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356636534360369&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2018/10/02/4001670/proyecto-nuevo-venta-magdalena-santa-marta-347734790.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">WIWA BEACH RESORT</div>
                                <div class="tty-rec__title">Santa Marta</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $516.332.001
                                </div>
                            
                        </div>
                    </a>
                </li>
            
            <li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/1020566?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356451787690576%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D1020566%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=37b711fb75d0a65b35e7dd41750d255b" title="Mediterráneo Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356451787690576&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2013/10/16/1020566/proyecto-nuevo-venta-cundinamarca-bogota-345812356.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Mediterráneo</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $391.539.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/4731554?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356095437204407%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D4731554%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=5644ba6c88adf247fab7c770f378374b" title="Prado Park Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356095437204407&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/07/08/4731554/proyecto-nuevo-venta-cundinamarca-bogota-345982858.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Prado Park</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $136.278.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6070653?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356084755605342%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6070653%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=8dddf9bb6630eb0f50a8f17e85f52968" title="SAHARA Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356084755605342&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/02/05/6070653/proyecto-nuevo-venta-cundinamarca-bogota-347435246.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">SAHARA</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $217.767.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/3332024?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356251867505882%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D3332024%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=379e90f88a3be10b70dba46e4d1ed835" title="Parque Residencial Araucarias Santa Rosa de Cabal" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356251867505882&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2018/01/22/3332024/proyecto-nuevo-venta-risaralda-santa-rosa-de-cabal-348943864.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">Parque Residencial Araucarias</div>
                                <div class="tty-rec__title">Santa Rosa de Cabal</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $77.390.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px; margin-right: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/5766082?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356132163112210%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D5766082%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=8fd9dcbbae2016f24cd33a624b6aa049" title="ARTEK 104 Bogotá" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356132163112210&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/01/5766082/proyecto-nuevo-venta-cundinamarca-bogota-342150406.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">ARTEK 104</div>
                                <div class="tty-rec__title">Bogotá</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $518.281.000
                                </div>
                            
                        </div>
                    </a>
                </li><li class="glide__slide glide__slide--clone" style="width: 140px; margin-left: 5px;">
                    <a class="tty-rec" href="https://api.trackuity.com/visit/DxhMQ8Hb4z2LNmz47xGaQN/normal/6223316?entity_type=item&amp;url=https%3A%2F%2Flogs1237.xiti.com%2Fgo.ad%3Fxts%3D475018%26atc%3DPUB-%5BTrackuity-Listing%5D-%5BBuilder%5D-%5BApertura%5D%26type%3DAT%26rn%3D621356468615117627%26url%3Dhttps%3A%2F%2Fwww.fincaraiz.com.co%2Fdetail.aspx%3Fa%3D6223316%26trackuity%3D2&amp;user=cookie-5062432901404836868&amp;histlen=0&amp;nr_expansions=0&amp;seed=cookie-5062432901404836868%3A1617835964.9457672&amp;recommend_id=C9fDYbPW6SL4tedvDPpBUR&amp;tty_param_h=705e007fe90b70985964b15e6477b600" title="VISTA MAR Santa Marta" target="_blank">
                        <div id="tty-rec__img" style="background:url('https://logs1237.xiti.com/get.ad?xts=475018&amp;ati=PUB-[Trackuity-Listing]-[Builder]-[Impresion]&amp;type=AT&amp;rn=621356468615117627&amp;url=https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/31/6223316/proyecto-nuevo-venta-magdalena-santa-marta-349365556.jpg') no-repeat center center; background-size: cover"></div>
                        <div id="tty-rec__info">
                            
                                <div class="tty-rec__title">VISTA MAR</div>
                                <div class="tty-rec__title">Santa Marta</div>
                                <div id="tty-rec__price">
                                    <span style="font-size: 9px">Desde</span> $136.728.000
                                </div>
                            
                        </div>
                    </a>
                </li></ul>
        </div>
    </div>
    <div id="tty-next" class="tty-arrow next">
        <svg width="20px" height="20px" aria-hidden="true" focusable="false" data-prefix="fal" data-icon="arrow-circle-right" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="svg-inline--fa fa-arrow-circle-right fa-w-16 fa-2x"><path fill="currentColor" d="M8 256c0 137 111 248 248 248s248-111 248-248S393 8 256 8 8 119 8 256zM256 40c118.7 0 216 96.1 216 216 0 118.7-96.1 216-216 216-118.7 0-216-96.1-216-216 0-118.7 96.1-216 216-216zm12.5 92.5l115.1 115c4.7 4.7 4.7 12.3 0 17l-115.1 115c-4.7 4.7-12.3 4.7-17 0l-6.9-6.9c-4.7-4.7-4.7-12.5.2-17.1l85.6-82.5H140c-6.6 0-12-5.4-12-12v-10c0-6.6 5.4-12 12-12h190.3l-85.6-82.5c-4.8-4.7-4.9-12.4-.2-17.1l6.9-6.9c4.8-4.7 12.4-4.7 17.1 0z" class=""></path></svg>
    </div>
</div>
</div><ul id="rowIndex_21" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudad_jardin_sur-det-5145589.aspx'">
                                <div>
                                    <span class="text-photo">
                                        18
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/12/10/5145589/apartamento-arriendo-cundinamarca-bogota-350304762_m.jpg" alt="Apartamento en Arriendo - Bogotá CIUDAD JARDIN SUR" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2019/12/10/5145589/apartamento-arriendo-cundinamarca-bogota-350304762_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudad_jardin_sur-det-5145589.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/ciudad_jardin_sur-det-5145589.aspx" title="Apartamento en Arriendo - Bogotá CIUDAD JARDIN SUR">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Ciudad Jardin Sur</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudad_jardin_sur-det-5145589.aspx'">
                                44,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/ciudad_jardin_sur-det-5145589.aspx'">

                                <div>
                                    <meta itemprop="price" content="700000.0">
                                    $ 700.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5145589" class="compare_div" value="5145589" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5145589,'#compare_div_5145589','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5145589" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_22" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/casa_blanca_sur-det-5647245.aspx'">
                                <div>
                                    <span class="text-photo">
                                        16
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/08/18/5647245/apartamento-arriendo-cundinamarca-bogota-350303915_m.jpg" alt="Apartamento en Arriendo - Bogotá CASA BLANCA SUR" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/08/18/5647245/apartamento-arriendo-cundinamarca-bogota-350303915_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/casa_blanca_sur-det-5647245.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/casa_blanca_sur-det-5647245.aspx" title="Apartamento en Arriendo - Bogotá CASA BLANCA SUR">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Casa Blanca Sur</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/casa_blanca_sur-det-5647245.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/casa_blanca_sur-det-5647245.aspx'">

                                <div>
                                    <meta itemprop="price" content="750000.0">
                                    $ 750.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5647245" class="compare_div" value="5647245" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5647245,'#compare_div_5647245','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5647245" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_23" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/libertad-det-6020253.aspx'">
                                <div>
                                    <span class="text-photo">
                                        15
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/19/6020253/apartamento-arriendo-cundinamarca-bogota-350303614_m.jpg" alt="Apartamento en Arriendo - Bogotá LA LIBERTAD" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/01/19/6020253/apartamento-arriendo-cundinamarca-bogota-350303614_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/libertad-det-6020253.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/libertad-det-6020253.aspx" title="Apartamento en Arriendo - Bogotá LA LIBERTAD">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Libertad</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Sur - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/libertad-det-6020253.aspx'">
                                41,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/libertad-det-6020253.aspx'">

                                <div>
                                    <meta itemprop="price" content="600000.0">
                                    $ 600.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6020253" class="compare_div" value="6020253" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6020253,'#compare_div_6020253','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6020253" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_24" class="advert  Product_Code_DOVC AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cabrera-det-5638518.aspx'">
                                <div>
                                    <span class="text-photo">
                                        25
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/08/13/5638518/apartamento-arriendo-cundinamarca-bogota-350303228_m.jpg" alt="Apartamento en Arriendo - Bogotá La Cabrera" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/08/13/5638518/apartamento-arriendo-cundinamarca-bogota-350303228_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cabrera-det-5638518.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/cabrera-det-5638518.aspx" title="Apartamento en Arriendo - Bogotá La Cabrera">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Cabrera</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cabrera-det-5638518.aspx'">
                                156,00 m2
                                <br>
                                <div style="margin-top: 12px">4 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cabrera-det-5638518.aspx'">

                                <div>
                                    <meta itemprop="price" content="3900000.0">
                                    $ 3.900.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5638518" class="compare_div" value="5638518" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5638518,'#compare_div_5638518','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5638518" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_25" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero-det-6238789.aspx'">
                                <div>
                                    <span class="text-photo">
                                        13
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238789/apartamento-arriendo-cundinamarca-bogota-350302176_m.jpg" alt="Apartamento en Arriendo - Bogotá Chapinero" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238789/apartamento-arriendo-cundinamarca-bogota-350302176_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero-det-6238789.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/chapinero-det-6238789.aspx" title="Apartamento en Arriendo - Bogotá Chapinero">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Chapinero</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Chapinero - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero-det-6238789.aspx'">
                                57,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chapinero-det-6238789.aspx'">

                                <div>
                                    <meta itemprop="price" content="1480000.0">
                                    $ 1.480.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238789" class="compare_div" value="6238789" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238789,'#compare_div_6238789','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238789" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_26" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/batan-det-6238763.aspx'">
                                <div>
                                    <span class="text-photo">
                                        7
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238763/apartamento-arriendo-cundinamarca-bogota-350300681_m.jpg" alt="Apartamento en Arriendo - Bogotá El Batán" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238763/apartamento-arriendo-cundinamarca-bogota-350300681_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/batan-det-6238763.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/batan-det-6238763.aspx" title="Apartamento en Arriendo - Bogotá El Batán">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en El Batán</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/batan-det-6238763.aspx'">
                                106,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/batan-det-6238763.aspx'">

                                <div>
                                    <meta itemprop="price" content="2800000.0">
                                    $ 2.800.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238763" class="compare_div" value="6238763" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238763,'#compare_div_6238763','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238763" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_27" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5840277.aspx'">
                                <div>
                                    <span class="text-photo">
                                        24
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/28/5840277/apartamento-arriendo-cundinamarca-bogota-345148505_m.jpg" alt="Apartamento en Arriendo - Bogotá Chicó" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2020/10/28/5840277/apartamento-arriendo-cundinamarca-bogota-345148505_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5840277.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/chico-det-5840277.aspx" title="Apartamento en Arriendo - Bogotá Chicó">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Chicó</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5840277.aspx'">
                                60,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/chico-det-5840277.aspx'">

                                <div>
                                    <meta itemprop="price" content="2000000.0">
                                    $ 2.000.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_5840277" class="compare_div" value="5840277" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(5840277,'#compare_div_5840277','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="5840277" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_28" class="advert  Product_Code_ADE AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6238738.aspx'">
                                <div>
                                    <span class="text-photo">
                                        13
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238738/apartamento-arriendo-cundinamarca-bogota-350298436_m.jpg" alt="Apartamento en Arriendo - Bogotá Cedritos" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238738/apartamento-arriendo-cundinamarca-bogota-350298436_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6238738.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/cedritos-det-6238738.aspx" title="Apartamento en Arriendo - Bogotá Cedritos">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Cedritos</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6238738.aspx'">
                                80,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/cedritos-det-6238738.aspx'">

                                <div>
                                    <meta itemprop="price" content="1950000.0">
                                    $ 1.950.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238738" class="compare_div" value="6238738" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238738,'#compare_div_6238738','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238738" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_29" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/floresta-det-6144677.aspx'">
                                <div>
                                    <span class="text-photo">
                                        27
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/02/6144677/apartamento-arriendo-cundinamarca-bogota-350298117_m.jpg" alt="Apartamento en Arriendo - Bogotá La Floresta" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/02/6144677/apartamento-arriendo-cundinamarca-bogota-350298117_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/floresta-det-6144677.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/floresta-det-6144677.aspx" title="Apartamento en Arriendo - Bogotá La Floresta">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en La Floresta</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Noroccidente - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/floresta-det-6144677.aspx'">
                                50,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/floresta-det-6144677.aspx'">

                                <div>
                                    <meta itemprop="price" content="1676000.0">
                                    $ 1.676.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6144677" class="compare_div" value="6144677" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6144677,'#compare_div_6144677','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6144677" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_30" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6238655.aspx'">
                                <div>
                                    <span class="text-photo">
                                        14
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238655/apartamento-arriendo-cundinamarca-bogota-350297133_m.jpg" alt="Apartamento en Arriendo - Bogotá Santa Bárbara" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238655/apartamento-arriendo-cundinamarca-bogota-350297133_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6238655.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/santa_barbara-det-6238655.aspx" title="Apartamento en Arriendo - Bogotá Santa Bárbara">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Santa Bárbara</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6238655.aspx'">
                                96,00 m2
                                <br>
                                <div style="margin-top: 12px">2 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/santa_barbara-det-6238655.aspx'">

                                <div>
                                    <meta itemprop="price" content="4200000.0">
                                    $ 4.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238655" class="compare_div" value="6238655" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238655,'#compare_div_6238655','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238655" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_31" class="advert  Product_Code_ AD" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pardo_rubio-det-6238714.aspx'">
                                <div>
                                    <span class="text-photo">
                                        8
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238714/apartamento-arriendo-cundinamarca-bogota-350296819_m.jpg" alt="Apartamento en Arriendo - Bogotá Pardo Rubio" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/04/07/6238714/apartamento-arriendo-cundinamarca-bogota-350296819_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pardo_rubio-det-6238714.aspx'">
                                <div class="ico-inmo">
                                    
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/pardo_rubio-det-6238714.aspx" title="Apartamento en Arriendo - Bogotá Pardo Rubio">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Pardo Rubio</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Chapinero - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pardo_rubio-det-6238714.aspx'">
                                42,00 m2
                                <br>
                                <div style="margin-top: 12px">1 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/pardo_rubio-det-6238714.aspx'">

                                <div>
                                    <meta itemprop="price" content="1337200.0">
                                    $ 1.337.200
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6238714" class="compare_div" value="6238714" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6238714,'#compare_div_6238714','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6238714" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_32" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182998.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/15/6182998/apartamento-arriendo-cundinamarca-bogota-350296802_m.jpg" alt="Apartamento en Arriendo - Bogotá SIETE DE AGOSTO" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/15/6182998/apartamento-arriendo-cundinamarca-bogota-350296802_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182998.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/siete_agosto-det-6182998.aspx" title="Apartamento en Arriendo - Bogotá SIETE DE AGOSTO">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Siete De Agosto</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182998.aspx'">
                                75,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182998.aspx'">

                                <div>
                                    <meta itemprop="price" content="1200000.0">
                                    $ 1.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6182998" class="compare_div" value="6182998" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6182998,'#compare_div_6182998','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6182998" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
                    
                    
                        <ul id="rowIndex_33" class="advert  Product_Code_ AD_OV" itemscope="" itemtype="http://schema.org/Product">
                            <li class="media" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182897.aspx'">
                                <div>
                                    <span class="text-photo">
                                        17
                                        <br>
                                        <span class="text-photo-mini">Fotos</span></span>
                                    <span class="text-etiqueta"><span class="etiqueta"></span></span>
                                        <img class="lazy" src="/app_theme/images/none.gif" data-original="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/15/6182897/apartamento-arriendo-cundinamarca-bogota-350308093_m.jpg" alt="Apartamento en Arriendo - Bogotá SIETE DE AGOSTO" onclick="javascript:window.location='<%# TaggingClickProjects(this.CurrentAdvert, Container.ItemIndex) %>'">
                                    <meta itemprop="image" content="https://s3.amazonaws.com/imagenes.fincaraiz.com.co/FC_COL/2021/03/15/6182897/apartamento-arriendo-cundinamarca-bogota-350308093_m.jpg">
                                </div><div class="usedMark">Usado</div>
                            </li>
                            <li class="title-grid" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182897.aspx'">
                                <div class="ico-inmo">
                                    <div class="icoov"></div>
                                    <div class="textinmov"></div>
                                </div>
                                <div class="span-title" itemprop="name">
                                    <a href="/apartamento-en-arriendo/bogota/siete_agosto-det-6182897.aspx" title="Apartamento en Arriendo - Bogotá SIETE DE AGOSTO">
                                        <div>
                                            <h2 class="h2-grid">
                                                Apartamento en Siete De Agosto</h2>
                                        </div>
                                        <br>
                                        <div>
                                            Zona Norte - Bogotá
                                        </div>
                                    </a>
                                </div>
                            </li>
                            <li class="surface li_advert" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182897.aspx'">
                                75,00 m2
                                <br>
                                <div style="margin-top: 12px">3 hab.</div>
                            </li>
                            <li class="price li_advert" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer" onclick="javascript:window.location='/apartamento-en-arriendo/bogota/siete_agosto-det-6182897.aspx'">

                                <div>
                                    <meta itemprop="price" content="1200000.0">
                                    $ 1.200.000
                                </div>
                                <meta itemprop="priceCurrency" content="COP">
                                <div id="compare_div_6182897" class="compare_div" value="6182897" style="display: block;">
                                    <br>
                                    <div class="text compare-text" onclick="CompareAdvert(6182897,'#compare_div_6182897','','.compare-text','',event)" title="Clic para agregar este inmueble a la lista de comparación">
                                        Comparar
                                    </div>
                                </div>

                                
                                <div class="icoOpr"></div>
                                <div class="icoADE"></div>
                                <div class="icoOvcESPParrilla1"></div>
                            </li>
                            <div class="divHeart heart-favorito heart-view" advertid="6182897" isadd="true" title="Adicionar Favorito"><i class="fa fa-heart-o" aria-hidden="true"></i><i class="fa fa-heart" aria-hidden="true"></i></div>
                        </ul>
                    
                    
                    
                    
                
        </div>
        <div class="pagination">
            <div id="divPaginator">
                
                        
                        <a title="Ir a la pagina 1" onclick="return Grid_PageChanged('1')" href="/apartamentos/arriendo/bogota/" class="link-pag selected">
                            1</a>
                    
                        
                        <a title="Ir a la pagina 2" onclick="return Grid_PageChanged('2')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            2</a>
                    
                        
                        <a title="Ir a la pagina 3" onclick="return Grid_PageChanged('3')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            3</a>
                    
                        
                        <a title="Ir a la pagina 4" onclick="return Grid_PageChanged('4')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            4</a>
                    
                        
                        <a title="Ir a la pagina 5" onclick="return Grid_PageChanged('5')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            5</a>
                    
                        
                        <a title="Ir a la pagina 6" onclick="return Grid_PageChanged('6')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            6</a>
                    
                        
                        <a title="Ir a la pagina Siguiente" onclick="return Grid_PageChanged('2')" href="/apartamentos/arriendo/bogota/" class="link-pag ">
                            Siguiente</a>
                    
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $("img.lazy").lazyload({ effect: "fadeIn", threshold: 200 });
    console.timeEnd('Test');

    var lstAdverts = [{data:[{AdvertId:"5724798",Title:"Apartamento en Arriendo - Bogotá LA CASTELLANA",Address:"CALLE 97A   53- 07",PhotoUrl:"2020/09/16/5724798/apartamento-arriendo-cundinamarca-bogota-321517833_m.jpg",ClientName:"Acros Inmobiliaria",ClientId:"127444",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6034343",Title:"Apartamento en Arriendo - Bogotá SAN RAFAELGALAN",Address:"AK50no.5-60",PhotoUrl:"2021/01/25/6034343/apartamento-arriendo-cundinamarca-bogota-331162594_m.jpg",ClientName:"janeth grismaldo",ClientId:"749032",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"5918672",Title:"Apartamento en Arriendo - Bogotá Santa Bárbara Oriental",Address:"CRA 7 BIS A  124 - 70",PhotoUrl:"2020/11/29/5918672/apartamento-arriendo-cundinamarca-bogota-345617576_m.jpg",ClientName:"Pentagold Inmobiliaria",ClientId:"996742",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6232295",Title:"Apartamento en Arriendo - Bogotá Santa Bárbara",Address:"Carrera 19 No 125-65",PhotoUrl:"2021/04/05/6232295/apartamento-arriendo-cundinamarca-bogota-349753348_m.jpg",ClientName:"Alberto Luque",ClientId:"20719",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6238945",Title:"Apartamento en Arriendo - Bogotá Alcala",Address:"Calle 35 sur 51-82",PhotoUrl:"2021/04/07/6238945/apartamento-arriendo-cundinamarca-bogota-350333340_m.jpg",ClientName:"MIGUEL SUAREZ",ClientId:"236006",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6185708",Title:"Apartamento en Arriendo - Bogotá CASTILLA",Address:"CARRERA 81F   10B- 40",PhotoUrl:"2021/03/16/6185708/apartamento-arriendo-cundinamarca-bogota-350333134_m.jpg",ClientName:"LOGISTICA CONSULTORIA Y SERVICIOS INMOBILIARIOS",ClientId:"28846",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6154473",Title:"Apartamento en Arriendo - Bogotá CIUDADELA COLSUBSIDIO",Address:"Diagonal 89B # 116A - 10 Conjunto Parques de la Ciudadela Interior 56 Apto 201 Garaje 469",PhotoUrl:"2021/03/05/6154473/apartamento-arriendo-cundinamarca-bogota-350330028_m.jpg",ClientName:"Inmobiliarias Aliadas",ClientId:"28820",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6173400",Title:"Apartamento en Arriendo - Bogotá Chicó Navarra",Address:"calle 103  20-42",PhotoUrl:"2021/03/11/6173400/apartamento-arriendo-cundinamarca-bogota-346537624_m.jpg",ClientName:"javier alvarez",ClientId:"387234",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6232057",Title:"Apartamento en Arriendo - Bogotá AURES II SECTOR LA PLANTA",Address:"undefined 107B   131B- 02",PhotoUrl:"2021/04/05/6232057/apartamento-arriendo-cundinamarca-bogota-350311940_m.jpg",ClientName:"Gracia Asociados Finca Raíz Realtor Business",ClientId:"83854",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"5889719",Title:"Apartamento en Arriendo - Bogotá Chicó",Address:"CLL 9715-60",PhotoUrl:"2020/11/18/5889719/apartamento-arriendo-cundinamarca-bogota-321795792_m.jpg",ClientName:"miguel angel guzman",ClientId:"330958",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6238883",Title:"Apartamento en Arriendo - Bogotá Barrancas",Address:"carrera 7d  154 -09",PhotoUrl:"2021/04/07/6238883/apartamento-arriendo-cundinamarca-bogota-350309704_m.jpg",ClientName:"betsabe  Aguazaco",ClientId:"3067206",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6238645",Title:"Apartamento en Arriendo - Bogotá La Calleja",Address:"Cra 21 127B-63",PhotoUrl:"2021/04/07/6238645/apartamento-arriendo-cundinamarca-bogota-350318114_m.jpg",ClientName:"Focke Santos Y Cia Ltda",ClientId:"72241",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238445",Title:"Apartamento en Arriendo - Bogotá PONTEVEDRA",Address:"CALLE 97   70- 89",PhotoUrl:"2021/04/07/6238445/apartamento-arriendo-cundinamarca-bogota-350309349_m.jpg",ClientName:"Organizacion Inmobiliaria Fierro Diaz y Cia",ClientId:"313636",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238874",Title:"Apartamento en Arriendo - Bogotá Minuto de Dios",Address:"Transversal 72C 82i -25 ",PhotoUrl:"2021/04/07/6238874/apartamento-arriendo-cundinamarca-bogota-350309096_m.jpg",ClientName:"juan  campos",ClientId:"286859",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6140712",Title:"Apartamento en Arriendo - Bogotá Alquería",Address:"Calle 42A SUR # 52C - 32",PhotoUrl:"2021/03/01/6140712/apartamento-arriendo-cundinamarca-bogota-350308669_m.jpg",ClientName:"Inmobiliaria Bogotá S.A.S",ClientId:"28819",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"5491225",Title:"Apartamento en Arriendo - Bogotá LA CAROLINA",Address:"CALLE 127B   13A- 37",PhotoUrl:"2020/06/09/5491225/apartamento-arriendo-cundinamarca-bogota-350308044_m.jpg",ClientName:"Acros Inmobiliaria",ClientId:"127444",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238855",Title:"Apartamento en Arriendo - Bogotá Britalia Norte",Address:"Carrera 54 165-29, Britalia Norte, Zona Noroccidente, Bogotá, Cundinamarca",PhotoUrl:"2021/04/07/6238855/apartamento-arriendo-cundinamarca-bogota-350307065_m.jpg",ClientName:"Century 21 Maxibienes",ClientId:"31672",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238859",Title:"Apartamento en Arriendo - Bogotá Suba rincon",Address:"Cra 92  129 a 34",PhotoUrl:"2021/04/07/6238859/apartamento-arriendo-cundinamarca-bogota-350306665_m.jpg",ClientName:"Nidia Maritza Bautista",ClientId:"384155",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"3805306",Title:"Apartamento en Arriendo - Bogotá Pasadena",Address:"CARRERA 52 N° 106-32",PhotoUrl:"2018/07/25/3805306/apartamento-arriendo-cundinamarca-bogota-350306453_m.jpg",ClientName:"MR Propiedad Inmobiliaria S.A.S",ClientId:"28827",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6198773",Title:"Apartamento en Arriendo - Bogotá Santa Bárbara Occidental",Address:"Santa Barbra Occidental",PhotoUrl:"2021/03/20/6198773/apartamento-arriendo-cundinamarca-bogota-347070118_m.jpg",ClientName:"Carolina Uricoechea",ClientId:"1740499",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"4884766",Title:"Apartamento en Arriendo - Bogotá La Felicidad",Address:"CRA 79 No. 19-20",PhotoUrl:"2019/09/02/4884766/apartamento-arriendo-cundinamarca-bogota-350304780_m.jpg",ClientName:"MR Propiedad Inmobiliaria S.A.S",ClientId:"28827",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"5145589",Title:"Apartamento en Arriendo - Bogotá CIUDAD JARDIN SUR",Address:"CALLE 20 SUR   13-29",PhotoUrl:"2019/12/10/5145589/apartamento-arriendo-cundinamarca-bogota-350304762_m.jpg",ClientName:"Inmobiliaria Ruben Quiroga",ClientId:"28742",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"5647245",Title:"Apartamento en Arriendo - Bogotá CASA BLANCA SUR",Address:"CARRERA 79 B   51-16 SUR",PhotoUrl:"2020/08/18/5647245/apartamento-arriendo-cundinamarca-bogota-350303915_m.jpg",ClientName:"Inmobiliaria Ruben Quiroga",ClientId:"28742",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6020253",Title:"Apartamento en Arriendo - Bogotá LA LIBERTAD",Address:"CARRERA 88 C   63-67",PhotoUrl:"2021/01/19/6020253/apartamento-arriendo-cundinamarca-bogota-350303614_m.jpg",ClientName:"Inmobiliaria Ruben Quiroga",ClientId:"28742",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"5638518",Title:"Apartamento en Arriendo - Bogotá La Cabrera",Address:"Calle 86  10 - 68",PhotoUrl:"2020/08/13/5638518/apartamento-arriendo-cundinamarca-bogota-350303228_m.jpg",ClientName:"Jorge Tello",ClientId:"578272",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238789",Title:"Apartamento en Arriendo - Bogotá Chapinero",Address:"Carrera 6  49-48 ",PhotoUrl:"2021/04/07/6238789/apartamento-arriendo-cundinamarca-bogota-350302176_m.jpg",ClientName:"juan  campos",ClientId:"286859",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6238763",Title:"Apartamento en Arriendo - Bogotá El Batán",Address:"Calle 122  47-55",PhotoUrl:"2021/04/07/6238763/apartamento-arriendo-cundinamarca-bogota-350300681_m.jpg",ClientName:"Juan Velandia",ClientId:"3067072",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"5840277",Title:"Apartamento en Arriendo - Bogotá Chicó",Address:"Calle 96 NO. 19 A - 32",PhotoUrl:"2020/10/28/5840277/apartamento-arriendo-cundinamarca-bogota-345148505_m.jpg",ClientName:"Inmobiliaria TodoVivienda Ltda",ClientId:"1902716",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238738",Title:"Apartamento en Arriendo - Bogotá Cedritos",Address:"CALLE 146  7B-80 APT 702",PhotoUrl:"2021/04/07/6238738/apartamento-arriendo-cundinamarca-bogota-350298436_m.jpg",ClientName:"nancy  hernandez",ClientId:"2875147",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6144677",Title:"Apartamento en Arriendo - Bogotá La Floresta",Address:"CRA 68 B  95 - 80",PhotoUrl:"2021/03/02/6144677/apartamento-arriendo-cundinamarca-bogota-350298117_m.jpg",ClientName:"MR Propiedad Inmobiliaria S.A.S",ClientId:"28827",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238655",Title:"Apartamento en Arriendo - Bogotá Santa Bárbara",Address:"Calle 118 # 11c -79",PhotoUrl:"2021/04/07/6238655/apartamento-arriendo-cundinamarca-bogota-350297133_m.jpg",ClientName:"STEFANIE BRUNO",ClientId:"2721661",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6238714",Title:"Apartamento en Arriendo - Bogotá Pardo Rubio",Address:"Carrera 7  52 - 44",PhotoUrl:"2021/04/07/6238714/apartamento-arriendo-cundinamarca-bogota-350296819_m.jpg",ClientName:"Alvaro  Medina ",ClientId:"28141",OriginId:"44",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Particular"},{AdvertId:"6182998",Title:"Apartamento en Arriendo - Bogotá SIETE DE AGOSTO",Address:"CARRERA 23   69- 27",PhotoUrl:"2021/03/15/6182998/apartamento-arriendo-cundinamarca-bogota-350296802_m.jpg",ClientName:"Inversiones en Finca Raiz La Universal",ClientId:"140411",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"},{AdvertId:"6182897",Title:"Apartamento en Arriendo - Bogotá SIETE DE AGOSTO",Address:"CARRERA 23   69- 27",PhotoUrl:"2021/03/15/6182897/apartamento-arriendo-cundinamarca-bogota-350308093_m.jpg",ClientName:"Inversiones en Finca Raiz La Universal",ClientId:"140411",OriginId:"23",PromotionLogoURL:"",Category1:"Apartamento",TransactionId:"2",ContractType:"Professional"}],"info":""}][0];
    var lstFacets = "";

    function Grid_OrderBy(orderby) {
        trackingAlreadyCalled = false;
        sfFind.Order = orderby;
        sfFind.PageNumber = 1;
        return Find(sfFind, null, "ORDER");
    }

    //llamado carousel
    $(document).ready(function () {
        if (!toBoolean('False'))
            return;

        var isTag = window.xtsd != undefined;
        var timeExecution = !isTag ? 400 : 0;
        var maxTime = 10000;//Se define tiempo maximo de espera 
        //se crea setInterval para solicionar problemas cuando la variable window.xtsd no acanza a definirse
        var id = setInterval(function () {
            if (window.xtsd != undefined || timeExecution >= maxTime) {
                clearInterval(id);
                loadCarousel("30|1||||2||8|||67|3630001|||||||||||||||||||1||category1 desc||||||||", "AV")
            }
            if (isTag)
                timeExecution += 200;
        }, timeExecution);
    });
</script>

                        <!--Mapa-->
                        
                    </div>
                    <!--banner-->
                    <div class="advertising" itemscope="" itemtype="https://schema.org/WPAdBlock">
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1555516934764-0" name="Patrocinio_Top" provider="AdManager" size="[120,240]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 120px; height: 242px;"></div>
                        </section>
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1555518158980-0" name="Patrocinio_Medium" provider="AdManager" size="[120,240]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 120px; height: 242px;"></div>
                        </section>
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1555518684170-0" name="Patrocinio_Bottom" provider="AdManager" size="[120,240]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 120px; height: 242px;"></div>
                        </section>
                        <section class="contentBlock parentAdsContainer">
                            <span></span>
                            <div id="div-gpt-ad-1556830308276-0" name="Solapa_Top_Resultados" provider="AdManager" size="[120, 600]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="divBanner AdvertisingContainer" style="width: 120px; height: 602px;"></div>
                        </section>
                    </div>
                </div>
                <div class="clear"></div>

            </div>
            <section class="contentBlock lederboard parentAdsContainer AdvertisingFixed">
                    <span></span>
                    <div id="div-gpt-ad-1552919085834-0" name="Megabanner_Resultados" provider="AdManager" size="[728,90]" platform="FR_Desktop_Lista_resultados" isapplysegmentation="true" class="AdvertisingContainer" style="width: 728px; height: 92px;"></div>
                </section>
        </div>
        <script type="text/javascript">
            var cEmail = "";
            var cName = "";
            var cPhone = "";
            var cCity  = "";            
            var cCategoryGroup =  "1";
            var contactToken = '11D8C67F8053C232FBE720ACE297E88BF490F55680A0A15D31205E0655B6E55172A3B738AF068BC9';
            var contextdomain  = 'www.fincaraiz.com.co';
            var clientIdR = '0';

            $( document ).ready(function() {
                cCategoryGroup = "1";
            });

            //variable global
            var sfFind = Normalize({"AdvertCategory" : "0", "LocationType" : "0", "AdvertId" : "0", "AdvertWASId" : "0", "AdvertExternalId" : "", "ClientId" : "0", "TransactionId" : "2", "sTransactionsId" : "", "TransactionType" : "All", "Category1Id" : "8", "Category1IdList" : "8", "Category2Id" : "0", "Category3Id" : "0", "Location1Id" : "67", "Location1IdList" : "67", "Location2Id" : "3630001", "Location2IdList" : "3630001", "Location3Id" : "0", "Location3IdList" : "", "Location4Id" : "0", "Location4IdList" : "", "PriceFrom" : "0", "PriceTo" : "0", "NotInLocation4Id" : "", "SalaryMax" : "0", "SurfaceFrom" : "0", "SurfaceTo" : "0", "Area" : "0", "Rooms" : "0", "RoomsList" : "", "Baths" : "0", "BathsList" : "", "AgeId" : "0", "AgeIdList" : "", "NotInLocation3Id" : "", "ExtrasId" : "0", "ExtrasIdList" : "", "ContractType" : "All", "TopAdvert" : "0", "ProductCode" : "", "NumPhotos" : "0", "ShowPhotos" : "True", "ProductId" : "0", "Word" : "", "Order" : "GridDate desc", "Status" : "0", "OriginId" : "0", "GridDate" : "1/1/0001 12:00:00 AM", "ModifyDateTo" : "1/1/1900 12:00:00 AM", "ToBePostModerate" : "False", "FTISearch" : "False", "NotInAdvertsId" : "", "ParentLevel" : "-1", "GroupType" : "-1", "ClientParentLevel" : "-1", "NotInCategory1Id" : "0", "NotInCategory2Id" : "0", "AdvertIP" : "", "GroupName" : "", "Neighborhood" : "", "PriceTypeId" : "0", "StratumId" : "", "StratumIdList" : "", "TotalEnvironment" : "0", "TotalEnvironmentList" : "", "IsFree" : "-1", "InLocation" : "False", "Ranking" : "0", "ProyectStatus" : "0", "PageSize" : "30", "PageNumber" : "1"});
            var viewMap = false;
            sfFind.Category1Id = sfFind.Category1IdList;
            sfFind.Rooms = sfFind.RoomsList;
            sfFind.Baths = sfFind.BathsList;
            sfFind.ExtrasId = sfFind.ExtrasIdList;
            var idsPageSemanticText = ['/apartamento-en-arriendo/bogota/castellana-det-5724798.aspx','/apartamento-en-arriendo/bogota/san_rafaelgalan-det-6034343.aspx','/apartamento-en-arriendo/bogota/santa_barbara_oriental-det-5918672.aspx','/apartamento-en-arriendo/bogota/santa_barbara-det-6232295.aspx','/apartamento-en-arriendo/bogota/alcala-det-6238945.aspx','/apartamento-en-arriendo/bogota/castilla-det-6185708.aspx','/apartamento-en-arriendo/bogota/ciudadela_colsubsidio-det-6154473.aspx','/apartamento-en-arriendo/bogota/chico_navarra-det-6173400.aspx','/apartamento-en-arriendo/bogota/aures_sector_planta-det-6232057.aspx','/apartamento-en-arriendo/bogota/chico-det-5889719.aspx','/apartamento-en-arriendo/bogota/barrancas-det-6238883.aspx','/apartamento-en-arriendo/bogota/calleja-det-6238645.aspx','/apartamento-en-arriendo/bogota/pontevedra-det-6238445.aspx','/apartamento-en-arriendo/bogota/minuto_dios-det-6238874.aspx','/apartamento-en-arriendo/bogota/alqueria-det-6140712.aspx','/apartamento-en-arriendo/bogota/carolina-det-5491225.aspx','/apartamento-en-arriendo/bogota/britalia_norte-det-6238855.aspx','/apartamento-en-arriendo/bogota/suba_rincon-det-6238859.aspx','/apartamento-en-arriendo/bogota/pasadena-det-3805306.aspx','/apartamento-en-arriendo/bogota/santa_barbara_occidental-det-6198773.aspx','/apartamento-en-arriendo/bogota/felicidad-det-4884766.aspx','/apartamento-en-arriendo/bogota/ciudad_jardin_sur-det-5145589.aspx','/apartamento-en-arriendo/bogota/casa_blanca_sur-det-5647245.aspx','/apartamento-en-arriendo/bogota/libertad-det-6020253.aspx','/apartamento-en-arriendo/bogota/cabrera-det-5638518.aspx','/apartamento-en-arriendo/bogota/chapinero-det-6238789.aspx','/apartamento-en-arriendo/bogota/batan-det-6238763.aspx','/apartamento-en-arriendo/bogota/chico-det-5840277.aspx','/apartamento-en-arriendo/bogota/cedritos-det-6238738.aspx','/apartamento-en-arriendo/bogota/floresta-det-6144677.aspx','/apartamento-en-arriendo/bogota/santa_barbara-det-6238655.aspx','/apartamento-en-arriendo/bogota/pardo_rubio-det-6238714.aspx','/apartamento-en-arriendo/bogota/siete_agosto-det-6182998.aspx','/apartamento-en-arriendo/bogota/siete_agosto-det-6182897.aspx'];
            var countAdverts = 22139;
            var totalPages = 738;

            InitializeViewModelFilters();
        
            function ShowArrows()
            {
                if(trim($("#div_LastPage").html()) != ""){
                    $("#div_LastPage").show();
                }
                else{
                    $("#div_LastPage").hide();
                }                    
                if(trim($("#div_NextPage").html()) != ""){
                    $("#div_NextPage").show();            
                }
                else{
                    $("#div_NextPage").hide();
                }
                if(countAdverts == 0){
                    $("#paginator_top").hide();
                }
            }

            function PaintSuperiorPaginator(lstData){
                totalPages = Math.ceil(parseInt(lstData.info) / sfFind.PageSize);
                sfFind.PageNumber = parseInt(sfFind.PageNumber);
                if(totalPages > 0)
                {
                    $("#paginator_top").show();
                    $("#span_counter").html(sfFind.PageNumber + " de " + totalPages);
                    var firtsPage = GetFirtsPagePaginator();
                    var lastPage = GetLastPagePaginator();
                    var htmlNextPage = '';
                    var htmlLastPage = '';
                    if (sfFind.PageNumber > firtsPage)
                    {
                        htmlLastPage = '<a href="{Semantic}"  class="ico20 prev-page" onclick="return Grid_PageChanged(\'{PageNumber}\')" ></a>\
                                        <a href="{Semantic}" title="Ir a la pagina Anterior" onclick="return Grid_PageChanged(\'{PageNumber}\')" >Anterior</a>';
                        var pageObject1 = GetPageObject("Anterior", sfFind.PageNumber - 1);
                        htmlLastPage = toHtml(pageObject1,htmlLastPage);
                    }
                    if (sfFind.PageNumber < lastPage)
                    {
                        htmlNextPage = '<a href="{Semantic}" title="Ir a la pagina Siguiente" onclick="return Grid_PageChanged(\'{PageNumber}\')" >Siguiente</a> \
                                        <a href="{Semantic}" class="ico20 next-page" onclick="return Grid_PageChanged(\'{PageNumber}\')" ></a>';                
                        var pageObject2 = GetPageObject("Siguiente", sfFind.PageNumber + 1);                
                        htmlNextPage = toHtml(pageObject2,htmlNextPage);
                    }
                    $("#div_LastPage").html(htmlLastPage);
                    $("#div_NextPage").html(htmlNextPage);
                    ShowArrows();
                }
                else{
                    $("#paginator_top").hide();
                }
            }
            $(document).ready(function() {ShowArrows();});
                       
        </script>
    </form>

        </div>
        <!--MASTER FOOTER-->
        <div id="divFooter">
            

<div id="Div_Footer" class="footer">
    <div id="ctl00_xFooter_Div_Footer_Principal" class="footer">
        <div class="contenedor_products">
            <img src="/App_Theme/images/logo_fincaraiz_footer.png" width="361" height="58">
        </div>
        <div class="panel_principal">
            <div id="ctl00_xFooter_LinksGroupFooter1_Div_LinksEstaticos"> 
 <ul class="contenido_footer_principal">
  <li class="titulos_footer">
      Oferta de Finca Raíz en Colombia 
  </li>
    
            <li class="contenedor_links_rapida"><a href="/proyectos-vivienda-nueva/bogota" class="texto_rapida" title="Proyectos de Vivienda en Bogotá">Proyectos Vivienda Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/arriendo/bogota/" class="texto_rapida" title="Apartamentos en Arriendo en Bogotá">Apartamentos Arriendo Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/venta/bogota/" class="texto_rapida" title="Apartamentos en Venta en Bogotá">Apartamentos Venta Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartaestudios/arriendo/bogota/" class="texto_rapida" title="Apartaestudios en Arriendo en Bogotá">Apartaestudios Arriendo Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/arriendos/bogota/" class="texto_rapida" title="Arriendos en Bogotá">Arriendos Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/arriendo/bogota/" class="texto_rapida" title="Casas en Arriendo en Bogotá">Casas Arriendo Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/venta/bogota/" class="texto_rapida" title="Casas en Venta en Bogotá">Casas Venta Bogotá</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/alquiler/cali/" class="texto_rapida" title="Apartamentos en Alquiler en Cali">Apartamentos Alquiler Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/apartamentos/venta/cali" class="texto_rapida" title="Apartamentos en Venta en Cali">Apartamentos Venta Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/alquiler/cali/" class="texto_rapida" title="Casas en Alquiler en Cali">Casas Alquiler Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/casas/venta/cali/" class="texto_rapida" title="Casas en Venta en Cali">Casas Venta Cali</a></li>
        
            <li class="contenedor_links_rapida"><a href="/arrendamientos/medellin/" class="texto_rapida" title="Inmuebles en Arrendamiento en Medellín">Arrendamientos Medellín</a></li>
        
            <li class="contenedor_links_rapida"><a href="/arrendamientos/envigado/" class="texto_rapida" title="Inmuebles en Arrendamiento en Envigado">Arrendamientos Envigado</a></li>
        
     <li class="contenedor_links_rapida"><a href="/LandingPage/LandingSabanaNorte.aspx" target="_blank" class="texto_rapida" title="Especial Sabana" style="font-size: 13px;"><b>Especial Sabana</b></a></li>
 </ul>
</div>




  

            <ul class="contenido_footer_principal">
                <li class="contenedor_links_rapida">
                    <br><a class="texto_rapida version_impresa" title="Visita nuestro BLOG" target="_blank" href="https://blog.fincaraiz.com.co/"><b>Visita nuestro BLOG</b></a>
                    <a class="texto_rapida version_impresa" title="Visita nuestro Mapa del Sitio" target="_blank" href="https://www.fincaraiz.com.co/sitemap.aspx"><b>Mapa del Sitio</b></a>
                </li>
            </ul>
        </div>
        <div class="panel_secundario">
            







<ul class="contenido_footer_principal">
 <li class="titulos_footer">
  Apartamentos en Arriendo en Bogotá
 </li>    
 <li class="contenedor_links_rapida">
  Encuentre en fincaraiz.com.co Apartamentos en Arriendo Nuevos y Usados ubicados en las distintas zonas de Bogotá: <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-norte/index.aspx?ad=30|1||||2||8|||67|3630001|3630101|||||||||||||||1|||1|||||"> Norte</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-sur/index.aspx?ad=30|1||||2||8|||67|3630001|3630106|||||||||||||||1|||1|||||"> Sur</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-occidente/index.aspx?ad=30|1||||2||8|||67|3630001|3630104|||||||||||||||1|||1|||||"> Occidente</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-noroccidente/index.aspx?ad=30|1||||2||8|||67|3630001|3630102|||||||||||||||1|||1|||||"> NorOccidente</a> y <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/zona-centro/index.aspx?ad=30|1||||2||8|||67|3630001|3630105|||||||||||||||1|||1|||||"> Centro</a>. Apartamentos en Arriendo en Bogotá de tipo <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|5||||2||8|||67|3630001||||||||||||||145||1|||1|||||"> loft</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|1||||2||8|||67|3630001||||||||||||||144||1|||1|||||"> dúplex</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|1||||2||8|||67|3630001||||||||||||||146||1|||1|||||">penthouse</a>, <a href="http://www.fincaraiz.com.co/apartamento/arriendo/cundinamarca/bogota/index.aspx?ad=30|1||||2||8|||67|3630001||||||||||||||19||1|||1|||||"> amoblados</a>. Características del conjunto: En edificio, Condominio, conjunto cerrado; Características del Sector donde se encuentra ubicado y características internas del apartamento, para arriendo directo o inmobiliaria. 
 </li>
</ul>
        </div>
        <div class="panel_secundario">
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Oferta de Anuncios: </li>
                <li class="contenedor_links"><a class="texto_links" title="Inmuebles en Venta en Colombia" href="/finca-raiz/">Venta Nuevo y Usados<br></a></li>
                <li class="contenedor_links"><a class="texto_links" title="Proyectos de Vivienda Nueva en Colombia" href="/proyectos-vivienda-nueva/">Proyectos Nuevos</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Inmuebles en Arriendo en Colombia" href="/arriendos/">Ofertas en Arriendo</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Alquiler Vacacional en Colombia" href="/alquiler-vacacional/">Ofertas Vacacionales</a></li>
            </ul>
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Nuestros Clientes</li>
                <li class="contenedor_links"><a class="texto_links" title="Listado de Inmobiliarias en Bogotá" href="/inmobiliarias/bogota/">Inmobiliarias en Bogotá<br> </a></li>
                <li class="contenedor_links"><a class="texto_links" title="Listado de Constructoras en Bogotá" href="/constructoras/bogota/">Constructoras en Bogotá<br> </a></li>
            </ul>
        </div>
        <div class="panel_secundario">
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Nuestros Servicios: </li>
                <li class="contenedor_links"><a class="texto_links" title="Administración de Inmuebles - Particulares" href="/ClientAdmin/Adverts.aspx">Gestión Personal</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Administración de Inmuebles - Inmobiliarias y Constructoras" href="https://profesionales.fincaraiz.com.co/">Gestión Empresarial</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Publicación de Avisos de Finca Raíz" href="/anuncios-clasificados-gratis-publicar-inmueble.aspx">Publicar Inmueble GRATIS*</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Descarga nuestra APP en Android e Itunes" href="/apps/">Descarga nuestra APP</a></li>
            </ul>
            <ul class="contenido_footer_principal_bullets">
                <li class="titulos_footer">Servicio al Cliente: </li>
                <li class="contenedor_links"><a class="texto_links" title="Conctactar a fincaraiz.com.co" href="/contactenos.aspx">Contáctenos<br></a></li>
                <li class="contenedor_links"><a class="texto_links" title="Consultar Preguntas Frecuentes de los Usuarios" href="/preguntas_frecuentes.aspx">Preguntas frecuentes</a></li>
                <li class="contenedor_links"><a class="texto_links" title="Consultar Recomendaciones de Seguridad" href="/recomendaciones_seguridad.aspx">Recomendaciones de seguridad</a></li>
            </ul>
        </div>
        <div class="panel_logos_marcas">
            <div class="producto">Un Producto:<div id="schibsted_logo" style="cursor: pointer" title="https://www.adevinta.com/" onclick="javascript:window.open('https://www.adevinta.com/') "></div>
            </div>
            <div class="redes_sociales">
                Síguenos en:
                <div id="laguia_facebook" style="cursor: pointer" title="Síguenos en Facebook" onclick="javascript:window.open('http://www.facebook.com/fincaraiz.com.co') "></div>
                <div id="laguia_twitter" style="cursor: pointer" title="Síguenos en Twitter" onclick="javascript:window.open('https://twitter.com/fincaraizfr') "></div>
                <div id="laguia_youtube" style="cursor: pointer" title="Síguenos en Youtube" onclick="javascript:window.open('http://www.youtube.com/c/fincaraiz') "></div>
            </div>
            <div class="afiliado">Afiliado a:<a id="laguia_afiliado"></a></div>
        </div>
    </div>
    <div id="ctl00_xFooter_Div_dir_tel" class="panel_info">
        <strong>Calle 147 N° 17 - 78 Piso 8, Edificio Soko 147</strong>&nbsp; Bogotá D.C &nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; <strong>Tel:</strong>&nbsp; (57) (1) 3598079 - 3598071 -  3174359173
    </div>
    <div class="contenido_aviso_legal ">
        * Aplica sólo para personas naturales, máximo dos avisos gratis. Excluye Proyectos Nuevos<br>
        Fincaraiz.com.co cumple con la ley 527 de 1.999, para todos los efectos ha de entenderse por SISTEMA DE INFORMACIÓN. 
        <a href="/aviso_legal.aspx" class="link_aviso_legal">Aviso legal</a> - 
        <a href="/terminos_y_condiciones.aspx" class="link_aviso_legal">Términos y Condiciones</a> -
        <a href="/politica_tratamiento_de_datos_personales.aspx" class="link_aviso_legal">Políticas de tratamiento de datos</a>
    </div>
</div>










        </div>
    </div>
    <div id="ctl00_scripts">
    <script type="text/javascript">$(document).ready(function () { if (cCategoryGroup && cCategoryGroup != '2') { jQuery.ajax({type: 'GET',url: '/PhotoGallery.ashx?find=?ad=30|1||||2||8|||67|3630001|||||||||||||||||||1||||||||||',dataType: 'html',success: function (response) { if (response && typeof response == 'string' && response.trim().length > 0 && typeof (sfFind.Location1Id) != 'undefined') { $('#divPhotoGallery').html('').append(response);  $('div.box_top_Galery').removeAttr('style'); } else { $('#divPhotoGallery').html('');  $('div.box_top_Galery').attr('style', 'display: none !important;'); }}});}});</script><script type="text/javascript">function OLAPAdvertContact2(advId,originId,typeId){ WSStatistics.Contact(advId,typeId,40,'2021/04/07:22:52:41:988-062-111',originId);}</script><script type="text/javascript">function OlapSearchStats(cat1,loc1,loc2,loc3,loc4,trans){var type='5001';var src='40';var ck='2021/04/07:22:52:41:988-062-111';WSStatistics.SaveFilters(type,src,ck,cat1,loc1,loc2,loc3,loc4,trans);}
OlapSearchStats('8','67','3630001','0','','2');</script></div>
    <div id="ctl00_publicity">
    </div>
    

    <!--Div necesarios para las notificaciones-->
    <div id="AlertContainer"></div>
    <div id="notification_panel" class="progress_fixed">Procesando</div>
    <div id="msg" class="msg_black">
        <div class="msg_content">
            <span></span>
        </div>
    </div>
    <div id="layer_black"></div>

    <div id="debugDiv" style="color:#fff;background-color:#000;width:800px;height:70px;display:none;position:fixed;bottom:0px;right:0px;z-index:999999;">
        <textarea rows="4" cols="108" id="txtDebug" value="Debug"></textarea>
    </div>
    <script type="text/javascript">
        function GetBreadCrumbsOk() { }
        $("#debugDiv").attr("style", "color:#fff;background-color:#000;width:800px;height:70px;display:none;position:fixed;bottom:0px;right:0px;z-index:999999;")
        
        function addDebug(text) {
            $("#txtDebug").text(text + "\n" + $("#txtDebug").text());
        }
    </script>


<script type="text/javascript" async="" src="https://api.trackuity.com/auto?ts=1617835963652&amp;cookie=5062432901404836868&amp;url=https%3A%2F%2Fwww.fincaraiz.com.co%2Fapartamentos%2Farriendo%2Fbogota&amp;referrer=&amp;key=BjxWXgW7qj5CBprWxtqBtA"></script><div class="CookiesPrincipal" id="PoliticaCookies">                        <div class="CookiesSegunda">                            <span>                                <p class="TextoCookies">                                    Utilizamos cookies propias para mejorar tu experiencia de navegación. Si continúas en el sitio consideramos que aceptas su uso.<a href="/CookiesPolicy.aspx" target="_blank" rel="noopener noreferrer"> Más información </a>                                </p>                            </span>                            <div class="AceptarCookie">                                <button class="BotonAceptarCookie" onclick="CrearCookiePolitica();"> ACEPTO </button>                            </div>                        </div>                    </div><iframe height="1" width="1" style="display:none" src="//us.creativecdn.com/tags?id=pr_hZsXzDiaQEYXCnsNU30o_listing_5724798,6034343,5918672,6232295,6238945&amp;id=pr_hZsXzDiaQEYXCnsNU30o_uid_unknown" id="utag_79"></iframe><script type="text/javascript" async="" src="https://api.trackuity.com/log?ts=1617835963652&amp;cookie=5062432901404836868&amp;url=https%3A%2F%2Fwww.fincaraiz.com.co%2Fapartamentos%2Farriendo%2Fbogota&amp;referrer=&amp;key=DxhMQ8Hb4z2LNmz47xGaQN&amp;name=loading_time&amp;value=1488"></script><div id="criteo-tags-div" style="display: none;"><iframe src="https://gum.criteo.com/syncframe?topUrl=www.fincaraiz.com.co#{&quot;bundle&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;cw&quot;:true,&quot;lwid&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;optout&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;origin&quot;:&quot;onetag&quot;,&quot;pm&quot;:0,&quot;sid&quot;:{&quot;origin&quot;:0,&quot;value&quot;:null},&quot;tld&quot;:&quot;fincaraiz.com.co&quot;,&quot;topUrl&quot;:&quot;www.fincaraiz.com.co&quot;,&quot;uid&quot;:null,&quot;version&quot;:&quot;5_6_2&quot;}" id="criteo-syncframe" width="0" height="0" frameborder="0" style="border-width:0px; margin:0px; display:none" title="Criteo GUM iframe"></iframe></div><iframe id="google_osd_static_frame_8681615728729" name="google_osd_static_frame" style="display: none; width: 0px; height: 0px;"></iframe><iframe src="https://bid.g.doubleclick.net/xbbe/pixel?d=KAE" style="display: none;"></iframe><iframe height="0" width="0" title="Criteo DIS iframe" style="display: none;"></iframe></body></html>